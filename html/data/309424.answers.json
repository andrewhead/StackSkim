{
  "has_more": true, 
  "items": [
    {
      "body": "<p>I'd use some Java 8 tricks.</p>\n\n<pre><code>public static String streamToString(final InputStream inputStream) throws Exception\n{\n    try\n    {\n        final BufferedReader br // buffering optional\n           = new BufferedReader(new InputStreamReader(inputStream)))\n    {\n        return br.lines().parallel().collect(Collectors.joining(\"\\n\"));\n                       // parallel optional\n    }\n    catch (IOException e)\n    {\n        throw new RuntimeException(e);\n        // whatever.\n    }\n}\n</code></pre>\n\n<p>Essentially the same as some other answers except more succinct.</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1414576181, 
      "comments": [
        {
          "body": "Would that <code>return null</code> ever get called? Either the <code>br.lines...</code> returns or an exception is thrown.", 
          "edited": false, 
          "comment_id": 38693783, 
          "creation_date": 1406106817, 
          "post_id": 24810414, 
          "score": 1, 
          "body_markdown": "Would that `return null` ever get called? Either the `br.lines...` returns or an exception is thrown.", 
          "owner": {
            "user_id": 1916917, 
            "profile_image": "https://www.gravatar.com/avatar/4f93c1f2d2f2bb64e7e6c2d092f5a08a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 814, 
            "link": "http://stackoverflow.com/users/1916917/trengot", 
            "accept_rate": 50, 
            "display_name": "Trengot"
          }
        }
      ], 
      "creation_date": 1405619882, 
      "comment_count": 1, 
      "score": 2, 
      "body_markdown": "I&#39;d use some Java 8 tricks.\r\n\r\n    public static String streamToString(final InputStream inputStream){\r\n        try (final BufferedReader br // buffering optional\r\n              = new BufferedReader(new InputStreamReader(inputStream))){\r\n            return br.lines().parallel().collect(Collectors.joining(&quot;\\n&quot;));\r\n                           // parallel optional\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n            // whatever.\r\n        }\r\n    }\r\n\r\nEssentially the same as some other answers except more succinct.", 
      "owner": {
        "user_id": 3040627, 
        "profile_image": "https://www.gravatar.com/avatar/9e7231733dbc07f40f96db5a587ee6ca?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1219, 
        "link": "http://stackoverflow.com/users/3040627/simon-kuang", 
        "accept_rate": 82, 
        "display_name": "Simon Kuang"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1414576181, 
      "answer_id": 24810414
    }, 
    {
      "body": "<p>Here is the complete method for converting <code>InputStream</code> into <code>String</code> without using any third party library. Use <code>StringBuilder</code> for single threaded environment otherwise use <code>StringBuffer</code>.  </p>\n\n<pre><code>    public static String getString( InputStream is) throws IOException {\n        int ch;\n        StringBuilder sb = new StringBuilder();\n        while((ch = is.read())!= -1)\n            sb.append((char)ch);\n        return sb.toString();\n    }\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1411011686, 
      "comments": [
        {
          "body": "In this method there is no encoding applied. So let&#39;s say the data received from the InputStream is encoded using UTF-8 the output will be wrong. To fix this you could use <code>in = new InputStreamReader(inputStream)</code> and <code>(char)in.read()</code>.", 
          "edited": false, 
          "comment_id": 42056488, 
          "creation_date": 1415103706, 
          "post_id": 22960005, 
          "score": 0, 
          "body_markdown": "In this method there is no encoding applied. So let&#39;s say the data received from the InputStream is encoded using UTF-8 the output will be wrong. To fix this you could use `in = new InputStreamReader(inputStream)` and `(char)in.read()`.", 
          "owner": {
            "user_id": 1520422, 
            "profile_image": "https://www.gravatar.com/avatar/9f09b1b39f193a707bd8bb6147d30ef6?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 82, 
            "link": "http://stackoverflow.com/users/1520422/frederic-leitenberger", 
            "display_name": "Frederic Leitenberger"
          }
        }, 
        {
          "body": "Isn&#39;t reading it character by character a bit slow?", 
          "edited": false, 
          "comment_id": 42081499, 
          "creation_date": 1415152842, 
          "post_id": 22960005, 
          "score": 0, 
          "body_markdown": "Isn&#39;t reading it character by character a bit slow?", 
          "owner": {
            "user_id": 1035897, 
            "profile_image": "https://www.gravatar.com/avatar/3eccb41827ff628fa4143045e40c1b8c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 927, 
            "link": "http://stackoverflow.com/users/1035897/lennart-rolland", 
            "accept_rate": 63, 
            "display_name": "Lennart Rolland"
          }
        }, 
        {
          "body": "and memory-inefficient as well; I believe I tried using this before on a large input and StringBuilder ran out of memory", 
          "edited": false, 
          "comment_id": 42505508, 
          "creation_date": 1416281849, 
          "post_id": 22960005, 
          "score": 0, 
          "body_markdown": "and memory-inefficient as well; I believe I tried using this before on a large input and StringBuilder ran out of memory", 
          "owner": {
            "user_id": 689161, 
            "profile_image": "https://www.gravatar.com/avatar/e576e2746622a6e67a49e735abd83d21?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 774, 
            "link": "http://stackoverflow.com/users/689161/gengkev", 
            "display_name": "gengkev"
          }
        }
      ], 
      "creation_date": 1397039872, 
      "comment_count": 3, 
      "score": 6, 
      "body_markdown": "Here is the complete method for converting `InputStream` into `String` without using any third party library. Use `StringBuilder` for single threaded environment otherwise use `StringBuffer`.  \r\n\r\n  \r\n\r\n        public static String getString( InputStream is) throws IOException {\r\n        \tint ch;\r\n        \tStringBuilder sb = new StringBuilder();\r\n        \twhile((ch = is.read())!= -1)\r\n        \t\tsb.append((char)ch);\r\n        \treturn sb.toString();\r\n        }", 
      "owner": {
        "user_id": 978136, 
        "profile_image": "http://i.stack.imgur.com/PK38A.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1080, 
        "link": "http://stackoverflow.com/users/978136/laksys", 
        "accept_rate": 50, 
        "display_name": "laksys"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1411011686, 
      "answer_id": 22960005
    }, 
    {
      "body": "<p>A nice way to do this is using <a href=\"http://commons.apache.org/\">Apache commons</a> <code><a href=\"http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html\">IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>... something like</p>\n\n<pre><code>StringWriter writer = new StringWriter();\nIOUtils.copy(inputStream, writer, encoding);\nString theString = writer.toString();\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>String theString = IOUtils.toString(inputStream, encoding)\n</code></pre>\n\n<p>Alternatively, you could use <code>ByteArrayOutputStream</code> if you don't want to mix your Streams and Writers</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1410897227, 
      "comments": [
        {
          "body": "I hope IOUtils takes an optional Charset (or at least the name of the encodding to use). Best not to leave this kind of thing to chance :)", 
          "edited": false, 
          "comment_id": 152587, 
          "creation_date": 1227287408, 
          "post_id": 309448, 
          "score": 40, 
          "body_markdown": "I hope IOUtils takes an optional Charset (or at least the name of the encodding to use). Best not to leave this kind of thing to chance :)", 
          "owner": {
            "user_id": 22656, 
            "profile_image": "https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 727519, 
            "link": "http://stackoverflow.com/users/22656/jon-skeet", 
            "accept_rate": 85, 
            "display_name": "Jon Skeet"
          }
        }, 
        {
          "body": "Haha - of course it does! <a href=\"http://commons.apache.org/io/apidocs/org/apache/commons/io/IOUtils.html#copy(java.io.InputStream,%20java.io.Writer,%20java.lang.String)\" rel=\"nofollow\">commons.apache.org/io/apidocs/org/apache/commons/io/&hellip;</a>", 
          "edited": false, 
          "comment_id": 152591, 
          "creation_date": 1227287515, 
          "post_id": 309448, 
          "score": 8, 
          "body_markdown": "Haha - of course it does! http://commons.apache.org/io/apidocs/org/apache/commons/io/IOUtils.html#copy(java.io.InputStream,%20java.io.Writer,%20java.lang.String)", 
          "owner": {
            "user_id": 21590, 
            "profile_image": "https://www.gravatar.com/avatar/d21e4f986f5b05d89b0070b37e296a87?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 8300, 
            "link": "http://stackoverflow.com/users/21590/harry-lime", 
            "accept_rate": 57, 
            "display_name": "Harry Lime"
          }
        }, 
        {
          "body": "You really, <i>really</i>, <b>really</b> should be using <code>IOUtils.copy(inputStream, writer, encoding);</code> unless you really, <i>really</i>, <b>really</b> know what you&#39;re doing, which people never do with character encoding related programming. Or in this case, <code>IOUtils.toString(inputStream, encoding)</code>. Methods that use the platform default encoding are almost never correct to use, like every other method that gives different results depending on which machine/operating system/platform or version thereof it is run on.", 
          "edited": false, 
          "comment_id": 4886900, 
          "creation_date": 1292593551, 
          "post_id": 309448, 
          "score": 96, 
          "body_markdown": "You really, *really*, **really** should be using `IOUtils.copy(inputStream, writer, encoding);` unless you really, *really*, **really** know what you&#39;re doing, which people never do with character encoding related programming. Or in this case, `IOUtils.toString(inputStream, encoding)`. Methods that use the platform default encoding are almost never correct to use, like every other method that gives different results depending on which machine/operating system/platform or version thereof it is run on.", 
          "owner": {
            "user_id": 233014, 
            "profile_image": "https://www.gravatar.com/avatar/78f1b09485af8a07927344b3257b05a9?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 7812, 
            "link": "http://stackoverflow.com/users/233014/christoffer-hammarstr%c3%b6m", 
            "display_name": "Christoffer Hammarstr&#246;m"
          }
        }, 
        {
          "body": "I think the below answer (IOUtils.toString()) is simpler since there is no need for a StringWriter", 
          "edited": false, 
          "comment_id": 5413122, 
          "creation_date": 1296604556, 
          "post_id": 309448, 
          "score": 29, 
          "body_markdown": "I think the below answer (IOUtils.toString()) is simpler since there is no need for a StringWriter", 
          "owner": {
            "user_id": 54396, 
            "profile_image": "https://www.gravatar.com/avatar/14d47c546ec62dda48a3f292276ec94d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1799, 
            "link": "http://stackoverflow.com/users/54396/patrick", 
            "accept_rate": 75, 
            "display_name": "Patrick"
          }
        }, 
        {
          "body": "A quick but not clean solution. I would rather prefer a solution without adding additional libraries as mentioned in the post below: <a href=\"http://stackoverflow.com/a/6938341/411951\">stackoverflow.com/a/6938341/411951</a>", 
          "edited": false, 
          "comment_id": 12048915, 
          "creation_date": 1330594096, 
          "post_id": 309448, 
          "score": 2, 
          "body_markdown": "A quick but not clean solution. I would rather prefer a solution without adding additional libraries as mentioned in the post below: http://stackoverflow.com/a/6938341/411951", 
          "owner": {
            "user_id": 411951, 
            "profile_image": "https://www.gravatar.com/avatar/9c5f0c6a5a7daaba26d0d9b08df3529f?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 4770, 
            "link": "http://stackoverflow.com/users/411951/martinvonmartinsgr%c3%bcn", 
            "accept_rate": 86, 
            "display_name": "MartinVonMartinsgr&#252;n"
          }
        }, 
        {
          "body": "i found filenotfound exception while i try to read  file name with &quot;\u0414\u043e_\u0441\u0432\u0438\u0434\u0430\u043d\u0438\u044f&quot; file name(Russian language) i try with FileInputstream but it not cable to read this filename from sdcard.", 
          "edited": false, 
          "comment_id": 32798304, 
          "creation_date": 1392097178, 
          "post_id": 309448, 
          "score": 0, 
          "body_markdown": "i found filenotfound exception while i try to read  file name with &quot;\u0414\u043e_\u0441\u0432\u0438\u0434\u0430\u043d\u0438\u044f&quot; file name(Russian language) i try with FileInputstream but it not cable to read this filename from sdcard.", 
          "owner": {
            "user_id": 1574153, 
            "profile_image": "http://i.stack.imgur.com/s5Y6t.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 2243, 
            "link": "http://stackoverflow.com/users/1574153/bhanu-sharma", 
            "accept_rate": 40, 
            "display_name": "Bhanu Sharma"
          }
        }, 
        {
          "body": "For android developers, seems like android does not come with IOUtils from Apache. So you might consider referring to other answers.", 
          "edited": false, 
          "comment_id": 39007189, 
          "creation_date": 1406865445, 
          "post_id": 309448, 
          "score": 0, 
          "body_markdown": "For android developers, seems like android does not come with IOUtils from Apache. So you might consider referring to other answers.", 
          "owner": {
            "user_id": 767033, 
            "profile_image": "https://www.gravatar.com/avatar/07fa4dc36952b149cdfe7c140ff08fc5?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 375, 
            "link": "http://stackoverflow.com/users/767033/chris-zou", 
            "accept_rate": 46, 
            "display_name": "Chris.Zou"
          }
        }, 
        {
          "body": "I work in a limited footprint environment, so the solution by @PavelRepin below using the java io/util libs makes more sense.", 
          "edited": false, 
          "comment_id": 40808917, 
          "creation_date": 1411688061, 
          "post_id": 309448, 
          "score": 0, 
          "body_markdown": "I work in a limited footprint environment, so the solution by @PavelRepin below using the java io/util libs makes more sense.", 
          "owner": {
            "user_id": 498522, 
            "profile_image": "https://www.gravatar.com/avatar/b448532d349dc20165d85382b5ceee6a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 893, 
            "link": "http://stackoverflow.com/users/498522/james", 
            "accept_rate": 73, 
            "display_name": "James"
          }
        }, 
        {
          "body": "@ChristofferHammarstr&#246;m totally agree. Even on the same machine if you run java from cmd or from your IDE.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 233014, 
            "profile_image": "https://www.gravatar.com/avatar/78f1b09485af8a07927344b3257b05a9?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 7812, 
            "link": "http://stackoverflow.com/users/233014/christoffer-hammarstr%c3%b6m", 
            "display_name": "Christoffer Hammarstr&#246;m"
          }, 
          "comment_id": 41674719, 
          "creation_date": 1414049354, 
          "post_id": 309448, 
          "score": 0, 
          "body_markdown": "@ChristofferHammarstr&#246;m totally agree. Even on the same machine if you run java from cmd or from your IDE.", 
          "owner": {
            "user_id": 170196, 
            "profile_image": "https://www.gravatar.com/avatar/819c08b7776a89bb8ee06eda7e90b2fa?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 2015, 
            "link": "http://stackoverflow.com/users/170196/esben-skov-pedersen", 
            "accept_rate": 83, 
            "display_name": "Esben Skov Pedersen"
          }
        }
      ], 
      "creation_date": 1227286460, 
      "comment_count": 9, 
      "score": 727, 
      "body_markdown": "A nice way to do this is using [Apache commons][1] &lt;code&gt;[IOUtils][2]&lt;/code&gt; to copy the &lt;code&gt;InputStream&lt;/code&gt; into a &lt;code&gt;StringWriter&lt;/code&gt;... something like\r\n\r\n    StringWriter writer = new StringWriter();\r\n    IOUtils.copy(inputStream, writer, encoding);\r\n    String theString = writer.toString();\r\n\r\nor even\r\n\r\n    String theString = IOUtils.toString(inputStream, encoding)\r\n\r\nAlternatively, you could use &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; if you don&#39;t want to mix your Streams and Writers\r\n\r\n\r\n  [1]: http://commons.apache.org/\r\n  [2]: http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html", 
      "owner": {
        "user_id": 21590, 
        "profile_image": "https://www.gravatar.com/avatar/d21e4f986f5b05d89b0070b37e296a87?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 8300, 
        "link": "http://stackoverflow.com/users/21590/harry-lime", 
        "accept_rate": 57, 
        "display_name": "Harry Lime"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1410897227, 
      "answer_id": 309448
    }, 
    {
      "body": "<p>The following doesn't address the original question, but rather some of the responses.</p>\n\n<p>Several responses suggest loops of the form</p>\n\n<pre><code>String line = null;\nwhile((line = reader.readLine()) != null) {\n  // ...\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for(String line = reader.readLine(); line != null; line = reader.readLine()) {\n    // ...\n}\n</code></pre>\n\n<p>The first form pollutes the namespace of the enclosing scope by declaring a variable \"read\" in the enclosing scope that will not be used for anything outside the for loop. The second form duplicates the readline() call.</p>\n\n<p>Here is a much cleaner way of writing this sort of loop in Java. It turns out that the first clause in a for-loop doesn't require an actual initializer value. This keeps the scope of the variable \"line\" to within the body of the for loop. Much more elegant! I haven't seen anybody using this form anywhere (I randomly discovered it one day years ago), but I use it all the time.</p>\n\n<pre><code>for (String line; (line = reader.readLine()) != null; ) {\n    //...\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1410423745, 
      "creation_date": 1410423745, 
      "comment_count": 0, 
      "score": 0, 
      "body_markdown": "The following doesn&#39;t address the original question, but rather some of the responses.\r\n\r\nSeveral responses suggest loops of the form\r\n\r\n    String line = null;\r\n    while((line = reader.readLine()) != null) {\r\n      // ...\r\n    }\r\n\r\nor\r\n\r\n    for(String line = reader.readLine(); line != null; line = reader.readLine()) {\r\n        // ...\r\n    }\r\n\r\nThe first form pollutes the namespace of the enclosing scope by declaring a variable &quot;read&quot; in the enclosing scope that will not be used for anything outside the for loop. The second form duplicates the readline() call.\r\n\r\nHere is a much cleaner way of writing this sort of loop in Java. It turns out that the first clause in a for-loop doesn&#39;t require an actual initializer value. This keeps the scope of the variable &quot;line&quot; to within the body of the for loop. Much more elegant! I haven&#39;t seen anybody using this form anywhere (I randomly discovered it one day years ago), but I use it all the time.\r\n\r\n    for (String line; (line = reader.readLine()) != null; ) {\r\n        //...\r\n    }\r\n", 
      "owner": {
        "user_id": 3950982, 
        "profile_image": "https://www.gravatar.com/avatar/7491f45ae073ed6bfe01b1e63fb06bf0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 71, 
        "link": "http://stackoverflow.com/users/3950982/luke-hutchison", 
        "display_name": "Luke Hutchison"
      }, 
      "is_accepted": false, 
      "answer_id": 25782577
    }, 
    {
      "body": "<pre><code>InputStream is = Context.openFileInput(someFileName); // whatever formate you have\n\nByteArrayOutputStream bos = new ByteArrayOutputStream();\n\nbyte[] b = new byte[1024];\n\nwhile ((int bytesRead = is.read(b)) != -1) {\n\n        bos.write(b, 0, bytesRead);\n}\n\nbyte[] bytes = bos.toByteArray();\n\nString audioDataString=bytes.toString();\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1410359199, 
      "creation_date": 1408969846, 
      "comment_count": 0, 
      "score": 0, 
      "body_markdown": "    InputStream is = Context.openFileInput(someFileName); // whatever formate you have\r\n    \r\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n    \r\n    byte[] b = new byte[1024];\r\n    \r\n    while ((int bytesRead = is.read(b)) != -1) {\r\n    \r\n            bos.write(b, 0, bytesRead);\r\n    }\r\n    \r\n    byte[] bytes = bos.toByteArray();\r\n     \r\n    String audioDataString=bytes.toString();", 
      "owner": {
        "user_id": 3129572, 
        "profile_image": "http://i.stack.imgur.com/iouWp.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 804, 
        "link": "http://stackoverflow.com/users/3129572/vaishali", 
        "display_name": "Vaishali"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1410359199, 
      "answer_id": 25486003
    }, 
    {
      "body": "<p>Here's how to do it using just the JDK using byte array buffers. This is actually how the commons-io <code>IOUtils.copy()</code> methods all work. You can replace <code>byte[]</code> with <code>char[]</code> if you're copying from a <code>Reader</code> instead of an <code>InputStream</code>.</p>\n\n<pre><code>import java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\n\n...\n\nInputStream is = ....\nByteArrayOutputStream baos = new ByteArrayOutputStream(8192);\nbyte[] buffer = new byte[8192];\nint count = 0;\ntry {\n  while ((count = is.read(buffer)) != -1) {\n    baos.write(buffer, 0, count);\n  }\n}\nfinally {\n  try {\n    is.close();\n  }\n  catch (Exception ignore) {\n  }\n}\n\nString charset = \"UTF-8\";\nString inputStreamAsString = baos.toString(charset);\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1407904209, 
      "comments": [
        {
          "body": "Please give a description on what you are trying to accomplish.", 
          "edited": false, 
          "comment_id": 17963120, 
          "creation_date": 1351861133, 
          "post_id": 13195413, 
          "score": 1, 
          "body_markdown": "Please give a description on what you are trying to accomplish.", 
          "owner": {
            "user_id": 421372, 
            "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 6334, 
            "link": "http://stackoverflow.com/users/421372/ragunath-jawahar", 
            "accept_rate": 90, 
            "display_name": "Ragunath Jawahar"
          }
        }
      ], 
      "creation_date": 1351859873, 
      "comment_count": 1, 
      "score": 9, 
      "body_markdown": "Here&#39;s how to do it using just the JDK using byte array buffers. This is actually how the commons-io `IOUtils.copy()` methods all work. You can replace `byte[]` with `char[]` if you&#39;re copying from a `Reader` instead of an `InputStream`.\r\n\r\n    import java.io.ByteArrayOutputStream;\r\n    import java.io.InputStream;\r\n\r\n    ...\r\n\r\n    InputStream is = ....\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream(8192);\r\n    byte[] buffer = new byte[8192];\r\n    int count = 0;\r\n    try {\r\n      while ((count = is.read(buffer)) != -1) {\r\n        baos.write(buffer, 0, count);\r\n      }\r\n    }\r\n    finally {\r\n      try {\r\n        is.close();\r\n      }\r\n      catch (Exception ignore) {\r\n      }\r\n    }\r\n\r\n    String charset = &quot;UTF-8&quot;;\r\n    String inputStreamAsString = baos.toString(charset);\r\n", 
      "owner": {
        "user_id": 1794244, 
        "profile_image": "https://www.gravatar.com/avatar/66304aaee3b9e8d537524ad0c626a47d?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 91, 
        "link": "http://stackoverflow.com/users/1794244/matt-shannon", 
        "display_name": "Matt Shannon"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1407904209, 
      "answer_id": 13195413
    }, 
    {
      "body": "<p>This is an answer adapted from <code>org.apache.commons.io.IOUtils</code> <a href=\"http://grepcode.com/file/repo1.maven.org/maven2/commons-io/commons-io/2.4/org/apache/commons/io/IOUtils.java\" rel=\"nofollow\">source code</a>, for those want to have the apache implementation but do not want the whole library.</p>\n\n<pre><code>private static final int BUFFER_SIZE = 4 * 1024;\n\npublic static String inputStreamToString(InputStream inputStream, String charsetName)\n        throws IOException {\n    StringBuilder builder = new StringBuilder();\n    InputStreamReader reader = new InputStreamReader(inputStream, charsetName);\n    char[] buffer = new char[BUFFER_SIZE];\n    int length;\n    while ((length = reader.read(buffer)) != -1) {\n        builder.append(buffer, 0, length);\n    }\n    return builder.toString();\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1407059276, 
      "creation_date": 1407059276, 
      "comment_count": 0, 
      "score": 2, 
      "body_markdown": "This is an answer adapted from `org.apache.commons.io.IOUtils` [source code](http://grepcode.com/file/repo1.maven.org/maven2/commons-io/commons-io/2.4/org/apache/commons/io/IOUtils.java), for those want to have the apache implementation but do not want the whole library.\r\n\r\n    private static final int BUFFER_SIZE = 4 * 1024;\r\n\r\n    public static String inputStreamToString(InputStream inputStream, String charsetName)\r\n            throws IOException {\r\n        StringBuilder builder = new StringBuilder();\r\n        InputStreamReader reader = new InputStreamReader(inputStream, charsetName);\r\n        char[] buffer = new char[BUFFER_SIZE];\r\n        int length;\r\n        while ((length = reader.read(buffer)) != -1) {\r\n            builder.append(buffer, 0, length);\r\n        }\r\n        return builder.toString();\r\n    }\r\n", 
      "owner": {
        "user_id": 2420519, 
        "profile_image": "https://www.gravatar.com/avatar/0d30c42d5ee2da9d89a8c146000a7dc6?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 184, 
        "link": "http://stackoverflow.com/users/2420519/dreaming-in-code", 
        "display_name": "Dreaming in Code"
      }, 
      "is_accepted": false, 
      "answer_id": 25103484
    }, 
    {
      "body": "<p>This is my pure Java &amp; Android solution, works well...</p>\n\n<pre><code>public String readFully(InputStream inputStream, String encoding)\n        throws IOException {\n    return new String(readFully(inputStream), encoding);\n}    \n\nprivate byte[] readFully(InputStream inputStream)\n        throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buffer = new byte[1024];\n    int length = 0;\n    while ((length = inputStream.read(buffer)) != -1) {\n        baos.write(buffer, 0, length);\n    }\n    return baos.toByteArray();\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1406934196, 
      "comments": [
        {
          "body": "Works well on Android in comparison with other answers which work only in enterprise java.", 
          "edited": false, 
          "comment_id": 19906876, 
          "creation_date": 1358191826, 
          "post_id": 10505933, 
          "score": 1, 
          "body_markdown": "Works well on Android in comparison with other answers which work only in enterprise java.", 
          "owner": {
            "user_id": 427225, 
            "profile_image": "https://www.gravatar.com/avatar/289a587fcdbac4b49c7aa6e6c7112dbb?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 9646, 
            "link": "http://stackoverflow.com/users/427225/vorrtex", 
            "display_name": "vorrtex"
          }
        }, 
        {
          "body": "That&#39;s where it came from... My Android tools library :)", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 427225, 
            "profile_image": "https://www.gravatar.com/avatar/289a587fcdbac4b49c7aa6e6c7112dbb?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 9646, 
            "link": "http://stackoverflow.com/users/427225/vorrtex", 
            "display_name": "vorrtex"
          }, 
          "comment_id": 20089088, 
          "creation_date": 1358723665, 
          "post_id": 10505933, 
          "score": 1, 
          "body_markdown": "That&#39;s where it came from... My Android tools library :)", 
          "owner": {
            "user_id": 348189, 
            "profile_image": "https://www.gravatar.com/avatar/29b1970e8e3ec8cbd13bbc02a8d7a22c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 2640, 
            "link": "http://stackoverflow.com/users/348189/tacb0ss", 
            "accept_rate": 87, 
            "display_name": "TacB0sS"
          }
        }, 
        {
          "body": "Crashed in Android with OutOfMemory error on the &quot;.write&quot; line, every time, for short strings.", 
          "edited": false, 
          "comment_id": 22851706, 
          "creation_date": 1366046334, 
          "post_id": 10505933, 
          "score": 0, 
          "body_markdown": "Crashed in Android with OutOfMemory error on the &quot;.write&quot; line, every time, for short strings.", 
          "owner": {
            "user_id": 153422, 
            "profile_image": "https://www.gravatar.com/avatar/8033fa6d00ea3c5a231a31ca1989fd78?s=128&d=identicon&r=PG&f=1", 
            "user_type": "registered", 
            "reputation": 19052, 
            "link": "http://stackoverflow.com/users/153422/adam", 
            "accept_rate": 51, 
            "display_name": "Adam"
          }
        }, 
        {
          "body": "What on earth do you copy...??? I copy 5 - 10 mb files easy...", 
          "edited": false, 
          "comment_id": 24004305, 
          "creation_date": 1369177304, 
          "post_id": 10505933, 
          "score": 0, 
          "body_markdown": "What on earth do you copy...??? I copy 5 - 10 mb files easy...", 
          "owner": {
            "user_id": 348189, 
            "profile_image": "https://www.gravatar.com/avatar/29b1970e8e3ec8cbd13bbc02a8d7a22c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 2640, 
            "link": "http://stackoverflow.com/users/348189/tacb0ss", 
            "accept_rate": 87, 
            "display_name": "TacB0sS"
          }
        }, 
        {
          "body": "Please specify the encoding - it&#39;s a very common bug", 
          "edited": false, 
          "comment_id": 26144883, 
          "creation_date": 1374941262, 
          "post_id": 10505933, 
          "score": 5, 
          "body_markdown": "Please specify the encoding - it&#39;s a very common bug", 
          "owner": {
            "user_id": 281545, 
            "profile_image": "https://www.gravatar.com/avatar/e9afcf11d81904cdb5677c13d249b6c5?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 5053, 
            "link": "http://stackoverflow.com/users/281545/mr-and-mrs-d", 
            "accept_rate": 81, 
            "display_name": "Mr_and_Mrs_D"
          }
        }, 
        {
          "body": "I&#39;ve added the encoding. just as a side note, the original readFully method I have in my code does not return String, it returns byte[] for a more general purpose functionality. Implementing the new String(...) with encoding is the responsibility of the on that uses the API!", 
          "edited": false, 
          "comment_id": 26847605, 
          "creation_date": 1376823007, 
          "post_id": 10505933, 
          "score": 0, 
          "body_markdown": "I&#39;ve added the encoding. just as a side note, the original readFully method I have in my code does not return String, it returns byte[] for a more general purpose functionality. Implementing the new String(...) with encoding is the responsibility of the on that uses the API!", 
          "owner": {
            "user_id": 348189, 
            "profile_image": "https://www.gravatar.com/avatar/29b1970e8e3ec8cbd13bbc02a8d7a22c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 2640, 
            "link": "http://stackoverflow.com/users/348189/tacb0ss", 
            "accept_rate": 87, 
            "display_name": "TacB0sS"
          }
        }, 
        {
          "body": "Quick note: The memory footprint of this is maxed by <code>2*n</code>, where n is the size of the stream, as per the <code>ByteArrayInputStream</code> auto-growing system.", 
          "edited": false, 
          "comment_id": 35415405, 
          "creation_date": 1397844432, 
          "post_id": 10505933, 
          "score": 0, 
          "body_markdown": "Quick note: The memory footprint of this is maxed by `2*n`, where n is the size of the stream, as per the `ByteArrayInputStream` auto-growing system.", 
          "owner": {
            "user_id": 671543, 
            "profile_image": "https://www.gravatar.com/avatar/2145962377da9419f2446cd565f614ee?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 18270, 
            "link": "http://stackoverflow.com/users/671543/njzk2", 
            "accept_rate": 50, 
            "display_name": "njzk2"
          }
        }, 
        {
          "body": "@njzk2 Could you please elaborate... I&#39;m not sure how an InputStream has any effect...?", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 671543, 
            "profile_image": "https://www.gravatar.com/avatar/2145962377da9419f2446cd565f614ee?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 18270, 
            "link": "http://stackoverflow.com/users/671543/njzk2", 
            "accept_rate": 50, 
            "display_name": "njzk2"
          }, 
          "comment_id": 36200620, 
          "creation_date": 1399757400, 
          "post_id": 10505933, 
          "score": 0, 
          "body_markdown": "@njzk2 Could you please elaborate... I&#39;m not sure how an InputStream has any effect...?", 
          "owner": {
            "user_id": 348189, 
            "profile_image": "https://www.gravatar.com/avatar/29b1970e8e3ec8cbd13bbc02a8d7a22c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 2640, 
            "link": "http://stackoverflow.com/users/348189/tacb0ss", 
            "accept_rate": 87, 
            "display_name": "TacB0sS"
          }
        }
      ], 
      "creation_date": 1336508651, 
      "comment_count": 8, 
      "score": 48, 
      "body_markdown": "This is my pure Java &amp; Android solution, works well...\r\n\r\n    public String readFully(InputStream inputStream, String encoding)\r\n    \t\tthrows IOException {\r\n        return new String(readFully(inputStream), encoding);\r\n    }    \r\n\r\n    private byte[] readFully(InputStream inputStream)\r\n    \t\tthrows IOException {\r\n    \tByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    \tbyte[] buffer = new byte[1024];\r\n    \tint length = 0;\r\n    \twhile ((length = inputStream.read(buffer)) != -1) {\r\n            baos.write(buffer, 0, length);\r\n    \t}\r\n    \treturn baos.toByteArray();\r\n    }", 
      "owner": {
        "user_id": 348189, 
        "profile_image": "https://www.gravatar.com/avatar/29b1970e8e3ec8cbd13bbc02a8d7a22c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2640, 
        "link": "http://stackoverflow.com/users/348189/tacb0ss", 
        "accept_rate": 87, 
        "display_name": "TacB0sS"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1406934196, 
      "answer_id": 10505933
    }, 
    {
      "body": "<p>This one is nice because:</p>\n\n<ul>\n<li>Hand safety the Charset.</li>\n<li>You control the read buffer size.</li>\n<li>You can provision the length of the builder and can be not exactly.</li>\n<li>Is free from library dependencies.</li>\n<li>Is for Java 7 or higher.</li>\n</ul>\n\n<p><em>What the for?</em></p>\n\n<pre><code>public static String convertStreamToString(InputStream is) { \n   StringBuilder sb = new StringBuilder(2048); // Define a size if you have an idea of it.\n   char[] read = new char[128]; // Your buffer size.\n   try (InputStreamReader ir = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n     for (int i; -1 != (i = ir.read(read)); sb.append(read, 0, i));\n   }\n   return sb.toString();\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1405455889, 
      "creation_date": 1402213590, 
      "comment_count": 0, 
      "score": 3, 
      "body_markdown": "This one is nice because:\r\n\r\n - Hand safety the Charset.\r\n - You control the read buffer size.\r\n - You can provision the length of the builder and can be not exactly.\r\n - Is free from library dependencies.\r\n - Is for Java 7 or higher.\r\n\r\n*What the for?*\r\n\r\n    public static String convertStreamToString(InputStream is) { \r\n       StringBuilder sb = new StringBuilder(2048); // Define a size if you have an idea of it.\r\n       char[] read = new char[128]; // Your buffer size.\r\n       try (InputStreamReader ir = new InputStreamReader(is, StandardCharsets.UTF_8)) {\r\n         for (int i; -1 != (i = ir.read(read)); sb.append(read, 0, i));\r\n       }\r\n       return sb.toString();\r\n    }", 
      "owner": {
        "user_id": 980442, 
        "profile_image": "https://www.gravatar.com/avatar/c3dfc2add126de8ee67917a8090f0202?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3361, 
        "link": "http://stackoverflow.com/users/980442/daniel-de-le%c3%b3n", 
        "accept_rate": 25, 
        "display_name": "Daniel De Le&#243;n"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1405455889, 
      "answer_id": 24104048
    }, 
    {
      "body": "<p>I had log4j available, so I was able to use the org.apache.log4j.lf5.util.StreamUtils.getBytes to get the bytes, which I was able to convert into a string using the String ctor</p>\n\n<pre><code>String result = new String(StreamUtils.getBytes(inputStream));\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1399917879, 
      "comments": [
        {
          "body": "-1. Just because something is available doesn&#39;t mean it should be used. When you switch the logging provider, you&#39;re going to have to replace this. Also, it looks like it is internal and shouldn&#39;t really be used outside of log4j.", 
          "edited": false, 
          "comment_id": 39433231, 
          "creation_date": 1407995511, 
          "post_id": 23615823, 
          "score": 0, 
          "body_markdown": "-1. Just because something is available doesn&#39;t mean it should be used. When you switch the logging provider, you&#39;re going to have to replace this. Also, it looks like it is internal and shouldn&#39;t really be used outside of log4j.", 
          "owner": {
            "user_id": 305973, 
            "profile_image": "https://www.gravatar.com/avatar/cd49db0b676767ea4358b1047c4cddd2?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 10303, 
            "link": "http://stackoverflow.com/users/305973/robinst", 
            "accept_rate": 100, 
            "display_name": "robinst"
          }
        }
      ], 
      "creation_date": 1399917879, 
      "comment_count": 1, 
      "score": -1, 
      "body_markdown": "I had log4j available, so I was able to use the org.apache.log4j.lf5.util.StreamUtils.getBytes to get the bytes, which I was able to convert into a string using the String ctor\r\n\r\n    String result = new String(StreamUtils.getBytes(inputStream));", 
      "owner": {
        "user_id": 262379, 
        "profile_image": "https://www.gravatar.com/avatar/b8bcd362d67c89dbb8dc7b0418109597?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1092, 
        "link": "http://stackoverflow.com/users/262379/dinis-cruz", 
        "accept_rate": 38, 
        "display_name": "Dinis Cruz"
      }, 
      "is_accepted": false, 
      "answer_id": 23615823
    }, 
    {
      "body": "<p>Try these 4 statements..</p>\n\n<p>As per the point recalled by Fred, it is not recommended to append a <code>String</code> with <code>+=</code> operator since every time a new <code>char</code> is appended to the existing <code>String</code> creating a new <code>String</code> object again and assigning its address to <code>st</code> while the old <code>st</code> object becomes garbage.</p>\n\n<pre><code>public String convertStreamToString(InputStream is)\n{\nint k;\n     StringBuffer sb=new StringBuffer();\n     while((k=fin.read())!=-1)\n     {\n     sb.append((char)k);\n     }\nreturn sb.toString();\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Not recommended, but this is also a way</strong></p>\n\n<pre><code>public String convertStreamToString(InputStream is) { \n    int k;\n    String st=\"\";\n    while((k=is.read())!=-1)\n    {\n    st+=(char)k;\n    }\nreturn st;\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1393004882, 
      "comments": [
        {
          "body": "String concatenation in a loop with the <code>+=</code> operator is not a good idea. It is better to use a <code>StringBuilder</code> or a <code>StringBuffer</code>.", 
          "edited": false, 
          "comment_id": 33186444, 
          "creation_date": 1392909874, 
          "post_id": 21619906, 
          "score": 1, 
          "body_markdown": "String concatenation in a loop with the `+=` operator is not a good idea. It is better to use a `StringBuilder` or a `StringBuffer`.", 
          "owner": {
            "user_id": 2470524, 
            "profile_image": "https://www.gravatar.com/avatar/30572a95a69e05b8c921c1ac6672cb63?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 452, 
            "link": "http://stackoverflow.com/users/2470524/fred", 
            "accept_rate": 0, 
            "display_name": "Fred"
          }
        }
      ], 
      "creation_date": 1391750231, 
      "comment_count": 1, 
      "score": 2, 
      "body_markdown": "Try these 4 statements..\r\n\r\nAs per the point recalled by Fred, it is not recommended to append a `String` with `+=` operator since every time a new `char` is appended to the existing `String` creating a new `String` object again and assigning its address to `st` while the old `st` object becomes garbage.\r\n\r\n    public String convertStreamToString(InputStream is)\r\n    {\r\n    int k;\r\n         StringBuffer sb=new StringBuffer();\r\n         while((k=fin.read())!=-1)\r\n         {\r\n         sb.append((char)k);\r\n         }\r\n    return sb.toString();\r\n    }\r\n\r\n\r\n----------\r\n**Not recommended, but this is also a way**\r\n\r\n    public String convertStreamToString(InputStream is) { \r\n        int k;\r\n        String st=&quot;&quot;;\r\n        while((k=is.read())!=-1)\r\n        {\r\n        st+=(char)k;\r\n        }\r\n    return st;\r\n    }\r\n\r\n", 
      "owner": {
        "user_id": 2534090, 
        "profile_image": "https://www.gravatar.com/avatar/b044d80e3dfc035a673747915d2b0d86?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1224, 
        "link": "http://stackoverflow.com/users/2534090/javatechnical", 
        "accept_rate": 37, 
        "display_name": "JavaTechnical"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1393004882, 
      "answer_id": 21619906
    }, 
    {
      "body": "<p>I have written a class that does just that, so I figured I'd share it with everyone. Sometimes you don't want to add Apache Commons just for one thing, and want something dumber than Scanner that doesn't examine the content.</p>\n\n<p>Usage is as follows</p>\n\n<pre><code>// Read from InputStream\nString data = new ReaderSink(inputStream, Charset.forName(\"UTF-8\")).drain();\n\n// Read from File\ndata = new ReaderSink(file, Charset.forName(\"UTF-8\")).drain();\n\n// Drain input stream to console\nnew ReaderSink(inputStream, Charset.forName(\"UTF-8\")).drainTo(System.out);\n</code></pre>\n\n<p>Here is the code for ReaderSink:</p>\n\n<pre><code>import java.io.*;\nimport java.nio.charset.Charset;\n\n/**\n * A simple sink class that drains a {@link Reader} to a {@link String} or\n * to a {@link Writer}.\n *\n * @author Ben Barkay\n * @version 2/20/2014\n */\npublic class ReaderSink {\n    /**\n     * The default buffer size to use if no buffer size was specified.\n     */\n    public static final int DEFAULT_BUFFER_SIZE = 1024;\n\n    /**\n     * The {@link Reader} that will be drained.\n     */\n    private final Reader in;\n\n    /**\n     * Constructs a new {@code ReaderSink} for the specified file and charset.\n     * @param file      The file to read from.\n     * @param charset   The charset to use.\n     * @throws FileNotFoundException    If the file was not found on the filesystem.\n     */\n    public ReaderSink(File file, Charset charset) throws FileNotFoundException {\n        this(new FileInputStream(file), charset);\n    }\n\n    /**\n     * Constructs a new {@code ReaderSink} for the specified {@link InputStream}.\n     * @param in        The {@link InputStream} to drain.\n     * @param charset   The charset to use.\n     */\n    public ReaderSink(InputStream in, Charset charset) {\n        this(new InputStreamReader(in, charset));\n    }\n\n    /**\n     * Constructs a new {@code ReaderSink} for the specified {@link Reader}.\n     * @param in    The reader to drain.\n     */\n    public ReaderSink(Reader in) {\n        this.in = in;\n    }\n\n    /**\n     * Drains the data from the underlying {@link Reader}, returning a {@link String} containing\n     * all of the read information. This method will use {@link #DEFAULT_BUFFER_SIZE} for\n     * its buffer size.\n     * @return  A {@link String} containing all of the information that was read.\n     */\n    public String drain() throws IOException {\n        return drain(DEFAULT_BUFFER_SIZE);\n    }\n\n    /**\n     * Drains the data from the underlying {@link Reader}, returning a {@link String} containing\n     * all of the read information.\n     * @param bufferSize    The size of the buffer to use when reading.\n     * @return  A {@link String} containing all of the information that was read.\n     */\n    public String drain(int bufferSize) throws IOException {\n        StringWriter stringWriter = new StringWriter();\n        drainTo(stringWriter, bufferSize);\n        return stringWriter.toString();\n    }\n\n    /**\n     * Drains the data from the underlying {@link Reader}, writing it to the\n     * specified {@link Writer}. This method will use {@link #DEFAULT_BUFFER_SIZE} for\n     * its buffer size.\n     * @param out   The {@link Writer} to write to.\n     */\n    public void drainTo(Writer out) throws IOException {\n        drainTo(out, DEFAULT_BUFFER_SIZE);\n    }\n\n    /**\n     * Drains the data from the underlying {@link Reader}, writing it to the\n     * specified {@link Writer}.\n     * @param out           The {@link Writer} to write to.\n     * @param bufferSize    The size of the buffer to use when reader.\n     */\n    public void drainTo(Writer out, int bufferSize) throws IOException {\n        char[] buffer = new char[bufferSize];\n        int read;\n        while ((read = in.read(buffer)) &gt; -1) {\n            out.write(buffer, 0, read);\n        }\n    }\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1392918378, 
      "creation_date": 1392917078, 
      "comment_count": 0, 
      "score": 1, 
      "body_markdown": "I have written a class that does just that, so I figured I&#39;d share it with everyone. Sometimes you don&#39;t want to add Apache Commons just for one thing, and want something dumber than Scanner that doesn&#39;t examine the content.\r\n\r\nUsage is as follows\r\n\r\n    // Read from InputStream\r\n    String data = new ReaderSink(inputStream, Charset.forName(&quot;UTF-8&quot;)).drain();\r\n\r\n    // Read from File\r\n    data = new ReaderSink(file, Charset.forName(&quot;UTF-8&quot;)).drain();\r\n\r\n    // Drain input stream to console\r\n    new ReaderSink(inputStream, Charset.forName(&quot;UTF-8&quot;)).drainTo(System.out);\r\n\r\nHere is the code for ReaderSink:\r\n\r\n    import java.io.*;\r\n    import java.nio.charset.Charset;\r\n\r\n    /**\r\n     * A simple sink class that drains a {@link Reader} to a {@link String} or\r\n     * to a {@link Writer}.\r\n     *\r\n     * @author Ben Barkay\r\n     * @version 2/20/2014\r\n     */\r\n    public class ReaderSink {\r\n        /**\r\n         * The default buffer size to use if no buffer size was specified.\r\n         */\r\n        public static final int DEFAULT_BUFFER_SIZE = 1024;\r\n    \r\n        /**\r\n         * The {@link Reader} that will be drained.\r\n         */\r\n        private final Reader in;\r\n    \r\n        /**\r\n         * Constructs a new {@code ReaderSink} for the specified file and charset.\r\n         * @param file      The file to read from.\r\n         * @param charset   The charset to use.\r\n         * @throws FileNotFoundException    If the file was not found on the filesystem.\r\n         */\r\n        public ReaderSink(File file, Charset charset) throws FileNotFoundException {\r\n            this(new FileInputStream(file), charset);\r\n        }\r\n    \r\n        /**\r\n         * Constructs a new {@code ReaderSink} for the specified {@link InputStream}.\r\n         * @param in        The {@link InputStream} to drain.\r\n         * @param charset   The charset to use.\r\n         */\r\n        public ReaderSink(InputStream in, Charset charset) {\r\n            this(new InputStreamReader(in, charset));\r\n        }\r\n    \r\n        /**\r\n         * Constructs a new {@code ReaderSink} for the specified {@link Reader}.\r\n         * @param in    The reader to drain.\r\n         */\r\n        public ReaderSink(Reader in) {\r\n            this.in = in;\r\n        }\r\n    \r\n        /**\r\n         * Drains the data from the underlying {@link Reader}, returning a {@link String} containing\r\n         * all of the read information. This method will use {@link #DEFAULT_BUFFER_SIZE} for\r\n         * its buffer size.\r\n         * @return  A {@link String} containing all of the information that was read.\r\n         */\r\n        public String drain() throws IOException {\r\n            return drain(DEFAULT_BUFFER_SIZE);\r\n        }\r\n    \r\n        /**\r\n         * Drains the data from the underlying {@link Reader}, returning a {@link String} containing\r\n         * all of the read information.\r\n         * @param bufferSize    The size of the buffer to use when reading.\r\n         * @return  A {@link String} containing all of the information that was read.\r\n         */\r\n        public String drain(int bufferSize) throws IOException {\r\n            StringWriter stringWriter = new StringWriter();\r\n            drainTo(stringWriter, bufferSize);\r\n            return stringWriter.toString();\r\n        }\r\n    \r\n        /**\r\n         * Drains the data from the underlying {@link Reader}, writing it to the\r\n         * specified {@link Writer}. This method will use {@link #DEFAULT_BUFFER_SIZE} for\r\n         * its buffer size.\r\n         * @param out   The {@link Writer} to write to.\r\n         */\r\n        public void drainTo(Writer out) throws IOException {\r\n            drainTo(out, DEFAULT_BUFFER_SIZE);\r\n        }\r\n    \r\n        /**\r\n         * Drains the data from the underlying {@link Reader}, writing it to the\r\n         * specified {@link Writer}.\r\n         * @param out           The {@link Writer} to write to.\r\n         * @param bufferSize    The size of the buffer to use when reader.\r\n         */\r\n        public void drainTo(Writer out, int bufferSize) throws IOException {\r\n            char[] buffer = new char[bufferSize];\r\n            int read;\r\n            while ((read = in.read(buffer)) &gt; -1) {\r\n                out.write(buffer, 0, read);\r\n            }\r\n        }\r\n    }", 
      "owner": {
        "user_id": 1055284, 
        "profile_image": "http://i.stack.imgur.com/TcxWv.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 2244, 
        "link": "http://stackoverflow.com/users/1055284/ben-barkay", 
        "accept_rate": 100, 
        "display_name": "Ben Barkay"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1392918378, 
      "answer_id": 21915153
    }, 
    {
      "body": "<p>This snippet was found in \\sdk\\samples\\android-19\\connectivity\\NetworkConnect\\NetworkConnectSample\\src\\main\\java\\com\\example\\android\\networkconnect\\MainActivity.java which is licensed under Apache License, Version 2.0 and written by Google.</p>\n\n<pre><code>/** Reads an InputStream and converts it to a String.\n * @param stream InputStream containing HTML from targeted site.\n * @param len Length of string that this method returns.\n * @return String concatenated according to len parameter.\n * @throws java.io.IOException\n * @throws java.io.UnsupportedEncodingException\n */\nprivate String readIt(InputStream stream, int len) throws IOException, UnsupportedEncodingException {\n    Reader reader = null;\n    reader = new InputStreamReader(stream, \"UTF-8\");\n    char[] buffer = new char[len];\n    reader.read(buffer);\n    return new String(buffer);\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1392910139, 
      "creation_date": 1392910139, 
      "comment_count": 0, 
      "score": 0, 
      "body_markdown": "This snippet was found in \\sdk\\samples\\android-19\\connectivity\\NetworkConnect\\NetworkConnectSample\\src\\main\\java\\com\\example\\android\\networkconnect\\MainActivity.java which is licensed under Apache License, Version 2.0 and written by Google.\r\n\r\n    /** Reads an InputStream and converts it to a String.\r\n     * @param stream InputStream containing HTML from targeted site.\r\n     * @param len Length of string that this method returns.\r\n     * @return String concatenated according to len parameter.\r\n     * @throws java.io.IOException\r\n     * @throws java.io.UnsupportedEncodingException\r\n     */\r\n    private String readIt(InputStream stream, int len) throws IOException, UnsupportedEncodingException {\r\n        Reader reader = null;\r\n        reader = new InputStreamReader(stream, &quot;UTF-8&quot;);\r\n        char[] buffer = new char[len];\r\n        reader.read(buffer);\r\n        return new String(buffer);\r\n    }", 
      "owner": {
        "user_id": 2470524, 
        "profile_image": "https://www.gravatar.com/avatar/30572a95a69e05b8c921c1ac6672cb63?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 452, 
        "link": "http://stackoverflow.com/users/2470524/fred", 
        "accept_rate": 0, 
        "display_name": "Fred"
      }, 
      "is_accepted": false, 
      "answer_id": 21912248
    }, 
    {
      "body": "<p>I ran some timing tests because time matters, always.<br/></p>\n\n<p>I attempted to get the response into a String 3 different ways. (shown below)<br/>\nI left out try/catch blocks for the sake readability.<br/></p>\n\n<p>To give context, this is the preceding code for all 3 approaches:<br/></p>\n\n<pre><code>   String response;\n   String url = \"www.blah.com/path?key=value\";\n   GetMethod method = new GetMethod(url);\n   int status = client.executeMethod(method);\n</code></pre>\n\n<p>1)<br/></p>\n\n<pre><code> response = method.getResponseBodyAsString();\n</code></pre>\n\n<p>2)<br/></p>\n\n<pre><code>InputStream resp = method.getResponseBodyAsStream();\nInputStreamReader is=new InputStreamReader(resp);\nBufferedReader br=new BufferedReader(is);\nString read = null;\nStringBuffer sb = new StringBuffer(read);\nwhile((read = br.readLine()) != null) {\n    sb.append(read);\n}\nresponse = sb.toString();\n</code></pre>\n\n<p>3)<br/></p>\n\n<pre><code>InputStream iStream  = method.getResponseBodyAsStream();\nStringWriter writer = new StringWriter();\nIOUtils.copy(iStream, writer, \"UTF-8\");\nresponse = writer.toString();\n</code></pre>\n\n<p>So, after running 500 tests on each approach with the same request/response data, here are the numbers. Once again, these are my findings and your findings may not be exactly the same, but I wrote this to give some indication to others of the efficiency differences of these approaches.</p>\n\n<p>Ranks:<br/>\nApproach #1<br/>\nApproach #3 - 2.6% slower than #1<br/>\nApproach #2 - 4.3% slower than #1<br/></p>\n\n<p>Any of these approaches is an appropriate solution for grabbing a response and creating a String from it.</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1392019614, 
      "comments": [
        {
          "body": "2) contains an error, it adds always &quot;null&quot; at the end of the string as you are always makeing one more step then necessary. Performance will be the same anyway I think. This should work: String read = null;  StringBuffer sb = new StringBuffer(); while((read = br.readLine()) != null) {    sb.append(read); }", 
          "edited": false, 
          "comment_id": 9573048, 
          "creation_date": 1319203959, 
          "post_id": 7743991, 
          "score": 1, 
          "body_markdown": "2) contains an error, it adds always &quot;null&quot; at the end of the string as you are always makeing one more step then necessary. Performance will be the same anyway I think. This should work:\nString read = null; \nStringBuffer sb = new StringBuffer();\nwhile((read = br.readLine()) != null) {\n   sb.append(read);\n}", 
          "owner": {
            "user_id": 621438, 
            "profile_image": "https://www.gravatar.com/avatar/015ebaf1b74cf58b97365f95be2add66?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1055, 
            "link": "http://stackoverflow.com/users/621438/lukesolar", 
            "accept_rate": 75, 
            "display_name": "LukeSolar"
          }
        }
      ], 
      "creation_date": 1318440181, 
      "comment_count": 1, 
      "score": 12, 
      "body_markdown": "I ran some timing tests because time matters, always.&lt;br/&gt;\r\n\r\nI attempted to get the response into a String 3 different ways. (shown below)&lt;br/&gt;\r\nI left out try/catch blocks for the sake readability.&lt;br/&gt;\r\n\r\nTo give context, this is the preceding code for all 3 approaches:&lt;br/&gt;\r\n\r\n       String response;\r\n       String url = &quot;www.blah.com/path?key=value&quot;;\r\n       GetMethod method = new GetMethod(url);\r\n       int status = client.executeMethod(method);\r\n\r\n1)&lt;br/&gt;\r\n   \r\n\r\n     response = method.getResponseBodyAsString();\r\n\r\n2)&lt;br/&gt;\r\n\r\n    InputStream resp = method.getResponseBodyAsStream();\r\n    InputStreamReader is=new InputStreamReader(resp);\r\n    BufferedReader br=new BufferedReader(is);\r\n    String read = null;\r\n    StringBuffer sb = new StringBuffer(read);\r\n    while((read = br.readLine()) != null) {\r\n        sb.append(read);\r\n    }\r\n    response = sb.toString();\r\n\r\n3)&lt;br/&gt;\r\n\r\n    InputStream iStream  = method.getResponseBodyAsStream();\r\n    StringWriter writer = new StringWriter();\r\n    IOUtils.copy(iStream, writer, &quot;UTF-8&quot;);\r\n    response = writer.toString();\r\n\r\nSo, after running 500 tests on each approach with the same request/response data, here are the numbers. Once again, these are my findings and your findings may not be exactly the same, but I wrote this to give some indication to others of the efficiency differences of these approaches.\r\n\r\nRanks:&lt;br/&gt;\r\nApproach #1&lt;br/&gt;\r\nApproach #3 - 2.6% slower than #1&lt;br/&gt;\r\nApproach #2 - 4.3% slower than #1&lt;br/&gt;\r\n\r\nAny of these approaches is an appropriate solution for grabbing a response and creating a String from it.", 
      "owner": {
        "user_id": 370547, 
        "profile_image": "https://www.gravatar.com/avatar/336820671a80a3971cf3dbcbc7e54af9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 774, 
        "link": "http://stackoverflow.com/users/370547/brett-holt", 
        "display_name": "Brett Holt"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1392019614, 
      "answer_id": 7743991
    }, 
    {
      "body": "<p>You can use apache commons.\nIn the IOUtils you can find the toString metod with 3 helpfull implementations.</p>\n\n<pre><code>public static String toString(InputStream input) throws IOException {\n        return toString(input, Charset.defaultCharset());\n}\n\npublic static String toString(InputStream input) throws IOException {\n        return toString(input, Charset.defaultCharset());\n}\n\npublic static String toString(InputStream input, String encoding)\n            throws IOException {\n        return toString(input, Charsets.toCharset(encoding));\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1389881025, 
      "creation_date": 1389881025, 
      "comment_count": 0, 
      "score": 1, 
      "body_markdown": "You can use apache commons.\r\nIn the IOUtils you can find the toString metod with 3 helpfull implementations.\r\n\r\n    public static String toString(InputStream input) throws IOException {\r\n            return toString(input, Charset.defaultCharset());\r\n    }\r\n    \r\n    public static String toString(InputStream input) throws IOException {\r\n            return toString(input, Charset.defaultCharset());\r\n    }\r\n    \r\n    public static String toString(InputStream input, String encoding)\r\n                throws IOException {\r\n            return toString(input, Charsets.toCharset(encoding));\r\n    }", 
      "owner": {
        "user_id": 2217011, 
        "profile_image": "http://i.stack.imgur.com/tqsPN.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 82, 
        "link": "http://stackoverflow.com/users/2217011/rys", 
        "accept_rate": 95, 
        "display_name": "Rys"
      }, 
      "is_accepted": false, 
      "answer_id": 21163930
    }, 
    {
      "body": "<p>Apache Commons allows: </p>\n\n<pre><code>String myString = IOUtils.toString(myInputStream, \"UTF-8\");\n</code></pre>\n\n<p>Of course, you could choose other character encodings besides UTF-8. </p>\n\n<p>Also see: (<a href=\"http://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/IOUtils.html#toString%28java.io.InputStream,%20java.lang.String\">Docs</a>)</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1387475489, 
      "comments": [
        {
          "body": "IOUtils.toString is deprecated", 
          "edited": false, 
          "comment_id": 1938925, 
          "creation_date": 1262823308, 
          "post_id": 350723, 
          "score": 8, 
          "body_markdown": "IOUtils.toString is deprecated", 
          "owner": {
            "user_id": 1785, 
            "profile_image": "https://www.gravatar.com/avatar/b87bbdb1b142a6da99983ccae9fc33bc?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 12280, 
            "link": "http://stackoverflow.com/users/1785/landon9720", 
            "accept_rate": 53, 
            "display_name": "landon9720"
          }
        }, 
        {
          "body": "No it isn&#39;t. Only the version that takes a <code>byte[]</code> parameter is.", 
          "edited": false, 
          "comment_id": 4531506, 
          "creation_date": 1289898296, 
          "post_id": 350723, 
          "score": 72, 
          "body_markdown": "No it isn&#39;t. Only the version that takes a `byte[]` parameter is.", 
          "owner": {
            "user_id": 342852, 
            "profile_image": "http://i.stack.imgur.com/cifUt.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 115788, 
            "link": "http://stackoverflow.com/users/342852/sean-patrick-floyd", 
            "accept_rate": 92, 
            "display_name": "Sean Patrick Floyd"
          }
        }, 
        {
          "body": "Also, there is a method that only take a inputStream argument, if you are find with the default encoding.", 
          "edited": false, 
          "comment_id": 5438272, 
          "creation_date": 1296749257, 
          "post_id": 350723, 
          "score": 0, 
          "body_markdown": "Also, there is a method that only take a inputStream argument, if you are find with the default encoding.", 
          "owner": {
            "user_id": 438144, 
            "profile_image": "https://www.gravatar.com/avatar/8a0c4c41ab1957adb307d162ab34963a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 646, 
            "link": "http://stackoverflow.com/users/438144/guillaume-cot%c3%a9", 
            "accept_rate": 75, 
            "display_name": "Guillaume Cot&#233;"
          }
        }, 
        {
          "body": "@Guillaume Cot&#233; I guess the message here is that you never should be &quot;fine with the default encoding&quot;, since you cannot be sure of what it is, depending on the platform the java code is run on.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 438144, 
            "profile_image": "https://www.gravatar.com/avatar/8a0c4c41ab1957adb307d162ab34963a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 646, 
            "link": "http://stackoverflow.com/users/438144/guillaume-cot%c3%a9", 
            "accept_rate": 75, 
            "display_name": "Guillaume Cot&#233;"
          }, 
          "comment_id": 5443254, 
          "creation_date": 1296770066, 
          "post_id": 350723, 
          "score": 6, 
          "body_markdown": "@Guillaume Cot&#233; I guess the message here is that you never should be &quot;fine with the default encoding&quot;, since you cannot be sure of what it is, depending on the platform the java code is run on.", 
          "owner": {
            "user_id": 52993, 
            "profile_image": "https://www.gravatar.com/avatar/0c088574a5e14c9e4b3fc91870a0477d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 578, 
            "link": "http://stackoverflow.com/users/52993/per-wiklander", 
            "display_name": "Per Wiklander"
          }
        }, 
        {
          "body": "@Per Wiklander I disagree with you.  Code that is going to work on a single could be quite sure that default encoding will be fine.  For code that only open local file, it is a reasonable option to ask them to be encoded in the platform default encoding.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 52993, 
            "profile_image": "https://www.gravatar.com/avatar/0c088574a5e14c9e4b3fc91870a0477d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 578, 
            "link": "http://stackoverflow.com/users/52993/per-wiklander", 
            "display_name": "Per Wiklander"
          }, 
          "comment_id": 5453629, 
          "creation_date": 1296834961, 
          "post_id": 350723, 
          "score": 3, 
          "body_markdown": "@Per Wiklander I disagree with you.  Code that is going to work on a single could be quite sure that default encoding will be fine.  For code that only open local file, it is a reasonable option to ask them to be encoded in the platform default encoding.", 
          "owner": {
            "user_id": 438144, 
            "profile_image": "https://www.gravatar.com/avatar/8a0c4c41ab1957adb307d162ab34963a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 646, 
            "link": "http://stackoverflow.com/users/438144/guillaume-cot%c3%a9", 
            "accept_rate": 75, 
            "display_name": "Guillaume Cot&#233;"
          }
        }, 
        {
          "body": "This function is corrupting my input stream.", 
          "edited": false, 
          "comment_id": 11330867, 
          "creation_date": 1327671708, 
          "post_id": 350723, 
          "score": 0, 
          "body_markdown": "This function is corrupting my input stream.", 
          "owner": {
            "user_id": 597983, 
            "profile_image": "https://www.gravatar.com/avatar/59de353377c14b05a528e15616844cdf?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 860, 
            "link": "http://stackoverflow.com/users/597983/mady", 
            "accept_rate": 77, 
            "display_name": "Mady"
          }
        }, 
        {
          "body": "To save anyone the hassle of Googling - \t\t&lt;dependency&gt; \t\t\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt; \t\t\t&lt;artifactId&gt;commons-io&lt;/artifactId&gt; \t\t\t&lt;version&gt;1.3.2&lt;/version&gt; \t\t&lt;/dependency&gt;", 
          "edited": false, 
          "comment_id": 12227893, 
          "creation_date": 1331294643, 
          "post_id": 350723, 
          "score": 10, 
          "body_markdown": "To save anyone the hassle of Googling -\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n\t\t\t&lt;version&gt;1.3.2&lt;/version&gt;\n\t\t&lt;/dependency&gt;", 
          "owner": {
            "user_id": 333930, 
            "profile_image": "https://www.gravatar.com/avatar/b6fe36176ec7c9475374a5cd3b7bef1a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 282, 
            "link": "http://stackoverflow.com/users/333930/chris", 
            "display_name": "Chris"
          }
        }, 
        {
          "body": "I don&#39;t know that I&#39;d say the default encoding is NEVER fine. On the other hand, I disagree with Guillaume also. In fact, it&#39;s not a matter of fine or not; it&#39;s a matter of which is CORRECT. In the situation where you want to take something that you know is encoded in the default encoding for the platform, then the default version is correct. However, I believe this is a very rare use case. The more normal case is that you need to specify what the encoding is, so specifying the encoding is correct. There is no optional case: either one or (more likely) the other is correct.", 
          "edited": false, 
          "comment_id": 22072190, 
          "creation_date": 1363959008, 
          "post_id": 350723, 
          "score": 0, 
          "body_markdown": "I don&#39;t know that I&#39;d say the default encoding is NEVER fine. On the other hand, I disagree with Guillaume also. In fact, it&#39;s not a matter of fine or not; it&#39;s a matter of which is CORRECT. In the situation where you want to take something that you know is encoded in the default encoding for the platform, then the default version is correct. However, I believe this is a very rare use case. The more normal case is that you need to specify what the encoding is, so specifying the encoding is correct. There is no optional case: either one or (more likely) the other is correct.", 
          "owner": {
            "user_id": 269361, 
            "profile_image": "https://www.gravatar.com/avatar/124cda7f0e8d259e69d49ed43868639e?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 451, 
            "link": "http://stackoverflow.com/users/269361/fool4jesus", 
            "accept_rate": 89, 
            "display_name": "fool4jesus"
          }
        }, 
        {
          "body": "Also little improvement would be to use apache io (or other) constant for character encoding instead of using plain string literal - eg: IOUtils.toString(myInputStream, Charsets.UTF_8);", 
          "edited": false, 
          "comment_id": 31725375, 
          "creation_date": 1389616527, 
          "post_id": 350723, 
          "score": 0, 
          "body_markdown": "Also little improvement would be to use apache io (or other) constant for character encoding instead of using plain string literal - eg: IOUtils.toString(myInputStream, Charsets.UTF_8);", 
          "owner": {
            "user_id": 1018711, 
            "profile_image": "https://www.gravatar.com/avatar/6302b1661b8292f98b14e7771e314ce7?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 516, 
            "link": "http://stackoverflow.com/users/1018711/vojtech-ruzicka", 
            "accept_rate": 93, 
            "display_name": "Vojtech Ruzicka"
          }
        }
      ], 
      "creation_date": 1228767222, 
      "comment_count": 9, 
      "score": 551, 
      "body_markdown": "Apache Commons allows: \r\n\r\n    String myString = IOUtils.toString(myInputStream, &quot;UTF-8&quot;);\r\n\r\nOf course, you could choose other character encodings besides UTF-8. \r\n\r\nAlso see: ([Docs][1])\r\n\r\n\r\n\r\n  [1]: http://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/IOUtils.html#toString%28java.io.InputStream,%20java.lang.String\r\n  ", 
      "owner": {
        "user_id": 31892, 
        "profile_image": "https://www.gravatar.com/avatar/22aa27d8821b495e095f79dd331ef3d4?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6083, 
        "link": "http://stackoverflow.com/users/31892/chinnery", 
        "accept_rate": 78, 
        "display_name": "Chinnery"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387475489, 
      "answer_id": 350723
    }, 
    {
      "body": "<p>Here's the most elegant, pure-Java (no library) solution I came up with after some experimentation:</p>\n\n<pre><code>public static String fromStream(InputStream in) throws IOException\n{\n    BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n    StringBuilder out = new StringBuilder();\n    String newLine = System.getProperty(\"line.separator\");\n    String line;\n    while ((line = reader.readLine()) != null) {\n        out.append(line);\n        out.append(newLine);\n    }\n    return out.toString();\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1386434370, 
      "comments": [
        {
          "body": "Isn&#39;t there a reader.close() missing? Ideally with try/finally...", 
          "edited": false, 
          "comment_id": 24358453, 
          "creation_date": 1370181051, 
          "post_id": 14107694, 
          "score": 1, 
          "body_markdown": "Isn&#39;t there a reader.close() missing? Ideally with try/finally...", 
          "owner": {
            "user_id": 1836528, 
            "profile_image": "https://www.gravatar.com/avatar/32337a87c4578945f5ab7f116930c27e?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1258, 
            "link": "http://stackoverflow.com/users/1836528/torben-kohlmeier", 
            "display_name": "Torben Kohlmeier"
          }
        }, 
        {
          "body": "@TorbenKohlmeier, readers and buffers don&#39;t need to be closed. The provided <code>InputStream</code> should be closed by the caller.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 1836528, 
            "profile_image": "https://www.gravatar.com/avatar/32337a87c4578945f5ab7f116930c27e?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1258, 
            "link": "http://stackoverflow.com/users/1836528/torben-kohlmeier", 
            "display_name": "Torben Kohlmeier"
          }, 
          "comment_id": 24380426, 
          "creation_date": 1370259454, 
          "post_id": 14107694, 
          "score": 3, 
          "body_markdown": "@TorbenKohlmeier, readers and buffers don&#39;t need to be closed. The provided `InputStream` should be closed by the caller.", 
          "owner": {
            "user_id": 24874, 
            "profile_image": "https://www.gravatar.com/avatar/b85169daf0d165b94ea4fa70f409686c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 76647, 
            "link": "http://stackoverflow.com/users/24874/drew-noakes", 
            "accept_rate": 80, 
            "display_name": "Drew Noakes"
          }
        }, 
        {
          "body": "Don&#39;t forget to mention that there&#39;s a more preferable constructor in InputStreamReader that takes a CharSet.", 
          "edited": false, 
          "comment_id": 25162283, 
          "creation_date": 1372336617, 
          "post_id": 14107694, 
          "score": 3, 
          "body_markdown": "Don&#39;t forget to mention that there&#39;s a more preferable constructor in InputStreamReader that takes a CharSet.", 
          "owner": {
            "user_id": 541755, 
            "profile_image": "https://www.gravatar.com/avatar/8ba5f8d1fd128c235860a1847f8356c3?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 830, 
            "link": "http://stackoverflow.com/users/541755/jontejj", 
            "accept_rate": 67, 
            "display_name": "jontejj"
          }
        }, 
        {
          "body": "why do people keep using <code>readLine</code>? if you don&#39;t use the lines per se, what good is it (except being very slow?)", 
          "edited": false, 
          "comment_id": 35415434, 
          "creation_date": 1397844474, 
          "post_id": 14107694, 
          "score": 2, 
          "body_markdown": "why do people keep using `readLine`? if you don&#39;t use the lines per se, what good is it (except being very slow?)", 
          "owner": {
            "user_id": 671543, 
            "profile_image": "https://www.gravatar.com/avatar/2145962377da9419f2446cd565f614ee?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 18270, 
            "link": "http://stackoverflow.com/users/671543/njzk2", 
            "accept_rate": 50, 
            "display_name": "njzk2"
          }
        }, 
        {
          "body": "Do not read by lines. What if one line is so long so it does not fit into heap?", 
          "edited": false, 
          "comment_id": 39204486, 
          "creation_date": 1407403740, 
          "post_id": 14107694, 
          "score": 0, 
          "body_markdown": "Do not read by lines. What if one line is so long so it does not fit into heap?", 
          "owner": {
            "user_id": 2019710, 
            "profile_image": "https://www.gravatar.com/avatar/4e11575d5b2617abf49952ed766ee2fc?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 189, 
            "link": "http://stackoverflow.com/users/2019710/voho", 
            "display_name": "voho"
          }
        }, 
        {
          "body": "@voho, if one line is that long, then there&#39;s no way to allocate the return value anyway which must be equal or greater in size to that line. If you&#39;re dealing with files that large, you should stream them. There are plenty of use cases for loading small text files into memory though.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 2019710, 
            "profile_image": "https://www.gravatar.com/avatar/4e11575d5b2617abf49952ed766ee2fc?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 189, 
            "link": "http://stackoverflow.com/users/2019710/voho", 
            "display_name": "voho"
          }, 
          "comment_id": 39210493, 
          "creation_date": 1407413787, 
          "post_id": 14107694, 
          "score": 0, 
          "body_markdown": "@voho, if one line is that long, then there&#39;s no way to allocate the return value anyway which must be equal or greater in size to that line. If you&#39;re dealing with files that large, you should stream them. There are plenty of use cases for loading small text files into memory though.", 
          "owner": {
            "user_id": 24874, 
            "profile_image": "https://www.gravatar.com/avatar/b85169daf0d165b94ea4fa70f409686c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 76647, 
            "link": "http://stackoverflow.com/users/24874/drew-noakes", 
            "accept_rate": 80, 
            "display_name": "Drew Noakes"
          }
        }, 
        {
          "body": "@DrewNoakes You are right, I just wanted to point out. At school we had one assignment where we communicated through TCP using a simple text protocol (lines with commands) and sometimes a random very long string was sent to the clients just to test if students are coping with unexpected long values correctly.", 
          "edited": false, 
          "comment_id": 39213675, 
          "creation_date": 1407418452, 
          "post_id": 14107694, 
          "score": 0, 
          "body_markdown": "@DrewNoakes You are right, I just wanted to point out. At school we had one assignment where we communicated through TCP using a simple text protocol (lines with commands) and sometimes a random very long string was sent to the clients just to test if students are coping with unexpected long values correctly.", 
          "owner": {
            "user_id": 2019710, 
            "profile_image": "https://www.gravatar.com/avatar/4e11575d5b2617abf49952ed766ee2fc?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 189, 
            "link": "http://stackoverflow.com/users/2019710/voho", 
            "display_name": "voho"
          }
        }
      ], 
      "creation_date": 1357011827, 
      "comment_count": 7, 
      "score": 31, 
      "body_markdown": "Here&#39;s the most elegant, pure-Java (no library) solution I came up with after some experimentation:\r\n\r\n    public static String fromStream(InputStream in) throws IOException\r\n    {\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n        StringBuilder out = new StringBuilder();\r\n        String newLine = System.getProperty(&quot;line.separator&quot;);\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.append(line);\r\n            out.append(newLine);\r\n        }\r\n        return out.toString();\r\n    }", 
      "owner": {
        "user_id": 24874, 
        "profile_image": "https://www.gravatar.com/avatar/b85169daf0d165b94ea4fa70f409686c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 76647, 
        "link": "http://stackoverflow.com/users/24874/drew-noakes", 
        "accept_rate": 80, 
        "display_name": "Drew Noakes"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1386434370, 
      "answer_id": 14107694
    }, 
    {
      "body": "<p>JDK 7/8 answer that closes the stream and still throws an IOException:</p>\n\n<pre><code>StringBuilder build = new StringBuilder();\nbyte[] buf = new byte[1024];\nint length;\ntry (InputStream is = getInputStream()) {\n  while ((length = is.read(buf)) != -1) {\n    build.append(new String(buf, 0, length));\n  }\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1386265987, 
      "creation_date": 1386265987, 
      "comment_count": 0, 
      "score": 1, 
      "body_markdown": "JDK 7/8 answer that closes the stream and still throws an IOException:\r\n\r\n    StringBuilder build = new StringBuilder();\r\n    byte[] buf = new byte[1024];\r\n    int length;\r\n    try (InputStream is = getInputStream()) {\r\n      while ((length = is.read(buf)) != -1) {\r\n        build.append(new String(buf, 0, length));\r\n      }\r\n    }\r\n", 
      "owner": {
        "user_id": 428594, 
        "profile_image": "https://www.gravatar.com/avatar/0a6486ff56dcfe546eb23d7bba908aa2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 411, 
        "link": "http://stackoverflow.com/users/428594/brian-pontarelli", 
        "display_name": "Brian Pontarelli"
      }, 
      "is_accepted": false, 
      "answer_id": 20407168
    }, 
    {
      "body": "<p>Well you can program it for yourself.. it's not complicated..</p>\n\n<pre><code>String Inputstream2String (InputStream is) throws IOException \n    {\n        final int PKG_SIZE = 1024;\n        byte[] data = new byte [PKG_SIZE];\n        StringBuilder buffer = new StringBuilder(PKG_SIZE * 10);\n        int size;\n\n        size = is.read(data, 0, data.length);\n        while (size &gt; 0)\n        {\n            String str = new String(data, 0, size);\n            buffer.append(str);\n            size = is.read(data, 0, data.length);\n        }\n        return buffer.toString();\n    }\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1383927644, 
      "comments": [
        {
          "body": "Since you&#39;re using <code>buffer</code> variable locally with no chance of being shared across multiple threads you should consider changing its type to <code>StringBuilder</code>, to avoid the overhead of (useless) synchronization.", 
          "edited": false, 
          "comment_id": 29532479, 
          "creation_date": 1383906449, 
          "post_id": 15315403, 
          "score": 1, 
          "body_markdown": "Since you&#39;re using `buffer` variable locally with no chance of being shared across multiple threads you should consider changing its type to `StringBuilder`, to avoid the overhead of (useless) synchronization.", 
          "owner": {
            "user_id": 246645, 
            "profile_image": "https://www.gravatar.com/avatar/6e2994678f697a6be0f8ae4634a3f6db?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 668, 
            "link": "http://stackoverflow.com/users/246645/alex", 
            "display_name": "Alex"
          }
        }, 
        {
          "body": "That&#39;s a good point alex!. I thing that we both agree that this method isn&#39;t thread-safe in many ways. Even the input stream operations aren&#39;t thread-safe.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 246645, 
            "profile_image": "https://www.gravatar.com/avatar/6e2994678f697a6be0f8ae4634a3f6db?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 668, 
            "link": "http://stackoverflow.com/users/246645/alex", 
            "display_name": "Alex"
          }, 
          "comment_id": 29544475, 
          "creation_date": 1383927584, 
          "post_id": 15315403, 
          "score": 0, 
          "body_markdown": "That&#39;s a good point alex!. I thing that we both agree that this method isn&#39;t thread-safe in many ways. Even the input stream operations aren&#39;t thread-safe.", 
          "owner": {
            "user_id": 903998, 
            "profile_image": "http://i.stack.imgur.com/pZCd4.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 753, 
            "link": "http://stackoverflow.com/users/903998/victor", 
            "accept_rate": 69, 
            "display_name": "Victor"
          }
        }, 
        {
          "body": "If the stream contains UTF-8 character that spans across several lines, this algorithm can cut the character in two breaking the string.", 
          "edited": false, 
          "comment_id": 39269492, 
          "creation_date": 1407538065, 
          "post_id": 15315403, 
          "score": 0, 
          "body_markdown": "If the stream contains UTF-8 character that spans across several lines, this algorithm can cut the character in two breaking the string.", 
          "owner": {
            "user_id": 281508, 
            "profile_image": "https://www.gravatar.com/avatar/cef20083dd0ec9e28eb6345b534c9119?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 173, 
            "link": "http://stackoverflow.com/users/281508/vlad-lifliand", 
            "display_name": "Vlad Lifliand"
          }
        }
      ], 
      "creation_date": 1362860029, 
      "comment_count": 3, 
      "score": 3, 
      "body_markdown": "Well you can program it for yourself.. it&#39;s not complicated..\r\n\r\n    String Inputstream2String (InputStream is) throws IOException \r\n        {\r\n            final int PKG_SIZE = 1024;\r\n            byte[] data = new byte [PKG_SIZE];\r\n            StringBuilder buffer = new StringBuilder(PKG_SIZE * 10);\r\n            int size;\r\n    \r\n            size = is.read(data, 0, data.length);\r\n            while (size &gt; 0)\r\n            {\r\n                String str = new String(data, 0, size);\r\n                buffer.append(str);\r\n                size = is.read(data, 0, data.length);\r\n            }\r\n            return buffer.toString();\r\n        }", 
      "owner": {
        "user_id": 903998, 
        "profile_image": "http://i.stack.imgur.com/pZCd4.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 753, 
        "link": "http://stackoverflow.com/users/903998/victor", 
        "accept_rate": 69, 
        "display_name": "Victor"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1383927644, 
      "answer_id": 15315403
    }, 
    {
      "body": "<p>Here's a way using only standard Java library (note that the stream is not closed, YMMV).</p>\n\n<pre><code>static String convertStreamToString(java.io.InputStream is) {\n    java.util.Scanner s = new java.util.Scanner(is).useDelimiter(\"\\\\A\");\n    return s.hasNext() ? s.next() : \"\";\n}\n</code></pre>\n\n<p>I learned this trick from <a href=\"http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html\">\"Stupid Scanner tricks\"</a> article. The reason it works is because <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/Scanner.html\">Scanner</a> iterates over tokens in the stream, and in this case we separate tokens using \"beginning of the input boundary\" (\\A) thus giving us only one token for the entire contents of the stream.</p>\n\n<p><strong>Note, if you need to be specific about the input stream's encoding, you can provide the second argument to <code>Scanner</code> constructor that indicates what charset to use (e.g. \"UTF-8\").</strong></p>\n\n<p>Hat tip goes also to <a href=\"http://stackoverflow.com/users/68127/jacob-gabrielson\">Jacob,</a> who once pointed me to the said article.</p>\n\n<p><strong>EDITED:</strong> Thanks to a suggestion from <a href=\"http://stackoverflow.com/users/101272/patrick\">Patrick</a>, made the function more robust when handling an empty input stream. <strong>One more edit:</strong> nixed try/catch, Patrick's way is more laconic.</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1375827105, 
      "comments": [
        {
          "body": "Thanks, for my version of this I added a finally block that closes the input stream, so the user doesn&#39;t have to since you&#39;ve finished reading the input. Simplifies the caller code considerably.", 
          "edited": false, 
          "comment_id": 13192815, 
          "creation_date": 1335028041, 
          "post_id": 5445161, 
          "score": 2, 
          "body_markdown": "Thanks, for my version of this I added a finally block that closes the input stream, so the user doesn&#39;t have to since you&#39;ve finished reading the input. Simplifies the caller code considerably.", 
          "owner": {
            "user_id": 486646, 
            "profile_image": "https://www.gravatar.com/avatar/39f01bc00d352ef8f288c4ae47c81c07?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 654, 
            "link": "http://stackoverflow.com/users/486646/dalewking", 
            "accept_rate": 57, 
            "display_name": "dalewking"
          }
        }, 
        {
          "body": "I think this should be <code>public *static* String convertStreamToString </code>", 
          "edited": false, 
          "comment_id": 14142749, 
          "creation_date": 1338585243, 
          "post_id": 5445161, 
          "score": 1, 
          "body_markdown": "I think this should be `public *static* String convertStreamToString `", 
          "owner": {
            "user_id": 198348, 
            "profile_image": "https://www.gravatar.com/avatar/48ed10afeccd11be0338778089be2d5b?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1556, 
            "link": "http://stackoverflow.com/users/198348/ehtesh-choudhury", 
            "display_name": "Ehtesh Choudhury"
          }
        }, 
        {
          "body": "@PavelRepin @Patrick in my case, an empty inputStream caused a NPE during Scanner construction.  I had to add <code>if (is == null) return &quot;&quot;;</code> right at the beginning of the method;  I believe this answer needs to be updated to better handle null inputStreams.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 101272, 
            "profile_image": "https://www.gravatar.com/avatar/adb017e441b45d342dcedcd2def24c58?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 423, 
            "link": "http://stackoverflow.com/users/101272/patrick", 
            "accept_rate": 100, 
            "display_name": "Patrick"
          }, 
          "comment_id": 15814810, 
          "creation_date": 1344519409, 
          "post_id": 5445161, 
          "score": 1, 
          "body_markdown": "@PavelRepin @Patrick in my case, an empty inputStream caused a NPE during Scanner construction.  I had to add `if (is == null) return &quot;&quot;;` right at the beginning of the method;  I believe this answer needs to be updated to better handle null inputStreams.", 
          "owner": {
            "user_id": 1245897, 
            "profile_image": "https://www.gravatar.com/avatar/db83cf641ff371bbd5016456dd164288?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1053, 
            "link": "http://stackoverflow.com/users/1245897/cfl-jeff", 
            "accept_rate": 85, 
            "display_name": "CFL_Jeff"
          }
        }, 
        {
          "body": "The problem with this approach I find is it does not handle CR/LF translations too well.  So you have to make sure your line endings are consistent.", 
          "edited": false, 
          "comment_id": 21303764, 
          "creation_date": 1362053613, 
          "post_id": 5445161, 
          "score": 0, 
          "body_markdown": "The problem with this approach I find is it does not handle CR/LF translations too well.  So you have to make sure your line endings are consistent.", 
          "owner": {
            "user_id": 242042, 
            "profile_image": "https://www.gravatar.com/avatar/a798a3d661375ece15776f83fbb80c2c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3180, 
            "link": "http://stackoverflow.com/users/242042/archimedes-trajano", 
            "accept_rate": 66, 
            "display_name": "Archimedes Trajano"
          }
        }, 
        {
          "body": "@ArchimedesTrajano does <code>IOUtils.copy(inputStream, writer, encoding)</code> deal with CR/LF translations better? I think CR/LF consistency is entirely unrelated issue. Not saying it isn&#39;t an issue.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 242042, 
            "profile_image": "https://www.gravatar.com/avatar/a798a3d661375ece15776f83fbb80c2c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3180, 
            "link": "http://stackoverflow.com/users/242042/archimedes-trajano", 
            "accept_rate": 66, 
            "display_name": "Archimedes Trajano"
          }, 
          "comment_id": 21337733, 
          "creation_date": 1362129522, 
          "post_id": 5445161, 
          "score": 0, 
          "body_markdown": "@ArchimedesTrajano does `IOUtils.copy(inputStream, writer, encoding)` deal with CR/LF translations better? I think CR/LF consistency is entirely unrelated issue. Not saying it isn&#39;t an issue.", 
          "owner": {
            "user_id": 43151, 
            "profile_image": "https://www.gravatar.com/avatar/a0886310289840857f4763f2559b740c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 14499, 
            "link": "http://stackoverflow.com/users/43151/pavel-repin", 
            "accept_rate": 100, 
            "display_name": "Pavel Repin"
          }
        }, 
        {
          "body": "For Java 7 you can close in a try-with:  <code>try(java.util.Scanner s = new java.util.Scanner(is)) { \t    \treturn s.useDelimiter(&quot;\\\\A&quot;).hasNext() ? s.next() : &quot;&quot;; \t    }</code>", 
          "edited": false, 
          "comment_id": 24702804, 
          "creation_date": 1371101076, 
          "post_id": 5445161, 
          "score": 30, 
          "body_markdown": "For Java 7 you can close in a try-with:  `try(java.util.Scanner s = new java.util.Scanner(is)) {\n\t    \treturn s.useDelimiter(&quot;\\\\A&quot;).hasNext() ? s.next() : &quot;&quot;;\n\t    }`", 
          "owner": {
            "user_id": 573057, 
            "profile_image": "https://www.gravatar.com/avatar/f857595894d2c4009a790ebf473a4334?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 4717, 
            "link": "http://stackoverflow.com/users/573057/earcam", 
            "accept_rate": 100, 
            "display_name": "earcam"
          }
        }, 
        {
          "body": "Unfortunately this solution seems to go and lose the exceptions thrown in my underlying stream implementation.", 
          "edited": false, 
          "comment_id": 25740360, 
          "creation_date": 1373961577, 
          "post_id": 5445161, 
          "score": 1, 
          "body_markdown": "Unfortunately this solution seems to go and lose the exceptions thrown in my underlying stream implementation.", 
          "owner": {
            "user_id": 1493269, 
            "profile_image": "https://www.gravatar.com/avatar/76b07d8fbe042b34e1eaa2fc0684a9d1?s=128&d=identicon&r=PG&f=1", 
            "user_type": "registered", 
            "reputation": 1574, 
            "link": "http://stackoverflow.com/users/1493269/taig", 
            "accept_rate": 94, 
            "display_name": "Taig"
          }
        }, 
        {
          "body": "excellent trick!  any ideas about performance of Scanner vs reading the stream in a more verbose way?", 
          "edited": false, 
          "comment_id": 27194401, 
          "creation_date": 1377719692, 
          "post_id": 5445161, 
          "score": 0, 
          "body_markdown": "excellent trick!  any ideas about performance of Scanner vs reading the stream in a more verbose way?", 
          "owner": {
            "user_id": 968244, 
            "profile_image": "https://www.gravatar.com/avatar/62f76d55998f0059bcd8b7f6860e908f?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 985, 
            "link": "http://stackoverflow.com/users/968244/igal", 
            "accept_rate": 67, 
            "display_name": "Igal"
          }
        }, 
        {
          "body": "@Igal I didn&#39;t measure it. If you do, gist it and I&#39;ll append your results to the answer.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 968244, 
            "profile_image": "https://www.gravatar.com/avatar/62f76d55998f0059bcd8b7f6860e908f?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 985, 
            "link": "http://stackoverflow.com/users/968244/igal", 
            "accept_rate": 67, 
            "display_name": "Igal"
          }, 
          "comment_id": 27199453, 
          "creation_date": 1377731599, 
          "post_id": 5445161, 
          "score": 0, 
          "body_markdown": "@Igal I didn&#39;t measure it. If you do, gist it and I&#39;ll append your results to the answer.", 
          "owner": {
            "user_id": 43151, 
            "profile_image": "https://www.gravatar.com/avatar/a0886310289840857f4763f2559b740c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 14499, 
            "link": "http://stackoverflow.com/users/43151/pavel-repin", 
            "accept_rate": 100, 
            "display_name": "Pavel Repin"
          }
        }, 
        {
          "body": "FYI, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#hasNext()\" rel=\"nofollow\">hasNext</a> blocks on console input streams (see <a href=\"http://stackoverflow.com/questions/16873134/hasnext-when-does-it-block-and-why\">here</a>). (Just ran into this issue right now.)  This solution works fine otherwise... just a heads up.", 
          "edited": false, 
          "comment_id": 33307299, 
          "creation_date": 1393220186, 
          "post_id": 5445161, 
          "score": 2, 
          "body_markdown": "FYI, [hasNext](http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#hasNext()) blocks on console input streams (see [here](http://stackoverflow.com/questions/16873134/hasnext-when-does-it-block-and-why)). (Just ran into this issue right now.)  This solution works fine otherwise... just a heads up.", 
          "owner": {
            "user_id": 850830, 
            "profile_image": "https://www.gravatar.com/avatar/054146e3993f84878c452aa1e9549217?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 383, 
            "link": "http://stackoverflow.com/users/850830/ryan", 
            "accept_rate": 78, 
            "display_name": "Ryan"
          }
        }
      ], 
      "creation_date": 1301172025, 
      "comment_count": 10, 
      "score": 1167, 
      "body_markdown": "Here&#39;s a way using only standard Java library (note that the stream is not closed, YMMV).\r\n\r\n    static String convertStreamToString(java.io.InputStream is) {\r\n        java.util.Scanner s = new java.util.Scanner(is).useDelimiter(&quot;\\\\A&quot;);\r\n        return s.hasNext() ? s.next() : &quot;&quot;;\r\n    }\r\n\r\nI learned this trick from [&quot;Stupid Scanner tricks&quot;][1] article. The reason it works is because [Scanner][2] iterates over tokens in the stream, and in this case we separate tokens using &quot;beginning of the input boundary&quot; (\\A) thus giving us only one token for the entire contents of the stream.\r\n\r\n**Note, if you need to be specific about the input stream&#39;s encoding, you can provide the second argument to `Scanner` constructor that indicates what charset to use (e.g. &quot;UTF-8&quot;).**\r\n\r\nHat tip goes also to [Jacob,][3] who once pointed me to the said article.\r\n\r\n**EDITED:** Thanks to a suggestion from [Patrick][4], made the function more robust when handling an empty input stream. **One more edit:** nixed try/catch, Patrick&#39;s way is more laconic.\r\n\r\n  [1]: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html\r\n  [2]: http://download.oracle.com/javase/6/docs/api/java/util/Scanner.html\r\n  [3]: http://stackoverflow.com/users/68127/jacob-gabrielson\r\n  [4]: http://stackoverflow.com/users/101272/patrick\r\n\r\n", 
      "owner": {
        "user_id": 43151, 
        "profile_image": "https://www.gravatar.com/avatar/a0886310289840857f4763f2559b740c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 14499, 
        "link": "http://stackoverflow.com/users/43151/pavel-repin", 
        "accept_rate": 100, 
        "display_name": "Pavel Repin"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1375827105, 
      "answer_id": 5445161
    }, 
    {
      "body": "<pre><code>InputStreamReader i=new InputStreamReader(s);\nBufferedReader str=new BufferedReader(i);\nString msg=str.readLine();\nSystem.out.println(msg);\n</code></pre>\n\n<p>here s is your InputStream object which will get convert into String :)</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1369925544, 
      "comments": [
        {
          "body": "will it work if last 2 lines are inserted in <code>do-while</code> loop?", 
          "edited": false, 
          "comment_id": 34967643, 
          "creation_date": 1396870466, 
          "post_id": 16839350, 
          "score": 0, 
          "body_markdown": "will it work if last 2 lines are inserted in `do-while` loop?", 
          "owner": {
            "user_id": 1851302, 
            "profile_image": "http://i.stack.imgur.com/IwbKa.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 413, 
            "link": "http://stackoverflow.com/users/1851302/knu", 
            "accept_rate": 60, 
            "display_name": "KNU"
          }
        }, 
        {
          "body": "will work only if the InputStream is one-liner", 
          "edited": false, 
          "comment_id": 35820615, 
          "creation_date": 1398846133, 
          "post_id": 16839350, 
          "score": 2, 
          "body_markdown": "will work only if the InputStream is one-liner", 
          "owner": {
            "user_id": 85072, 
            "profile_image": "https://www.gravatar.com/avatar/78c65ca843cf149e277aa2a6b265247a?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 669, 
            "link": "http://stackoverflow.com/users/85072/stavros", 
            "accept_rate": 96, 
            "display_name": "Stavros"
          }
        }
      ], 
      "creation_date": 1369925544, 
      "comment_count": 2, 
      "score": 3, 
      "body_markdown": "\r\n    InputStreamReader i=new InputStreamReader(s);\r\n    BufferedReader str=new BufferedReader(i);\r\n    String msg=str.readLine();\r\n    System.out.println(msg);\r\n\r\n\r\nhere s is your InputStream object which will get convert into String :)", 
      "owner": {
        "user_id": 2435085, 
        "profile_image": "https://www.gravatar.com/avatar/1c82e330993bd5e8529ac6f13eaed032?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 55, 
        "link": "http://stackoverflow.com/users/2435085/omkar-khot", 
        "display_name": "Omkar Khot"
      }, 
      "is_accepted": false, 
      "answer_id": 16839350
    }, 
    {
      "body": "<pre><code>  InputStream IS=new URL(\"http://www.petrol.si/api/gas_prices.json\").openStream();   \n\n  ByteArrayOutputStream BAOS=new ByteArrayOutputStream();\n  IOUtils.copy(IS, BAOS);\n  String d= new String(BAOS.toByteArray(),\"UTF-8\");           \n\nSystem.out.println(d);\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1368206715, 
      "comments": [
        {
          "body": "See the commet by ChristofferHammarstr&#246;m in the answer by HarryLime.", 
          "edited": false, 
          "comment_id": 23806798, 
          "creation_date": 1368631412, 
          "post_id": 16487716, 
          "score": 0, 
          "body_markdown": "See the commet by ChristofferHammarstr&#246;m in the answer by HarryLime.", 
          "owner": {
            "user_id": 821436, 
            "profile_image": "https://www.gravatar.com/avatar/d8110a8a8a97be0803549ea5ee2e638b?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1359, 
            "link": "http://stackoverflow.com/users/821436/martin-schr%c3%b6der", 
            "accept_rate": 83, 
            "display_name": "Martin Schr&#246;der"
          }
        }
      ], 
      "creation_date": 1368206715, 
      "comment_count": 1, 
      "score": -1, 
      "body_markdown": "      InputStream IS=new URL(&quot;http://www.petrol.si/api/gas_prices.json&quot;).openStream();   \r\n         \r\n      ByteArrayOutputStream BAOS=new ByteArrayOutputStream();\r\n      IOUtils.copy(IS, BAOS);\r\n      String d= new String(BAOS.toByteArray(),&quot;UTF-8&quot;);           \r\n        \r\n    System.out.println(d);", 
      "owner": {
        "user_id": 2370932, 
        "profile_image": "https://www.gravatar.com/avatar/a30d1cf5f308365d64e8bae3e69f1ec9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2370932/user2370932", 
        "display_name": "user2370932"
      }, 
      "is_accepted": false, 
      "answer_id": 16487716
    }, 
    {
      "body": "<p>If you are using Google-Collections/Guava you could do the following:</p>\n\n<pre><code>InputStream stream = ...\nString content = CharStreams.toString(new InputStreamReader(stream, Charsets.UTF_8));\nCloseables.closeQuietly(stream);\n</code></pre>\n\n<p>Note that the second parameter (i.e. Charsets.UTF_8) for the <code>InputStreamReader</code> isn't necessary, but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1359563754, 
      "comments": [
        {
          "body": "@harschware: Given the question was: &quot;If you have java.io.InputStream object how should you process that object and produce a String?&quot; I assumed that a stream is already present in the situation.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 154461, 
            "profile_image": "https://www.gravatar.com/avatar/6583c6b201d2e2456e2060c91a82250f?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3683, 
            "link": "http://stackoverflow.com/users/154461/harschware", 
            "accept_rate": 91, 
            "display_name": "harschware"
          }, 
          "comment_id": 6439091, 
          "creation_date": 1302687671, 
          "post_id": 3238954, 
          "score": 2, 
          "body_markdown": "@harschware: Given the question was: &quot;If you have java.io.InputStream object how should you process that object and produce a String?&quot; I assumed that a stream is already present in the situation.", 
          "owner": {
            "user_id": 151614, 
            "profile_image": "https://www.gravatar.com/avatar/8befd100204a47f55d422e6d46ee039d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1368, 
            "link": "http://stackoverflow.com/users/151614/sakuraba", 
            "display_name": "Sakuraba"
          }
        }, 
        {
          "body": "You didn&#39;t explain your answer very well, and had extraneous variables; user359996 said the same thing as you, but much more clearly.", 
          "edited": false, 
          "comment_id": 8761363, 
          "creation_date": 1314915038, 
          "post_id": 3238954, 
          "score": 0, 
          "body_markdown": "You didn&#39;t explain your answer very well, and had extraneous variables; user359996 said the same thing as you, but much more clearly.", 
          "owner": {
            "user_id": 790020, 
            "profile_image": "https://www.gravatar.com/avatar/90f83243ac7fb5de808d4d9826765246?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 71, 
            "link": "http://stackoverflow.com/users/790020/uronym", 
            "accept_rate": 100, 
            "display_name": "Uronym"
          }
        }, 
        {
          "body": "it returns to me boxes instead of actual text characters. plz advise", 
          "edited": false, 
          "comment_id": 9937434, 
          "creation_date": 1321104053, 
          "post_id": 3238954, 
          "score": 0, 
          "body_markdown": "it returns to me boxes instead of actual text characters. plz advise", 
          "owner": {
            "user_id": 135982, 
            "profile_image": "https://www.gravatar.com/avatar/8042c87bcc36d121c2491662220a984d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 559, 
            "link": "http://stackoverflow.com/users/135982/vik", 
            "accept_rate": 86, 
            "display_name": "Vik"
          }
        }, 
        {
          "body": "+1 for guava, -1 for not specifying the encoding of the input stream. eg. new InputStreamReader(stream, &quot;UTF-8&quot;)", 
          "edited": false, 
          "comment_id": 14965452, 
          "creation_date": 1341572464, 
          "post_id": 3238954, 
          "score": 1, 
          "body_markdown": "+1 for guava, -1 for not specifying the encoding of the input stream. eg. new InputStreamReader(stream, &quot;UTF-8&quot;)", 
          "owner": {
            "user_id": 212013, 
            "profile_image": "https://www.gravatar.com/avatar/89a5f8b8a6a7914896e0af21e05afb79?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1677, 
            "link": "http://stackoverflow.com/users/212013/andras", 
            "display_name": "andras"
          }
        }, 
        {
          "body": "Downvoting as doesn&#39;t close inputstream.", 
          "edited": false, 
          "comment_id": 19582046, 
          "creation_date": 1357224414, 
          "post_id": 3238954, 
          "score": 0, 
          "body_markdown": "Downvoting as doesn&#39;t close inputstream.", 
          "owner": {
            "user_id": 1089998, 
            "profile_image": "https://www.gravatar.com/avatar/250b8239dd3679b13f548ee5cb8aa4b1?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1274, 
            "link": "http://stackoverflow.com/users/1089998/plasma147", 
            "accept_rate": 100, 
            "display_name": "plasma147"
          }
        }, 
        {
          "body": "@plasma147 Instead of downvoting, consider editing the example (I just submitted that, adding <code>Closeables.closeQuietly(stream);</code>)", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 1089998, 
            "profile_image": "https://www.gravatar.com/avatar/250b8239dd3679b13f548ee5cb8aa4b1?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1274, 
            "link": "http://stackoverflow.com/users/1089998/plasma147", 
            "accept_rate": 100, 
            "display_name": "plasma147"
          }, 
          "comment_id": 20398321, 
          "creation_date": 1359563437, 
          "post_id": 3238954, 
          "score": 2, 
          "body_markdown": "@plasma147 Instead of downvoting, consider editing the example (I just submitted that, adding `Closeables.closeQuietly(stream);`)", 
          "owner": {
            "user_id": 218258, 
            "profile_image": "https://www.gravatar.com/avatar/0a263ad123bb5a6fc82989b979c35911?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 435, 
            "link": "http://stackoverflow.com/users/218258/ralfoide", 
            "accept_rate": 86, 
            "display_name": "ralfoide"
          }
        }, 
        {
          "body": "@Chris Noldus On the other hand, some people already have guava in their project, like me, and think this solution is more elegant than the sdk-only version.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 923279, 
            "profile_image": "https://www.gravatar.com/avatar/d2c890458200148cb5c03247e8f9d4c9?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 883, 
            "link": "http://stackoverflow.com/users/923279/chris-noldus", 
            "display_name": "Chris Noldus"
          }, 
          "comment_id": 28164562, 
          "creation_date": 1380302416, 
          "post_id": 3238954, 
          "score": 0, 
          "body_markdown": "@Chris Noldus On the other hand, some people already have guava in their project, like me, and think this solution is more elegant than the sdk-only version.", 
          "owner": {
            "user_id": 1313268, 
            "profile_image": "http://i.stack.imgur.com/65NwV.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 2472, 
            "link": "http://stackoverflow.com/users/1313268/coraythan", 
            "accept_rate": 91, 
            "display_name": "CorayThan"
          }
        }, 
        {
          "body": "@Vadzim that answer is the same as this one - both use CharStreams.toString", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 603516, 
            "profile_image": "https://www.gravatar.com/avatar/40895ef337d0a2eb7d538f5f8b3e6d58?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 4868, 
            "link": "http://stackoverflow.com/users/603516/vadzim", 
            "accept_rate": 100, 
            "display_name": "Vadzim"
          }, 
          "comment_id": 39830032, 
          "creation_date": 1409083378, 
          "post_id": 3238954, 
          "score": 0, 
          "body_markdown": "@Vadzim that answer is the same as this one - both use CharStreams.toString", 
          "owner": {
            "user_id": 150016, 
            "profile_image": "http://i.stack.imgur.com/kruqI.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 5154, 
            "link": "http://stackoverflow.com/users/150016/tom", 
            "accept_rate": 70, 
            "display_name": "Tom"
          }
        }, 
        {
          "body": "Note that closeQuietly has been removed from Guava.  See <a href=\"https://code.google.com/p/guava-libraries/issues/detail?id=1118\" rel=\"nofollow\">code.google.com/p/guava-libraries/issues/detail?id=1118</a>", 
          "edited": false, 
          "comment_id": 39830045, 
          "creation_date": 1409083406, 
          "post_id": 3238954, 
          "score": 1, 
          "body_markdown": "Note that closeQuietly has been removed from Guava.  See https://code.google.com/p/guava-libraries/issues/detail?id=1118", 
          "owner": {
            "user_id": 150016, 
            "profile_image": "http://i.stack.imgur.com/kruqI.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 5154, 
            "link": "http://stackoverflow.com/users/150016/tom", 
            "accept_rate": 70, 
            "display_name": "Tom"
          }
        }, 
        {
          "body": "If the inputStream is inside of the doPost of a servlet, you don&#39;t have to close the inputStream do you?", 
          "edited": false, 
          "comment_id": 41028824, 
          "creation_date": 1412284464, 
          "post_id": 3238954, 
          "score": 0, 
          "body_markdown": "If the inputStream is inside of the doPost of a servlet, you don&#39;t have to close the inputStream do you?", 
          "owner": {
            "user_id": 1368, 
            "profile_image": "http://i.stack.imgur.com/nxfH8.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 3933, 
            "link": "http://stackoverflow.com/users/1368/public-static", 
            "accept_rate": 41, 
            "display_name": "public static"
          }
        }
      ], 
      "creation_date": 1279036584, 
      "comment_count": 10, 
      "score": 83, 
      "body_markdown": "If you are using Google-Collections/Guava you could do the following:\r\n\r\n    InputStream stream = ...\r\n    String content = CharStreams.toString(new InputStreamReader(stream, Charsets.UTF_8));\r\n    Closeables.closeQuietly(stream);\r\n\r\nNote that the second parameter (i.e. Charsets.UTF_8) for the `InputStreamReader` isn&#39;t necessary, but it is generally a good idea to specify the encoding if you know it (which you should!)", 
      "owner": {
        "user_id": 151614, 
        "profile_image": "https://www.gravatar.com/avatar/8befd100204a47f55d422e6d46ee039d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1368, 
        "link": "http://stackoverflow.com/users/151614/sakuraba", 
        "display_name": "Sakuraba"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1359563754, 
      "answer_id": 3238954
    }, 
    {
      "community_owned_date": 1353168508, 
      "body": "<p>Taking into account file one should first get a <code>java.io.Reader</code> instance. This can then be read and added to a <code>StringBuilder</code> (we don't need <code>StringBuffer</code> if we are not accessing it in multiple threads, and <code>StringBuilder</code> is faster). The trick here is that we work in blocks, and as such don't need other buffering streams. The block size is parameterized for run-time performance optimization.</p>\n\n<pre><code>public static String slurp(final InputStream is, final int bufferSize)\n{\n  final char[] buffer = new char[bufferSize];\n  final StringBuilder out = new StringBuilder();\n  try {\n    final Reader in = new InputStreamReader(is, \"UTF-8\");\n    try {\n      for (;;) {\n        int rsz = in.read(buffer, 0, buffer.length);\n        if (rsz &lt; 0)\n          break;\n        out.append(buffer, 0, rsz);\n      }\n    }\n    finally {\n      in.close();\n    }\n  }\n  catch (UnsupportedEncodingException ex) {\n    /* ... */\n  }\n  catch (IOException ex) {\n      /* ... */\n  }\n  return out.toString();\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1353168508, 
      "comments": [
        {
          "body": "I like how this works without adding more libraries to your project.", 
          "edited": false, 
          "comment_id": 5153461, 
          "creation_date": 1294875396, 
          "post_id": 309718, 
          "score": 52, 
          "body_markdown": "I like how this works without adding more libraries to your project.", 
          "owner": {
            "user_id": 125380, 
            "profile_image": "https://www.gravatar.com/avatar/4c2e7e7267110bb949cbe4aac47190f2?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 8967, 
            "link": "http://stackoverflow.com/users/125380/user1", 
            "accept_rate": 72, 
            "display_name": "User1"
          }
        }, 
        {
          "body": "is there a chance to broke multi-bytes character in this solution?", 
          "edited": false, 
          "comment_id": 10212509, 
          "creation_date": 1322450405, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "is there a chance to broke multi-bytes character in this solution?", 
          "owner": {
            "user_id": 404192, 
            "profile_image": "https://www.gravatar.com/avatar/b9e03f821b5f318af3b570420308932f?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 909, 
            "link": "http://stackoverflow.com/users/404192/liuyan-%e5%88%98%e7%a0%94", 
            "accept_rate": 100, 
            "display_name": "LiuYan \u5218\u7814"
          }
        }, 
        {
          "body": "This solution uses multibyte characters. The example uses the UTF-8 encoding that allows expression of the full unicode range (Including Chinese). Replacing &quot;UTF-8&quot; with another encoding would allow that encoding to be used.", 
          "edited": false, 
          "comment_id": 10449727, 
          "creation_date": 1323472261, 
          "post_id": 309718, 
          "score": 5, 
          "body_markdown": "This solution uses multibyte characters. The example uses the UTF-8 encoding that allows expression of the full unicode range (Including Chinese). Replacing &quot;UTF-8&quot; with another encoding would allow that encoding to be used.", 
          "owner": {
            "user_id": 4100, 
            "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3793, 
            "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
            "display_name": "Paul de Vrieze"
          }
        }, 
        {
          "body": "@User1 - I like using libraries in my code so I can get my job done faster. It&#39;s awesome when your managers say &quot;Wow James! How did you get that done so fast?!&quot;.  But when we have to spend time reinventing the wheel just because we have misplaced ideas about including a common, reusable, tried and tested utility, we&#39;re giving up time we could be spending furthering our project&#39;s goals. When we reinvent the wheel, we work twice as hard yet get to the finish line much later. Once we&#39;re at the finish line, there is no one there to congratulate us. When building a house, don&#39;t build the hammer too", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 125380, 
            "profile_image": "https://www.gravatar.com/avatar/4c2e7e7267110bb949cbe4aac47190f2?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 8967, 
            "link": "http://stackoverflow.com/users/125380/user1", 
            "accept_rate": 72, 
            "display_name": "User1"
          }, 
          "comment_id": 11183057, 
          "creation_date": 1327021548, 
          "post_id": 309718, 
          "score": 11, 
          "body_markdown": "@User1 - I like using libraries in my code so I can get my job done faster. It&#39;s awesome when your managers say &quot;Wow James! How did you get that done so fast?!&quot;.  But when we have to spend time reinventing the wheel just because we have misplaced ideas about including a common, reusable, tried and tested utility, we&#39;re giving up time we could be spending furthering our project&#39;s goals. When we reinvent the wheel, we work twice as hard yet get to the finish line much later. Once we&#39;re at the finish line, there is no one there to congratulate us. When building a house, don&#39;t build the hammer too", 
          "owner": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }
        }, 
        {
          "body": "Sorry, after re-reading my comment, it comes off a little arrogant.   I just think it&#39;s important to have a good reason to avoid libraries and that the reason is a valid one, which there very well could be :)", 
          "edited": false, 
          "comment_id": 11183344, 
          "creation_date": 1327023357, 
          "post_id": 309718, 
          "score": 3, 
          "body_markdown": "Sorry, after re-reading my comment, it comes off a little arrogant.   I just think it&#39;s important to have a good reason to avoid libraries and that the reason is a valid one, which there very well could be :)", 
          "owner": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }
        }, 
        {
          "body": "isn&#39;t it better to close stream/streamreader ?", 
          "edited": false, 
          "comment_id": 12652708, 
          "creation_date": 1332965497, 
          "post_id": 309718, 
          "score": 1, 
          "body_markdown": "isn&#39;t it better to close stream/streamreader ?", 
          "owner": {
            "user_id": 73630, 
            "profile_image": "https://www.gravatar.com/avatar/756619af68f0e1a87d8d70036646f7cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3093, 
            "link": "http://stackoverflow.com/users/73630/palani", 
            "accept_rate": 70, 
            "display_name": "Palani"
          }
        }, 
        {
          "body": "Yes, I guess the reader should be closed at the end.", 
          "edited": false, 
          "comment_id": 13177767, 
          "creation_date": 1334947047, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "Yes, I guess the reader should be closed at the end.", 
          "owner": {
            "user_id": 4100, 
            "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3793, 
            "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
            "display_name": "Paul de Vrieze"
          }
        }, 
        {
          "body": "@jmort253 Many libraries are large, slow but powerful. However there are many chances that we need a small, fast one. In our product, I even replaced many JDK classes with our own implement.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }, 
          "comment_id": 13590404, 
          "creation_date": 1336545417, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "@jmort253 Many libraries are large, slow but powerful. However there are many chances that we need a small, fast one. In our product, I even replaced many JDK classes with our own implement.", 
          "owner": {
            "user_id": 853599, 
            "profile_image": "https://www.gravatar.com/avatar/a05d4f0059368a056ddf29ef647d591b?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1919, 
            "link": "http://stackoverflow.com/users/853599/coolcfan", 
            "accept_rate": 100, 
            "display_name": "coolcfan"
          }
        }, 
        {
          "body": "@coolcfan - I do agree with you on that point. Sometimes speed is of the utmost importance and is a hard requirement. Many times, good enough is good enough. I question how often we put effort into optimizing something that no one notices. The answer of whether the reward is greater than the cost is a decision not to be taken lightly. Thank you for indicating that there are times when this is necessary.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 853599, 
            "profile_image": "https://www.gravatar.com/avatar/a05d4f0059368a056ddf29ef647d591b?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1919, 
            "link": "http://stackoverflow.com/users/853599/coolcfan", 
            "accept_rate": 100, 
            "display_name": "coolcfan"
          }, 
          "comment_id": 13592533, 
          "creation_date": 1336551812, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "@coolcfan - I do agree with you on that point. Sometimes speed is of the utmost importance and is a hard requirement. Many times, good enough is good enough. I question how often we put effort into optimizing something that no one notices. The answer of whether the reward is greater than the cost is a decision not to be taken lightly. Thank you for indicating that there are times when this is necessary.", 
          "owner": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }
        }, 
        {
          "body": "@jmort253 We noticed performance regression after updating some library in our product for several times. Luckily we are building and selling our own product so we don&#39;t really have the so called deadlines. Unfortunately we are building a product that is available on many JVMs, databases and app servers on many operation systems so we have to think for the users using poor machines... And a string operation optimizing can improve the perf by 30~40%. And a fix: <code>In our product, I even replaced</code> should be &#39;we even replaced&#39;.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }, 
          "comment_id": 13592873, 
          "creation_date": 1336552791, 
          "post_id": 309718, 
          "score": 1, 
          "body_markdown": "@jmort253 We noticed performance regression after updating some library in our product for several times. Luckily we are building and selling our own product so we don&#39;t really have the so called deadlines. Unfortunately we are building a product that is available on many JVMs, databases and app servers on many operation systems so we have to think for the users using poor machines... And a string operation optimizing can improve the perf by 30~40%. And a fix: `In our product, I even replaced` should be &#39;we even replaced&#39;.", 
          "owner": {
            "user_id": 853599, 
            "profile_image": "https://www.gravatar.com/avatar/a05d4f0059368a056ddf29ef647d591b?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1919, 
            "link": "http://stackoverflow.com/users/853599/coolcfan", 
            "accept_rate": 100, 
            "display_name": "coolcfan"
          }
        }, 
        {
          "body": "@jmort253 If you would already use apache commons I would say, go for it. At the same time, there is a real cost to using libraries (as the dependency proliferation in many apache java libraries shows). If this would be the only use of the library, it would be overkill to use the library. On the other hand, determining your own buffer size(s) you can tune your memory/processor usage balance.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }, 
          "comment_id": 13889527, 
          "creation_date": 1337678197, 
          "post_id": 309718, 
          "score": 4, 
          "body_markdown": "@jmort253 If you would already use apache commons I would say, go for it. At the same time, there is a real cost to using libraries (as the dependency proliferation in many apache java libraries shows). If this would be the only use of the library, it would be overkill to use the library. On the other hand, determining your own buffer size(s) you can tune your memory/processor usage balance.", 
          "owner": {
            "user_id": 4100, 
            "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3793, 
            "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
            "display_name": "Paul de Vrieze"
          }
        }, 
        {
          "body": "I&#39;d like to know, what are reasonable values for the buffer under which circumstances?", 
          "edited": false, 
          "comment_id": 35615087, 
          "creation_date": 1398348550, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "I&#39;d like to know, what are reasonable values for the buffer under which circumstances?", 
          "owner": {
            "user_id": 2306536, 
            "profile_image": "http://i.stack.imgur.com/cnfrU.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 371, 
            "link": "http://stackoverflow.com/users/2306536/traubenfuchs", 
            "accept_rate": 56, 
            "display_name": "Traubenfuchs"
          }
        }, 
        {
          "body": "The best way to determine the buffer is to experiment. Reasonable sizes should be multiples of the block size, which for flash memory can be 128KB.", 
          "edited": false, 
          "comment_id": 35617129, 
          "creation_date": 1398351099, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "The best way to determine the buffer is to experiment. Reasonable sizes should be multiples of the block size, which for flash memory can be 128KB.", 
          "owner": {
            "user_id": 4100, 
            "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3793, 
            "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
            "display_name": "Paul de Vrieze"
          }
        }, 
        {
          "body": "@jmort253 Sometimes there is reasons to avoid libraries. It depends on company and project. Sometimes own implementations are reinventing wheel - then company should use well known solution. But there are cases when you shouldn&#39;t use someones solutions: optimization, <b>copyrights</b>, architecture, etc.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 552792, 
            "profile_image": "https://www.gravatar.com/avatar/af668818d6cfecc1a1b008cf599562cd?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 17949, 
            "link": "http://stackoverflow.com/users/552792/jmort253", 
            "accept_rate": 50, 
            "display_name": "jmort253"
          }, 
          "comment_id": 41562519, 
          "creation_date": 1413795395, 
          "post_id": 309718, 
          "score": 0, 
          "body_markdown": "@jmort253 Sometimes there is reasons to avoid libraries. It depends on company and project. Sometimes own implementations are reinventing wheel - then company should use well known solution. But there are cases when you shouldn&#39;t use someones solutions: optimization, **copyrights**, architecture, etc.", 
          "owner": {
            "user_id": 1848553, 
            "profile_image": "http://i.stack.imgur.com/UaJ5j.jpg?s=128&g=1", 
            "user_type": "registered", 
            "reputation": 83, 
            "link": "http://stackoverflow.com/users/1848553/pingwin-tux", 
            "display_name": "Pingwin Tux"
          }
        }
      ], 
      "creation_date": 1227292451, 
      "comment_count": 14, 
      "score": 182, 
      "body_markdown": "Taking into account file one should first get a `java.io.Reader` instance. This can then be read and added to a `StringBuilder` (we don&#39;t need `StringBuffer` if we are not accessing it in multiple threads, and `StringBuilder` is faster). The trick here is that we work in blocks, and as such don&#39;t need other buffering streams. The block size is parameterized for run-time performance optimization.\r\n\r\n    public static String slurp(final InputStream is, final int bufferSize)\r\n    {\r\n      final char[] buffer = new char[bufferSize];\r\n      final StringBuilder out = new StringBuilder();\r\n      try {\r\n        final Reader in = new InputStreamReader(is, &quot;UTF-8&quot;);\r\n        try {\r\n          for (;;) {\r\n            int rsz = in.read(buffer, 0, buffer.length);\r\n            if (rsz &lt; 0)\r\n              break;\r\n            out.append(buffer, 0, rsz);\r\n          }\r\n        } // &lt;- inserted missing brace here, but SO doesn&#39;t like 1-char edits\r\n        finally {\r\n          in.close();\r\n        }\r\n      }\r\n      catch (UnsupportedEncodingException ex) {\r\n        /* ... */\r\n      }\r\n      catch (IOException ex) {\r\n          /* ... */\r\n      }\r\n      return out.toString();\r\n    }", 
      "owner": {
        "user_id": 4100, 
        "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3793, 
        "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
        "display_name": "Paul de Vrieze"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1353168508, 
      "answer_id": 309718
    }, 
    {
      "body": "<p>make sure to close the streams at end if you use Stream Readers</p>\n\n<pre><code>    private String readStream(InputStream iStream) throws IOException {\n        //build a Stream Reader, it can read char by char\n        InputStreamReader iStreamReader = new InputStreamReader(iStream);\n        //build a buffered Reader, so that i can read whole line at once\n        BufferedReader bReader = new BufferedReader(iStreamReader);\n        String line = null;\n        StringBuilder builder = new StringBuilder();\n        while((line = bReader.readLine()) != null) {  //Read till end\n            builder.append(line);\n        }\n        bReader.close();         //close all opened stuff\n        iStreamReader.close();\n        iStream.close();\n        return builder.toString();\n    }\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1353155945, 
      "creation_date": 1353155945, 
      "comment_count": 0, 
      "score": 6, 
      "body_markdown": "make sure to close the streams at end if you use Stream Readers\r\n\r\n        private String readStream(InputStream iStream) throws IOException {\r\n            //build a Stream Reader, it can read char by char\r\n            InputStreamReader iStreamReader = new InputStreamReader(iStream);\r\n            //build a buffered Reader, so that i can read whole line at once\r\n            BufferedReader bReader = new BufferedReader(iStreamReader);\r\n            String line = null;\r\n            StringBuilder builder = new StringBuilder();\r\n            while((line = bReader.readLine()) != null) {  //Read till end\r\n                builder.append(line);\r\n            }\r\n            bReader.close();         //close all opened stuff\r\n            iStreamReader.close();\r\n            iStream.close();\r\n            return builder.toString();\r\n        }", 
      "owner": {
        "user_id": 1506477, 
        "profile_image": "https://www.gravatar.com/avatar/a5d48d8856ee5051fbb431cd0cf12deb?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 597, 
        "link": "http://stackoverflow.com/users/1506477/thamme-gowda", 
        "display_name": "Thamme Gowda"
      }, 
      "is_accepted": false, 
      "answer_id": 13430647
    }, 
    {
      "body": "<p>Here's more-or-less sampath's answer, cleaned up a bit and represented as a function:</p>\n\n<pre><code>String streamToString(InputStream in) throws IOException {\n  StringBuilder out = new StringBuilder();\n  BufferedReader br = new BufferedReader(new InputStreamReader(in));\n  for(String line = br.readLine(); line != null; line = br.readLine()) \n    out.append(line);\n  br.close();\n  return out.toString();\n}\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1347474672, 
      "comments": [
        {
          "body": "again no encoding", 
          "edited": false, 
          "comment_id": 26144915, 
          "creation_date": 1374941362, 
          "post_id": 9949592, 
          "score": 3, 
          "body_markdown": "again no encoding", 
          "owner": {
            "user_id": 281545, 
            "profile_image": "https://www.gravatar.com/avatar/e9afcf11d81904cdb5677c13d249b6c5?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 5053, 
            "link": "http://stackoverflow.com/users/281545/mr-and-mrs-d", 
            "accept_rate": 81, 
            "display_name": "Mr_and_Mrs_D"
          }
        }
      ], 
      "creation_date": 1333137151, 
      "comment_count": 1, 
      "score": 16, 
      "body_markdown": "Here&#39;s more-or-less sampath&#39;s answer, cleaned up a bit and represented as a function:\r\n\r\n    String streamToString(InputStream in) throws IOException {\r\n      StringBuilder out = new StringBuilder();\r\n      BufferedReader br = new BufferedReader(new InputStreamReader(in));\r\n      for(String line = br.readLine(); line != null; line = br.readLine()) \r\n        out.append(line);\r\n      br.close();\r\n      return out.toString();\r\n    }", 
      "owner": {
        "user_id": 458244, 
        "profile_image": "https://www.gravatar.com/avatar/37b1a2f47e378dd6f511c21ea5ed506e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 378, 
        "link": "http://stackoverflow.com/users/458244/tkh", 
        "display_name": "TKH"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1347474672, 
      "answer_id": 9949592
    }, 
    {
      "body": "<p>How about this?</p>\n\n<pre><code>InputStream in = <i>/* your InputStream */</i>;\nInputStreamReader is = new InputStreamReader(in);\nStringBuilder sb=new StringBuilder();\nBufferedReader br = new BufferedReader(is);\nString read = br.readLine();\n\nwhile(read != null) {\n    //System.out.println(read);\n    sb.append(read);\n    read =br.readLine();\n\n}\n\nreturn sb.toString();\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1343706223, 
      "comments": [
        {
          "body": "Doesn&#39;t answer the question. This shows how to iterate over the lines in a stream, not how to read the entire stream into a string.", 
          "edited": false, 
          "comment_id": 12541848, 
          "creation_date": 1332515467, 
          "post_id": 6938341, 
          "score": 2, 
          "body_markdown": "Doesn&#39;t answer the question. This shows how to iterate over the lines in a stream, not how to read the entire stream into a string.", 
          "owner": {
            "user_id": 8871, 
            "profile_image": "https://www.gravatar.com/avatar/99576b8b980bf17e16ce93db9553da0c?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 684, 
            "link": "http://stackoverflow.com/users/8871/andrew", 
            "display_name": "Andrew"
          }
        }, 
        {
          "body": "you can concat all string in to one String.that is simple.....", 
          "edited": false, 
          "comment_id": 12571295, 
          "creation_date": 1332686042, 
          "post_id": 6938341, 
          "score": 7, 
          "body_markdown": "you can concat all string in to one String.that is simple.....", 
          "owner": {
            "user_id": 559185, 
            "profile_image": "https://www.gravatar.com/avatar/2c9beb6f32879d1b6ab533b1c797caaf?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 2154, 
            "link": "http://stackoverflow.com/users/559185/sampathpremarathna", 
            "accept_rate": 73, 
            "display_name": "sampathpremarathna"
          }
        }, 
        {
          "body": "The thing is, you&#39;re first splitting into lines, and then undoing that. It&#39;s easier and faster to just read arbitrary buffers.", 
          "edited": false, 
          "comment_id": 13177755, 
          "creation_date": 1334947014, 
          "post_id": 6938341, 
          "score": 6, 
          "body_markdown": "The thing is, you&#39;re first splitting into lines, and then undoing that. It&#39;s easier and faster to just read arbitrary buffers.", 
          "owner": {
            "user_id": 4100, 
            "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3793, 
            "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
            "display_name": "Paul de Vrieze"
          }
        }, 
        {
          "body": "Also, readLine does not distinguish between \\n and \\r, so you cannot reproduce the exact stream again.", 
          "edited": false, 
          "comment_id": 16578682, 
          "creation_date": 1347264482, 
          "post_id": 6938341, 
          "score": 3, 
          "body_markdown": "Also, readLine does not distinguish between \\n and \\r, so you cannot reproduce the exact stream again.", 
          "owner": {
            "user_id": 469932, 
            "profile_image": "https://www.gravatar.com/avatar/cd8f595eae283a4e5ce624d7fea60fae?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 276, 
            "link": "http://stackoverflow.com/users/469932/d%c3%a9lawen", 
            "display_name": "D&#233;lawen"
          }
        }, 
        {
          "body": "@PauldeVrieze how many lines, and how quickly do you need to process them!?  I would hazard a guess that any performance loss would be small, or could be handled by every once in a while logging them to a file and destroying the old String obj&#39;s.", 
          "edited": false, 
          "reply_to_user": {
            "user_id": 4100, 
            "profile_image": "https://www.gravatar.com/avatar/f2ffcd63c3f62b86a905ebe89da2c69d?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 3793, 
            "link": "http://stackoverflow.com/users/4100/paul-de-vrieze", 
            "display_name": "Paul de Vrieze"
          }, 
          "comment_id": 27166308, 
          "creation_date": 1377672761, 
          "post_id": 6938341, 
          "score": 0, 
          "body_markdown": "@PauldeVrieze how many lines, and how quickly do you need to process them!?  I would hazard a guess that any performance loss would be small, or could be handled by every once in a while logging them to a file and destroying the old String obj&#39;s.", 
          "owner": {
            "user_id": 262852, 
            "profile_image": "https://www.gravatar.com/avatar/e4e17e45f2e8cc967a8695131910f365?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 1370, 
            "link": "http://stackoverflow.com/users/262852/thufir", 
            "accept_rate": 71, 
            "display_name": "Thufir"
          }
        }, 
        {
          "body": "very inefficient, as <code>readLine</code> read character by character to look for EOL. Also, if there is no line break in the stream, this does not really make sense.", 
          "edited": false, 
          "comment_id": 35415330, 
          "creation_date": 1397844310, 
          "post_id": 6938341, 
          "score": 0, 
          "body_markdown": "very inefficient, as `readLine` read character by character to look for EOL. Also, if there is no line break in the stream, this does not really make sense.", 
          "owner": {
            "user_id": 671543, 
            "profile_image": "https://www.gravatar.com/avatar/2145962377da9419f2446cd565f614ee?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 18270, 
            "link": "http://stackoverflow.com/users/671543/njzk2", 
            "accept_rate": 50, 
            "display_name": "njzk2"
          }
        }
      ], 
      "creation_date": 1312446584, 
      "comment_count": 6, 
      "score": 150, 
      "body_markdown": "How about this?\r\n\r\n&lt;pre&gt;&lt;code&gt;InputStream in = &lt;i&gt;/* your InputStream */&lt;/i&gt;;\r\nInputStreamReader is = new InputStreamReader(in);\r\nStringBuilder sb=new StringBuilder();\r\nBufferedReader br = new BufferedReader(is);\r\nString read = br.readLine();\r\n\r\nwhile(read != null) {\r\n    //System.out.println(read);\r\n    sb.append(read);\r\n    read =br.readLine();\r\n    \r\n}\r\n\r\nreturn sb.toString();\r\n&lt;/code&gt;&lt;/pre&gt;", 
      "owner": {
        "user_id": 559185, 
        "profile_image": "https://www.gravatar.com/avatar/2c9beb6f32879d1b6ab533b1c797caaf?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2154, 
        "link": "http://stackoverflow.com/users/559185/sampathpremarathna", 
        "accept_rate": 73, 
        "display_name": "sampathpremarathna"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1343706223, 
      "answer_id": 6938341
    }, 
    {
      "body": "<p>The below code worked for me. </p>\n\n<pre><code>    URL url = MyClass.class.getResource(\"/\" + configFileName);\n    BufferedInputStream bi = (BufferedInputStream) url.getContent();\n    byte[] buffer = new byte[bi.available() ];\n    int bytesRead = bi.read(buffer);\n    String out = new String(buffer);\n</code></pre>\n\n<p>Please note, according to Java docs, the available() method might not work with InputStream but always works with BufferedInputStream.\nIn case you don't want to use available() method we can always use the below code</p>\n\n<pre><code>    URL url = MyClass.class.getResource(\"/\" + configFileName);\n    BufferedInputStream bi = (BufferedInputStream) url.getContent();\n    File f = new File(url.getPath());\n    byte[] buffer = new byte[ (int) f.length()];\n    int bytesRead = bi.read(buffer);\n    String out = new String(buffer);\n</code></pre>\n\n<p>I am not sure if there will be any encoding issues. Please comment, if there will be any issues with the code</p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1343125159, 
      "comments": [
        {
          "body": "The whole point of using <code>InputStream</code> is, that a) you don&#39;t know the length of the <i>complete</i> stream (which bails out anything depending on <code>available</code>) and b) the stream can be anything - a file, a socket, something internal (which bails out anything based on <code>File.size()</code>). Regarding <code>available</code>: This will cut off data if the stream is longer than the buffer size.", 
          "edited": false, 
          "comment_id": 15400641, 
          "creation_date": 1343125567, 
          "post_id": 11628754, 
          "score": 2, 
          "body_markdown": "The whole point of using `InputStream` is, that a) you don&#39;t know the length of the _complete_ stream (which bails out anything depending on `available`) and b) the stream can be anything - a file, a socket, something internal (which bails out anything based on `File.size()`). Regarding `available`: This will cut off data if the stream is longer than the buffer size.", 
          "owner": {
            "user_id": 947357, 
            "profile_image": "https://www.gravatar.com/avatar/0043c169301a856ae07c80debbf90bd8?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 24870, 
            "link": "http://stackoverflow.com/users/947357/a-h", 
            "accept_rate": 75, 
            "display_name": "A.H."
          }
        }
      ], 
      "creation_date": 1343125159, 
      "comment_count": 1, 
      "score": 2, 
      "body_markdown": "The below code worked for me. \r\n\r\n\r\n\t\tURL url = MyClass.class.getResource(&quot;/&quot; + configFileName);\r\n\t\tBufferedInputStream bi = (BufferedInputStream) url.getContent();\r\n\t\tbyte[] buffer = new byte[bi.available() ];\r\n\t\tint bytesRead = bi.read(buffer);\r\n\t\tString out = new String(buffer);\r\n\r\nPlease note, according to Java docs, the available() method might not work with InputStream but always works with BufferedInputStream.\r\nIn case you don&#39;t want to use available() method we can always use the below code\r\n\r\n\t\tURL url = MyClass.class.getResource(&quot;/&quot; + configFileName);\r\n\t\tBufferedInputStream bi = (BufferedInputStream) url.getContent();\r\n\t\tFile f = new File(url.getPath());\r\n\t\tbyte[] buffer = new byte[ (int) f.length()];\r\n\t\tint bytesRead = bi.read(buffer);\r\n\t\tString out = new String(buffer);\r\n\r\nI am not sure if there will be any encoding issues. Please comment, if there will be any issues with the code", 
      "owner": {
        "user_id": 1548325, 
        "profile_image": "https://www.gravatar.com/avatar/75ac98dd52c8b393234b824f55dcdc49?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 46, 
        "link": "http://stackoverflow.com/users/1548325/anand-n", 
        "display_name": "Anand N"
      }, 
      "is_accepted": false, 
      "answer_id": 11628754
    }, 
    {
      "body": "<p>Quick and easy:</p>\n\n<pre><code>String result = (String)new ObjectInputStream( inputStream ).readObject();\n</code></pre>\n", 
      "question_id": 309424, 
      "last_activity_date": 1342719219, 
      "comments": [
        {
          "body": "I get <code>java.io.StreamCorruptedException: invalid stream header</code>", 
          "edited": false, 
          "comment_id": 15318282, 
          "creation_date": 1342782813, 
          "post_id": 11566262, 
          "score": 0, 
          "body_markdown": "I get `java.io.StreamCorruptedException: invalid stream header`", 
          "owner": {
            "user_id": 674856, 
            "profile_image": "https://www.gravatar.com/avatar/959dcf1e004eb5e9e42b22346ce370c7?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 511, 
            "link": "http://stackoverflow.com/users/674856/xxl", 
            "accept_rate": 85, 
            "display_name": "XXL"
          }
        }, 
        {
          "body": "<code>ObjectInputStream</code> is about deserialization, and the stream have to respect the serialization protocol to work, which may not always true in the context of this question.", 
          "edited": false, 
          "comment_id": 22450251, 
          "creation_date": 1364998633, 
          "post_id": 11566262, 
          "score": 2, 
          "body_markdown": "`ObjectInputStream` is about deserialization, and the stream have to respect the serialization protocol to work, which may not always true in the context of this question.", 
          "owner": {
            "user_id": 48136, 
            "profile_image": "https://www.gravatar.com/avatar/f31c7fbcbb0766d0632d96fd7e74b649?s=128&d=identicon&r=PG", 
            "user_type": "registered", 
            "reputation": 5906, 
            "link": "http://stackoverflow.com/users/48136/brice", 
            "display_name": "Brice"
          }
        }
      ], 
      "creation_date": 1342719219, 
      "comment_count": 2, 
      "score": -7, 
      "body_markdown": "Quick and easy:\r\n\r\n    String result = (String)new ObjectInputStream( inputStream ).readObject();", 
      "owner": {
        "user_id": 772549, 
        "profile_image": "https://www.gravatar.com/avatar/f6ec07c16857a31a20fbea3dfc4a3816?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 304, 
        "link": "http://stackoverflow.com/users/772549/sobinary", 
        "accept_rate": 71, 
        "display_name": "soBinary"
      }, 
      "is_accepted": false, 
      "answer_id": 11566262
    }, 
    {
      "body": "<p>If you were feeling adventurous, you could mix Scala and Java and end up with this:</p>\n\n<pre><code>scala.io.Source.fromInputStream(is).mkString(\"\")\n</code></pre>\n\n<p>Mixing Java and Scala code and libraries has it's benefits.</p>\n\n<p>See full description here: <a href=\"http://stackoverflow.com/q/5221524/828757\">Idiomatic way to convert an InputStream to a String in Scala</a></p>\n", 
      "question_id": 309424, 
      "last_activity_date": 1331105530, 
      "creation_date": 1331105530, 
      "comment_count": 0, 
      "score": 11, 
      "body_markdown": "If you were feeling adventurous, you could mix Scala and Java and end up with this:\r\n\r\n    scala.io.Source.fromInputStream(is).mkString(&quot;&quot;)\r\n\r\nMixing Java and Scala code and libraries has it&#39;s benefits.\r\n\r\nSee full description here: http://stackoverflow.com/q/5221524/828757", 
      "owner": {
        "user_id": 828757, 
        "profile_image": "https://www.gravatar.com/avatar/37ce082c85173317772af80b64345526?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6325, 
        "link": "http://stackoverflow.com/users/828757/jacobusr", 
        "accept_rate": 95, 
        "display_name": "JacobusR"
      }, 
      "is_accepted": false, 
      "answer_id": 9597413
    }
  ], 
  "quota_max": 300, 
  "quota_remaining": 299
}
