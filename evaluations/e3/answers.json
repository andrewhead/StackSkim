{
  "613183": [
    {
      "body": "<p>you can use the sorted function of python</p>\n\n<p>sorted(iterable[, cmp[, key[, reverse]]])</p>\n\n<p>Thus you can use:</p>\n\n<p>sorted(dictionary.items(),key = lambda x :x[1])</p>\n\n<p>visit this link for more information on sorted function : <a href=\"https://docs.python.org/2/library/functions.html#sorted\" rel=\"nofollow\">https://docs.python.org/2/library/functions.html#sorted</a></p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1416582249, 
      "creation_date": 1416582249, 
      "score": 0, 
      "owner": {
        "user_id": 3919542, 
        "profile_image": "https://www.gravatar.com/avatar/a638bc9d7fad666d07f9200694fc3885?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 20, 
        "link": "http://stackoverflow.com/users/3919542/kkk", 
        "display_name": "kkk"
      }, 
      "is_accepted": false, 
      "answer_id": 27064308
    }, 
    {
      "body": "<p>You can use a <a href=\"https://pypi.python.org/pypi/skipdict/1.0\" rel=\"nofollow\">skip dict</a> which is a dictionary that's permanently sorted by value.</p>\n\n<pre><code>&gt;&gt;&gt; data = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n&gt;&gt;&gt; SkipDict(data)\n{0: 0.0, 2: 1.0, 1: 2.0, 4: 3.0, 3: 4.0}\n</code></pre>\n\n<p>If you use <code>keys()</code>, <code>values()</code> or <code>items()</code> then you'll iterate in sorted order by value.</p>\n\n<p>It's implemented using the <a href=\"http://en.wikipedia.org/wiki/Skip_list\" rel=\"nofollow\">skip list</a> datastructure.</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1411685815, 
      "creation_date": 1411685815, 
      "score": 2, 
      "owner": {
        "user_id": 647151, 
        "profile_image": "https://www.gravatar.com/avatar/7e5c476f7ed6fcbb67eee738e304f066?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 149, 
        "link": "http://stackoverflow.com/users/647151/malthe", 
        "display_name": "malthe"
      }, 
      "is_accepted": false, 
      "answer_id": 26049456
    }, 
    {
      "body": "<p>It is not possible to sort a dict, only to get a representation of a dict that is sorted. Dicts are inherently orderless, but other types, such as lists and tuples, are not. So you need a sorted representation, which will be a list\u2014probably a list of tuples.</p>\n\n<p>For instance,</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n</code></pre>\n\n<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\n\n<p>And for those wishing to sort on keys instead of values:</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1411500324, 
      "creation_date": 1236214774, 
      "score": 1191, 
      "owner": {
        "user_id": 18515, 
        "profile_image": "https://www.gravatar.com/avatar/f9375b447dd668a10c19891379b9db2a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 25615, 
        "link": "http://stackoverflow.com/users/18515/devin-jeanpierre", 
        "accept_rate": 54, 
        "display_name": "Devin Jeanpierre"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1411500324, 
      "answer_id": 613218
    }, 
    {
      "body": "<p>Dicts can't be sorted, but you can build a sorted list from them.</p>\n\n<p>A sorted list of dict values:</p>\n\n<pre><code>sorted(d.values())\n</code></pre>\n\n<p>A list of (key, value) pairs, sorted by value:</p>\n\n<pre><code>from operator import itemgetter\nsorted(d.items(), key=itemgetter(1))\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1410888370, 
      "creation_date": 1236215122, 
      "score": 72, 
      "owner": {
        "user_id": 13169, 
        "profile_image": "https://www.gravatar.com/avatar/5986747b5b748191ff78064865e3a062?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 7171, 
        "link": "http://stackoverflow.com/users/13169/roberto-bonvallet", 
        "accept_rate": 80, 
        "display_name": "Roberto Bonvallet"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1410888370, 
      "answer_id": 613228
    }, 
    {
      "body": "<p>Why not try this approach. Let us define a dictionary called mydict with the following data:</p>\n\n<pre><code>mydict = {'carl':40,\n          'alan':2,\n          'bob':1,\n          'danny':3}\n</code></pre>\n\n<p>If one wanted to sort the dictionary by keys, one could do something like:</p>\n\n<pre><code>for key in sorted(mydict.iterkeys()):\n    print \"%s: %s\" % (key, mydict[key])\n</code></pre>\n\n<p>This should return the following output:</p>\n\n<pre><code>alan: 2\nbob: 1\ncarl: 40\ndanny: 3\n</code></pre>\n\n<p>On the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:</p>\n\n<pre><code>for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):\n    print \"%s: %s\" % (key, value)\n</code></pre>\n\n<p>The result of this command (sorting the dictionary by value) should return the following:</p>\n\n<pre><code>bob: 1\nalan: 2\ndanny: 3\ncarl: 40\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396846004, 
      "creation_date": 1396846004, 
      "score": 4, 
      "owner": {
        "user_id": 2114472, 
        "profile_image": "https://www.gravatar.com/avatar/5a9c5a95d2d672f3edfabe0aceb06d47?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 950, 
        "link": "http://stackoverflow.com/users/2114472/nathaniel-payne", 
        "accept_rate": 75, 
        "display_name": "Nathaniel Payne"
      }, 
      "is_accepted": false, 
      "answer_id": 22903797
    }, 
    {
      "body": "<p>Because of requirements to retain backward compatability with older versions of <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"nofollow\">Python</a> I think the OrderedDict solution is very unwise. You want something that works with Python 2.7 and older versions.</p>\n\n<p>But the collections solution mentioned in another answer is absolutely superb, because you retrain a connection between the key and value which in the case of dictionaries is extremely important.</p>\n\n<p>I don't agree with the number one choice presented in another answer, because it throws away the keys.</p>\n\n<p>I used the solution mentioned above (code shown below) and retained access to both keys and values and in my case the ordering was on the values, but the importance was the ordering of the keys after ordering the values.</p>\n\n<pre><code>from collections import Counter\n\nx = {'hello':1, 'python':5, 'world':3}\nc=Counter(x)\nprint c.most_common()\n\n\n&gt;&gt; [('python', 5), ('world', 3), ('hello', 1)]\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396545013, 
      "creation_date": 1393858710, 
      "score": 0, 
      "owner": {
        "user_id": 2211268, 
        "profile_image": "https://www.gravatar.com/avatar/7181f65bac883150a226ec3d2928b340?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/2211268/eamonn-kenny", 
        "display_name": "Eamonn Kenny"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396545013, 
      "answer_id": 22150003
    }, 
    {
      "body": "<p>I came up with this one, </p>\n\n<pre><code>import operator    \nx = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}\n</code></pre>\n\n<p>For Python 3.x: <code>x.items()</code> replacing <code>iteritems()</code>.</p>\n\n<pre><code>&gt;&gt;&gt; sorted_x\n{0: 0, 1: 2, 2: 1, 3: 4, 4: 3}\n</code></pre>\n\n<p>Or try with <code>collections.OrderedDict</code>!</p>\n\n<pre><code>x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nfrom collections import OrderedDict\n\nod1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396544879, 
      "creation_date": 1368001075, 
      "score": 2, 
      "owner": {
        "user_id": 1141493, 
        "profile_image": "https://www.gravatar.com/avatar/a2d49ab7bed0c38ddcb7beba77a92a54?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5606, 
        "link": "http://stackoverflow.com/users/1141493/octoback", 
        "accept_rate": 100, 
        "display_name": "octoback"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396544879, 
      "answer_id": 16435785
    }, 
    {
      "body": "<p>You can use the <a href=\"http://docs.python.org/2/library/collections.html#collections.Counter\" rel=\"nofollow\">collections.Counter</a>. Note, this will work for both numeric and non-numeric values.</p>\n\n<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; #To sort in reverse order\n&gt;&gt;&gt; Counter(x).most_common()\n[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\n&gt;&gt;&gt; #To sort in ascending order\n&gt;&gt;&gt; Counter(x).most_common()[::-1]\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n&gt;&gt;&gt; #To get a dictionary sorted by values\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; OrderedDict(Counter(x).most_common()[::-1])\nOrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396544698, 
      "creation_date": 1362832222, 
      "score": 13, 
      "owner": {
        "user_id": 977038, 
        "profile_image": "https://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 26384, 
        "link": "http://stackoverflow.com/users/977038/abhijit", 
        "accept_rate": 70, 
        "display_name": "Abhijit"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396544698, 
      "answer_id": 15310681
    }, 
    {
      "body": "<p>Using Python 3.2:</p>\n\n<pre><code>x = {\"b\":4, \"a\":3, \"c\":1}\nfor i in sorted(x.values()):\n    print(list(x.keys())[list(x.values()).index(i)])\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396544631, 
      "creation_date": 1351940841, 
      "score": 0, 
      "owner": {
        "user_id": 1770154, 
        "profile_image": "https://www.gravatar.com/avatar/c02f21dce5efa5ef87c27e69e917fda9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 243, 
        "link": "http://stackoverflow.com/users/1770154/raton", 
        "accept_rate": 50, 
        "display_name": "raton"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396544631, 
      "answer_id": 13208582
    }, 
    {
      "body": "<h2>As simple as: <code>sorted(dict1, key=dict1.get)</code></h2>\n\n<p>Well, it is actually possible to do a \"sort by dictionary values\". Recently I had to do that in a Code Golf (Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549\">Code golf: Word frequency chart</a></em>). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display list of the top words, sorted by decreasing frequency. </p>\n\n<p>If you construct a dictionary with the words as keys and the number of occurences of each word as value, simplified here as</p>\n\n<pre><code>d = defaultdict(int)\nfor w in text.split():\n  d[w] += 1\n</code></pre>\n\n<p>then you can get list of the words in order of frequency of use with <code>sorted(d, key=d.get)</code> - the sort iterates over the dictionary keys, using as sort-key the number of word occurrences. </p>\n\n<pre><code>for w in sorted(d, key=d.get, reverse=True):\n  print w, d[w]\n</code></pre>\n\n<p>I am writing this detailed explanation to illustrate what do people often mean by \"I can easily sort a dictionary by key, but how do I sort by value\" - and I think the OP was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396544522, 
      "creation_date": 1278316876, 
      "score": 392, 
      "owner": {
        "user_id": 226086, 
        "profile_image": "https://www.gravatar.com/avatar/c05a3df9cb99678a2919bbdd55ecb0a2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 8273, 
        "link": "http://stackoverflow.com/users/226086/nas-banov", 
        "display_name": "Nas Banov"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396544522, 
      "answer_id": 3177911
    }, 
    {
      "body": "<p>In recent Python 2.7, we have the new <a href=\"http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections\">OrderedDict</a> type, which remembers the order in which the items were added.</p>\n\n<pre><code>&gt;&gt;&gt; d = {\"third\": 3, \"first\": 1, \"fourth\": 4, \"second\": 2}\n\n&gt;&gt;&gt; for k, v in d.items():\n...     print \"%s: %s\" % (k, v)\n...\nsecond: 2\nfourth: 4\nthird: 3\nfirst: 1\n\n&gt;&gt;&gt; d\n{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}\n</code></pre>\n\n<p>To make a new ordered dictionary from the original, sorting by the values:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))\n</code></pre>\n\n<p>The OrderedDict behaves like a normal dict:</p>\n\n<pre><code>&gt;&gt;&gt; for k, v in d_sorted_by_value.items():\n...     print \"%s: %s\" % (k, v)\n...\nfirst: 1\nsecond: 2\nthird: 3\nfourth: 4\n\n&gt;&gt;&gt; d_sorted_by_value\nOrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1396544379, 
      "creation_date": 1278298241, 
      "score": 47, 
      "owner": {
        "user_id": 234248, 
        "profile_image": "https://www.gravatar.com/avatar/2e3e7f03ab2e85c1be14975ebc9945bf?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6340, 
        "link": "http://stackoverflow.com/users/234248/mykhal", 
        "accept_rate": 73, 
        "display_name": "mykhal"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396544379, 
      "answer_id": 3177025
    }, 
    {
      "body": "<p>This returns the list of key-value pairs in the dictionary, sorted by value from highest to lowest:</p>\n\n<pre><code>sorted(d.items(), reverse=True)\n</code></pre>\n\n<p>It is a list of tuples because dictionaries themselves can't be sorted.</p>\n\n<p>This can be both printed or sent into further computation.</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1393532158, 
      "creation_date": 1392235846, 
      "score": 0, 
      "owner": {
        "user_id": 2800876, 
        "profile_image": "https://www.gravatar.com/avatar/94e79f29e946660a425b518ea6be8914?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 872, 
        "link": "http://stackoverflow.com/users/2800876/zags", 
        "accept_rate": 87, 
        "display_name": "Zags"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1393532158, 
      "answer_id": 21738569
    }, 
    {
      "body": "<pre><code>&gt;&gt;&gt; import collections\n&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; sorted_x = collections.OrderedDict(sorted(x.items(), key=lambda t:t[1]))\n&gt;&gt;&gt; OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\n</code></pre>\n\n<p><code>OrderedDict</code> is subclass of <code>dict</code></p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1392396274, 
      "creation_date": 1392396274, 
      "score": 0, 
      "owner": {
        "user_id": 1392860, 
        "profile_image": "https://www.gravatar.com/avatar/2d161bbc7c97b8e50c8814cbc22e712f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 705, 
        "link": "http://stackoverflow.com/users/1392860/liuzhijun", 
        "accept_rate": 89, 
        "display_name": "liuzhijun"
      }, 
      "is_accepted": false, 
      "answer_id": 21784867
    }, 
    {
      "body": "<pre><code>months = {\"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31,\n          \"June\": 30, \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31,\n          \"November\": 30, \"December\": 31}\n\ndef mykey(t):\n    \"\"\" Customize your sorting logic using this function.  The parameter to\n    this function is a tuple.  Comment/uncomment the return statements to test\n    different logics.\n    \"\"\"\n    return t[1]              # sort by number of days in the month\n    #return t[1], t[0]       # sort by number of days, then by month name\n    #return len(t[0])        # sort by length of month name\n    #return t[0][-1]         # sort by last character of month name\n\n\n# Since a dictionary can't be sorted by value, what you can do is to convert\n# it into a list of tuples with tuple length 2.\n# You can then do custom sorts by passing your own function to sorted().\nmonths_as_list = sorted(months.items(), key=mykey, reverse=False)\n\nfor month in months_as_list:\n    print month\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1392335995, 
      "creation_date": 1392333500, 
      "score": 1, 
      "owner": {
        "user_id": 3285376, 
        "profile_image": "http://i.stack.imgur.com/FYjkj.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 364, 
        "link": "http://stackoverflow.com/users/3285376/lessthanl0l", 
        "accept_rate": 100, 
        "display_name": "lessthanl0l"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1392335995, 
      "answer_id": 21767696
    }, 
    {
      "body": "<p>In Python 2.7, simply do:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from collections import OrderedDict\n# regular unsorted dictionary\nd = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n# dictionary sorted by key\nOrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n# dictionary sorted by value\nOrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n</code></pre>\n\n<p>copy-paste from : <a href=\"http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes\">http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes</a></p>\n\n<p>Enjoy ;-)</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1377160728, 
      "creation_date": 1377160728, 
      "score": 13, 
      "owner": {
        "user_id": 1415325, 
        "profile_image": "http://i.stack.imgur.com/jJmjZ.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 155, 
        "link": "http://stackoverflow.com/users/1415325/sweetdream", 
        "display_name": "sweetdream"
      }, 
      "is_accepted": false, 
      "answer_id": 18375444
    }, 
    {
      "body": "<p>I had the same problem, I solved it like this:</p>\n\n<pre><code>WantedOutput = sorted(MyDict, key=lambda x : MyDict[x]) \n</code></pre>\n\n<p>(people who answer: \"It is not possible to sort a dict\" did not read the question!!\nIn fact \"I can sort on the keys, but how can I sort based on the values?\" clearly means that he wants a list of the keys sorted according to the value of their values.)</p>\n\n<p>Please notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list)</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1372744040, 
      "creation_date": 1290089997, 
      "score": 12, 
      "owner": {
        "user_id": 512225, 
        "profile_image": "https://www.gravatar.com/avatar/b01d1b190b75cd4a4c828052fd3bedbb?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1521, 
        "link": "http://stackoverflow.com/users/512225/jimifiki", 
        "accept_rate": 87, 
        "display_name": "jimifiki"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1372744040, 
      "answer_id": 4215710
    }, 
    {
      "body": "<p>For the sake of completeness, I am posting a solution using <a href=\"http://docs.python.org/2/library/heapq.html\" rel=\"nofollow\">heapq</a>. Note, this method will work for both numeric and non-numeric values</p>\n\n<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; x_items = x.items()\n&gt;&gt;&gt; heapq.heapify(x_items)\n&gt;&gt;&gt; #To sort in reverse order\n&gt;&gt;&gt; heapq.nlargest(len(x_items),x_items, operator.itemgetter(1))\n[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\n&gt;&gt;&gt; #To sort in ascending order\n&gt;&gt;&gt; heapq.nsmallest(len(x_items),x_items, operator.itemgetter(1))\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1364048393, 
      "creation_date": 1364048393, 
      "score": 1, 
      "owner": {
        "user_id": 977038, 
        "profile_image": "https://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 26384, 
        "link": "http://stackoverflow.com/users/977038/abhijit", 
        "accept_rate": 70, 
        "display_name": "Abhijit"
      }, 
      "is_accepted": false, 
      "answer_id": 15587800
    }, 
    {
      "body": "<p>This works in 3.1.x:</p>\n\n<pre><code>import operator\nslovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)\nprint(slovar_sorted)\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1352230051, 
      "creation_date": 1321428721, 
      "score": 3, 
      "owner": {
        "user_id": 1049150, 
        "profile_image": "https://www.gravatar.com/avatar/b12c3be038ce6c778786721f98075b14?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/1049150/ifail", 
        "display_name": "iFail"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1352230051, 
      "answer_id": 8148132
    }, 
    {
      "body": "<p>If values are numeric you may also use Counter from collections</p>\n\n<pre><code>from collections import Counter\n\nx={'hello':1,'python':5, 'world':3}\nc=Counter(x)\nprint c.most_common()\n\n\n&gt;&gt; [('python', 5), ('world', 3), ('hello', 1)]    \n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1340812172, 
      "creation_date": 1340811825, 
      "score": 8, 
      "owner": {
        "user_id": 296979, 
        "profile_image": "https://www.gravatar.com/avatar/e093f8fb6383cc99572e02a41fad9789?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 162, 
        "link": "http://stackoverflow.com/users/296979/ivan-sas", 
        "accept_rate": 33, 
        "display_name": "Ivan Sas"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1340812172, 
      "answer_id": 11230132
    }, 
    {
      "body": "<p>If your values are integers, and you use Python 2.7 or newer, you can use <a href=\"http://docs.python.org/py3k/library/collections.html#collections.Counter\" rel=\"nofollow\"><code>collections.Counter</code></a> instead of <code>dict</code>. The <code>most_common</code> method will give you all items, sorted by the value.</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1327434643, 
      "creation_date": 1327433316, 
      "score": 4, 
      "owner": {
        "user_id": 99057, 
        "profile_image": "https://www.gravatar.com/avatar/c50e5892d79fb240b2c870d458505eea?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 15883, 
        "link": "http://stackoverflow.com/users/99057/petr-viktorin", 
        "display_name": "Petr Viktorin"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1327434643, 
      "answer_id": 8992838
    }, 
    {
      "body": "<p>Iterate through a dict and sort it by its values in descending order:</p>\n\n<pre><code>$ python --version\nPython 3.2.2\n\n$ cat sort_dict_by_val_desc.py \ndictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)\nfor word in sorted(dictionary, key=dictionary.get, reverse=True):\n  print(word, dictionary[word])\n\n$ python sort_dict_by_val_desc.py \naina 5\ntuli 4\njoka 3\nsana 2\nsiis 1\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1320003726, 
      "creation_date": 1320003726, 
      "score": 3, 
      "owner": {
        "user_id": 1021036, 
        "profile_image": "https://www.gravatar.com/avatar/c526abe57c2bbe9503af31d2a4bbaecb?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/1021036/juhoh", 
        "display_name": "juhoh"
      }, 
      "is_accepted": false, 
      "answer_id": 7947321
    }, 
    {
      "body": "<p>Use <strong>ValueSortedDict</strong> from <a href=\"http://pypi.python.org/pypi/dicts\" rel=\"nofollow\">dicts</a>:</p>\n\n<pre><code>from dicts.sorteddict import ValueSortedDict\nd = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_dict = ValueSortedDict(d)\nprint sorted_dict.items() \n\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1319005541, 
      "creation_date": 1319005541, 
      "score": 3, 
      "owner": {
        "user_id": 700820, 
        "profile_image": "https://www.gravatar.com/avatar/e92364d19f93fe52da855a8072316b5c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 276, 
        "link": "http://stackoverflow.com/users/700820/ponty", 
        "display_name": "ponty"
      }, 
      "is_accepted": false, 
      "answer_id": 7817348
    }, 
    {
      "body": "<p><b>New Answer</b> -- two years late...</p>\n\n<hr>\n\n<p>It can often be very handy to use <b><a href=\"http://docs.python.org/library/collections.html#collections.namedtuple\">namedtuple</a></b>. For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score':</p>\n\n<pre><code>import collections\nPlayer = collections.namedtuple('Player', 'score name')\nd = {'John':5, 'Alex':10, 'Richard': 7}\n</code></pre>\n\n<p>sorting with lowest score first:</p>\n\n<pre><code>worst = sorted(Player(v,k) for (k,v) in d.items())\n</code></pre>\n\n<p>sorting with highest score first:</p>\n\n<pre><code>best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)\n</code></pre>\n\n<p>Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this:</p>\n\n<pre><code>    player = best[1]\n    player.name\n        'Richard'\n    player.score\n         7\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1314747810, 
      "creation_date": 1314664215, 
      "score": 19, 
      "owner": {
        "user_id": 847331, 
        "profile_image": "https://www.gravatar.com/avatar/811e96762eac3a693825446a9896712c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4662, 
        "link": "http://stackoverflow.com/users/847331/remi", 
        "accept_rate": 100, 
        "display_name": "Remi"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1314747810, 
      "answer_id": 7237524
    }, 
    {
      "body": "<pre><code>import operator\norigin_list = [\n    {\"name\": \"foo\", \"rank\": 0, \"rofl\": 20000},\n    {\"name\": \"Silly\", \"rank\": 15, \"rofl\": 1000},\n    {\"name\": \"Baa\", \"rank\": 300, \"rofl\": 20},\n    {\"name\": \"Zoo\", \"rank\": 10, \"rofl\": 200},\n    {\"name\": \"Penguin\", \"rank\": -1, \"rofl\": 10000}\n]\nprint \"&gt;&gt; Original &gt;&gt;\"\nfor foo in origin_list:\n    print foo\n\nprint \"\\n&gt;&gt; Rofl sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rofl\")):\n    print foo\n\nprint \"\\n&gt;&gt; Rank sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rank\")):\n    print foo\n</code></pre>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>Original >> {'name': 'foo', 'rank': 0, 'rofl': 20000} {'name': 'Silly',\n      'rank': 15, 'rofl': 1000} {'name':\n      'Baa', 'rank': 300, 'rofl': 20}\n      {'name': 'Zoo', 'rank': 10, 'rofl':\n      200} {'name': 'Penguin', 'rank': -1,\n      'rofl': 10000}</p>\n      \n      <p>Rofl >> {'name': 'Baa', 'rank': 300, 'rofl': 20} {'name': 'Zoo',\n      'rank': 10, 'rofl': 200} {'name':\n      'Silly', 'rank': 15, 'rofl': 1000}\n      {'name': 'Penguin', 'rank': -1,\n      'rofl': 10000} {'name': 'foo', 'rank':\n      0, 'rofl': 20000}</p>\n      \n      <p>Rank >> {'name': 'Penguin', 'rank': -1, 'rofl': 10000} {'name': 'foo', 'rank': 0, 'rofl': 20000} {'name':\n      'Zoo', 'rank': 10, 'rofl': 200}\n      {'name': 'Silly', 'rank': 15, 'rofl':\n      1000} {'name': 'Baa', 'rank': 300,\n      'rofl': 20}</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", 
      "question_id": 613183, 
      "last_activity_date": 1299549985, 
      "creation_date": 1299549985, 
      "score": 5, 
      "owner": {
        "user_id": 118412, 
        "profile_image": "https://www.gravatar.com/avatar/3fb1cb5f3d9bc4151df978091b1408c4?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 493, 
        "link": "http://stackoverflow.com/users/118412/pedromorgan", 
        "display_name": "PedroMorgan"
      }, 
      "is_accepted": false, 
      "answer_id": 5227519
    }, 
    {
      "body": "<pre><code>from django.utils.datastructures import SortedDict\n\ndef sortedDictByKey(self,data):\n    \"\"\"Sorted dictionary order by key\"\"\"\n    sortedDict = SortedDict()\n    if data:\n        if isinstance(data, dict):\n            sortedKey = sorted(data.keys())\n            for k in sortedKey:\n                sortedDict[k] = data[k]\n    return sortedDict\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1288613801, 
      "creation_date": 1288613801, 
      "score": 3, 
      "owner": {
        "user_id": 615617, 
        "profile_image": "https://www.gravatar.com/avatar/7df4bf70fd5686a70cac3a2ac60e1890?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 89, 
        "link": "http://stackoverflow.com/users/615617/argun", 
        "accept_rate": 0, 
        "display_name": "Argun"
      }, 
      "is_accepted": false, 
      "answer_id": 4068769
    }, 
    {
      "body": "<p>You could use:</p>\n\n<p><code>sorted(d.items(), key=lambda x: x[1])</code></p>\n\n<p>This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1278317168, 
      "creation_date": 1266078831, 
      "score": 183, 
      "owner": {
        "user_id": 272463, 
        "profile_image": "https://www.gravatar.com/avatar/b2542837d1a7232676f815630a42f3fb?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1839, 
        "link": "http://stackoverflow.com/users/272463/mark", 
        "display_name": "Mark"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1278317168, 
      "answer_id": 2258273
    }, 
    {
      "body": "<p>You can create an \"inverted index\", also</p>\n\n<pre><code>from collections import defaultdict\ninverse= defaultdict( list )\nfor k, v in originalDict.items():\n    inverse[v].append( k )\n</code></pre>\n\n<p>Now your inverse has the values; each value has a list of applicable keys.</p>\n\n<pre><code>for k in sorted(inverse):\n    print k, inverse[k]\n</code></pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1236217938, 
      "creation_date": 1236217938, 
      "score": 9, 
      "owner": {
        "user_id": 10661, 
        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 217766, 
        "link": "http://stackoverflow.com/users/10661/s-lott", 
        "accept_rate": 93, 
        "display_name": "S.Lott"
      }, 
      "is_accepted": false, 
      "answer_id": 613326
    }, 
    {
      "body": "<p>Technically, dictionaries aren't sequences, and therefore can't be sorted. You can do something like</p>\n\n<pre><code>sorted(a_dictionary.values())\n</code></pre>\n\n<p>assuming performance isn't a huge deal.</p>\n\n<p>UPDATE: Thanks to the commenters for pointing out that I made this way too complicated in the beginning.</p>\n", 
      "question_id": 613183, 
      "last_activity_date": 1236217881, 
      "creation_date": 1236214572, 
      "score": 3, 
      "owner": {
        "user_id": 4203, 
        "profile_image": "https://www.gravatar.com/avatar/646c35309b1b074fba9cf2e6a482ac3b?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 37988, 
        "link": "http://stackoverflow.com/users/4203/hank-gay", 
        "accept_rate": 90, 
        "display_name": "Hank Gay"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1236217881, 
      "answer_id": 613207
    }, 
    {
      "body": "<p>Pretty much the same as Hank Gay's answer;</p>\n\n<pre>\nsorted([(value,key) for (key,value) in mydict.items()])\n</pre>\n", 
      "question_id": 613183, 
      "last_activity_date": 1236215164, 
      "creation_date": 1236215164, 
      "score": 20, 
      "owner": {
        "user_id": 26294, 
        "profile_image": "https://www.gravatar.com/avatar/104ed0f3035b4a786e32032f1ce6fc66?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2050, 
        "link": "http://stackoverflow.com/users/26294/user26294", 
        "display_name": "user26294"
      }, 
      "is_accepted": false, 
      "answer_id": 613230
    }
  ], 
  "36932": [
    {
      "community_owned_date": 1415697994, 
      "body": "<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, [object() for _ in range(len(sequential))]), **named)\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>If you name it, is your problem, but if not creating objects instead of values allows you to do this:</p>\n\n<pre><code>&gt;&gt;&gt; DOG = enum('BARK', 'WALK', 'SIT')\n&gt;&gt;&gt; CAT = enum('MEOW', 'WALK', 'SIT')\n&gt;&gt;&gt; DOG.WALK == CAT.WALK\nFalse\n</code></pre>\n\n<p>When using other implementations sited here (also when using named instances in my example) you must be sure you never try to compare objects from different enums. For here's a possible pitfall:</p>\n\n<pre><code>&gt;&gt;&gt; DOG = enum('BARK'=1, 'WALK'=2, 'SIT'=3)\n&gt;&gt;&gt; CAT = enum('WALK'=1, 'SIT'=2)\n&gt;&gt;&gt; pet1_state = DOG.BARK\n&gt;&gt;&gt; pet2_state = CAT.WALK\n&gt;&gt;&gt; pet1_state == pet2_state\nTrue\n</code></pre>\n\n<p>Yikes!</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1415697994, 
      "creation_date": 1415697994, 
      "score": 2, 
      "owner": {
        "user_id": 1182464, 
        "profile_image": "https://www.gravatar.com/avatar/e569ac49e984e3a55ee167b14c11cf41?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1556, 
        "link": "http://stackoverflow.com/users/1182464/estani", 
        "accept_rate": 58, 
        "display_name": "estani"
      }, 
      "is_accepted": false, 
      "answer_id": 26861507
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Enums have been added to Python 3.4 as described in <a href=\"http://www.python.org/dev/peps/pep-0435/\">PEP 435</a>.  It has also been <a href=\"https://pypi.python.org/pypi/enum34\">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.<br>\nTo use backports, do <code>$ pip install enum34</code>, installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>\n\n<pre><code>from enum import Enum\nAnimal = Enum('Animal', 'ant bee cat dog')\n</code></pre>\n\n<p>or equivalently:</p>\n\n<pre><code>class Animals(Enum):\n    ant = 1\n    bee = 2\n    cat = 3\n    dog = 4\n</code></pre>\n\n<hr>\n\n<p>In earlier versions, one way of accomplishing enums is:</p>\n\n<pre><code>def enum(**enums):\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>which is used like so:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')\n&gt;&gt;&gt; Numbers.ONE\n1\n&gt;&gt;&gt; Numbers.TWO\n2\n&gt;&gt;&gt; Numbers.THREE\n'three'\n</code></pre>\n\n<p>You can also easily support automatic enumeration with something like this:</p>\n\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>and used like so:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')\n&gt;&gt;&gt; Numbers.ZERO\n0\n&gt;&gt;&gt; Numbers.ONE\n1\n</code></pre>\n\n<p>Support for converting the values back to names can be added this way:</p>\n\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    reverse = dict((value, key) for key, value in enums.iteritems())\n    enums['reverse_mapping'] = reverse\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>This overwrites anything with that name, but it is useful for rendering your enums in output.  It will throw KeyError if the reverse mapping doesn't exist.  With the first example:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']\n'THREE'\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1399472209, 
      "creation_date": 1257650128, 
      "score": 1246, 
      "owner": {
        "user_id": 7980, 
        "profile_image": "https://www.gravatar.com/avatar/65b42c59ffe8d671459604f0f32f7a30?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6293, 
        "link": "http://stackoverflow.com/users/7980/alec-thomas", 
        "display_name": "Alec Thomas"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1399472209, 
      "answer_id": 1695250
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>So, I agree. Let's not enforce type safety in Python, but I would like to protect myself from silly mistakes. So what do we think about this?</p>\n\n<pre><code>class Animal(object):\n    values = ['Horse','Dog','Cat']\n\n    class __metaclass__(type):\n        def __getattr__(self, name):\n            return self.values.index(name)\n</code></pre>\n\n<p>It keeps me from value-collision in defining my enums.</p>\n\n<pre><code>&gt;&gt;&gt; Animal.Cat\n2\n</code></pre>\n\n<p>There's another handy advantage: really fast reverse lookups:</p>\n\n<pre><code>def name_of(self, i):\n    return self.values[i]\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1398727447, 
      "creation_date": 1288825374, 
      "score": 34, 
      "owner": {
        "user_id": 133934, 
        "profile_image": "https://www.gravatar.com/avatar/cf9afa49f786d6c9e354cca3fa9ed165?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 337, 
        "link": "http://stackoverflow.com/users/133934/royal", 
        "accept_rate": 50, 
        "display_name": "royal"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1398727447, 
      "answer_id": 4092436
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>The best solution for you would depend on what you require from your <em>fake</em> <strong><code>enum</code></strong>.</p>\n\n<p><strong>Simple enum:</strong></p>\n\n<p>If you need the <strong><code>enum</code></strong> as only a list of <em>names</em> identifying different <em>items</em>, the solution by <strong>Mark Harrison</strong> (above) is great:</p>\n\n<pre><code>Pen, Pencil, Eraser = range(0, 3)\n</code></pre>\n\n<p>Using a <strong><code>range</code></strong> also allows you to set any <em>starting value</em>:</p>\n\n<pre><code>Pen, Pencil, Eraser = range(9, 12)\n</code></pre>\n\n<p>In addition to the above, if you also require that the items belong to a <em>container</em> of some sort, then embed them in a class:</p>\n\n<pre><code>class Stationery:\n    Pen, Pencil, Eraser = range(0, 3)\n</code></pre>\n\n<p>To use the enum item, you would now need to use the container name and the item name:</p>\n\n<pre><code>stype = Stationery.Pen\n</code></pre>\n\n<p><strong>Complex enum:</strong></p>\n\n<p>For long lists of enum or more complicated uses of enum, these solutions will not suffice. You could look to the recipe by Will Ware for <em>Simulating Enumerations in Python</em> published in the <em>Python Cookbook</em>. An online version of that is available <a href=\"http://code.activestate.com/recipes/67107/\">here</a>.</p>\n\n<p><strong>More info:</strong></p>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-0354/\"><em>PEP 354: Enumerations in Python</em></a> has the interesting details of a proposal for enum in Python and why it was rejected.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1398338758, 
      "creation_date": 1254883653, 
      "score": 75, 
      "owner": {
        "user_id": 1630, 
        "profile_image": "https://www.gravatar.com/avatar/e656e8a79ae5a416f0c3d4de38d302b1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 19192, 
        "link": "http://stackoverflow.com/users/1630/ashwin", 
        "accept_rate": 68, 
        "display_name": "Ashwin"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1398338758, 
      "answer_id": 1529241
    }, 
    {
      "community_owned_date": 1396043070, 
      "body": "<p>Keep it simple:</p>\n\n<pre><code>class Enum(object): \n    def __init__(self, tupleList):\n            self.tupleList = tupleList\n\n    def __getattr__(self, name):\n            return self.tupleList.index(name)\n</code></pre>\n\n<p>Than:</p>\n\n<pre><code>DIRECTION = Enum(('UP', 'DOWN', 'LEFT', 'RIGHT'))\nDIRECTION.DOWN\n1\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1396043070, 
      "creation_date": 1396043070, 
      "score": 2, 
      "owner": {
        "user_id": 518879, 
        "profile_image": "https://www.gravatar.com/avatar/b0b5c3658ab0cf0f42e6eea42e80e1e7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 435, 
        "link": "http://stackoverflow.com/users/518879/danger89", 
        "display_name": "danger89"
      }, 
      "is_accepted": false, 
      "answer_id": 22723724
    }, 
    {
      "community_owned_date": 1395077695, 
      "body": "<p>Here is a nice Python recipe that I found here: <a href=\"http://code.activestate.com/recipes/577024-yet-another-enum-for-python/\" rel=\"nofollow\">http://code.activestate.com/recipes/577024-yet-another-enum-for-python/</a></p>\n\n<pre><code>def enum(typename, field_names):\n    \"Create a new enumeration type\"\n\n    if isinstance(field_names, str):\n        field_names = field_names.replace(',', ' ').split()\n    d = dict((reversed(nv) for nv in enumerate(field_names)), __slots__ = ())\n    return type(typename, (object,), d)()\n</code></pre>\n\n<p>Example Usage:</p>\n\n<pre><code>STATE = enum('STATE', 'GET_QUIZ, GET_VERSE, TEACH')\n</code></pre>\n\n<p>More details can be found on the recipe page.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1395077695, 
      "creation_date": 1395077695, 
      "score": 1, 
      "owner": {
        "user_id": 569085, 
        "profile_image": "https://www.gravatar.com/avatar/5852883f1f8dec3c8ffd38034d80ba9f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1558, 
        "link": "http://stackoverflow.com/users/569085/mohammad-rafay-aleem", 
        "accept_rate": 70, 
        "display_name": "Mohammad Rafay Aleem"
      }, 
      "is_accepted": false, 
      "answer_id": 22461315
    }, 
    {
      "community_owned_date": 1386769741, 
      "body": "<p>From python 3.4 there will be official support for enums. You can find documentation and examples <a href=\"http://docs.python.org/3.4/library/enum.html\" rel=\"nofollow\">here on python 3.4 docs page</a>.</p>\n\n<blockquote>\n  <p>Enumerations are created using the class syntax, which makes them easy\n  to read and write. An alternative creation method is described in\n  Functional API. To define an enumeration, subclass Enum as follows:</p>\n</blockquote>\n\n<pre><code>from enum import Enum\nclass Color(Enum):\n     red = 1\n     green = 2\n     blue = 3\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1387451431, 
      "creation_date": 1386769741, 
      "score": 2, 
      "owner": {
        "user_id": 257501, 
        "profile_image": "https://www.gravatar.com/avatar/9e2c6eddda9e041f0113e3f9f89d39e8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1236, 
        "link": "http://stackoverflow.com/users/257501/sa%c5%a1a-%c5%a0ijak", 
        "accept_rate": 62, 
        "display_name": "Sa\u0161a \u0160ijak"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387451431, 
      "answer_id": 20520884
    }, 
    {
      "community_owned_date": 1378354323, 
      "body": "<p>Didn't see this one in the list of answers, here is the one I whipped up. It allows the use of 'in' keyword and len() method:</p>\n\n<pre><code>class EnumTypeError(TypeError):\n    pass\n\nclass Enum(object):\n    \"\"\"\n    Minics enum type from different languages\n    Usage:\n    Letters = Enum(list('abc'))\n    a = Letters.a\n    print(a in Letters) # True\n    print(54 in Letters) # False\n    \"\"\"\n    def __init__(self, enums):\n        if isinstance(enums, dict):\n            self.__dict__.update(enums)\n        elif isinstance(enums, list) or isinstance(enums, tuple):\n            self.__dict__.update(**dict((v,k) for k,v in enumerate(enums)))\n        else:\n            raise EnumTypeError\n\n    def __contains__(self, key):\n        return key in self.__dict__.values()\n\n    def __len__(self):\n        return len(self.__dict__.values())\n\n\nif __name__ == '__main__':\n    print('Using a dictionary to create Enum:')\n    Letters = Enum(dict((v,k) for k,v in enumerate(list('abcde'))))\n    a = Letters.a\n    print('\\tIs a in e?', a in Letters)\n    print('\\tIs 54 in e?', 54 in Letters)\n    print('\\tLength of Letters enum:', len(Letters))\n\n    print('\\nUsing a list to create Enum:')\n    Letters = Enum(list('abcde'))\n    a = Letters.a\n    print('\\tIs a in e?', a in Letters)\n    print('\\tIs 54 in e?', 54 in Letters)\n    print('\\tLength of Letters enum:', len(Letters))\n\n    try:\n        # make sure we raise an exception if we pass an invalid arg\n        Failure = Enum('This is a Failure')\n        print('Failure')\n    except EnumTypeError:\n        print('Success!')\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Using a dictionary to create Enum:\n        Is a in e? True\n        Is 54 in e? False\n        Length of Letters enum: 5\n\nUsing a list to create Enum:\n        Is a in e? True\n        Is 54 in e? False\n        Length of Letters enum: 5\nSuccess!\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1378354323, 
      "creation_date": 1378354323, 
      "score": 0, 
      "owner": {
        "user_id": 926217, 
        "profile_image": "https://www.gravatar.com/avatar/1b6426ef0b46294125e77b167cfcf51f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 103, 
        "link": "http://stackoverflow.com/users/926217/david", 
        "accept_rate": 70, 
        "display_name": "David"
      }, 
      "is_accepted": false, 
      "answer_id": 18627613
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Here is what I use:</p>\n\n<pre><code>class Enum(set):\n    def __getattr__(self, name):\n        if name in self:\n            return name\n        raise AttributeError\n</code></pre>\n\n<p>Here is its implementation:</p>\n\n<pre><code>Animals = Enum([\"DOG\", \"CAT\", \"HORSE\"])\n\nprint(Animals.DOG)\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1373011916, 
      "creation_date": 1265095306, 
      "score": 208, 
      "owner": {
        "user_id": 144408, 
        "profile_image": "https://www.gravatar.com/avatar/82b8a175360c38f03c2720547bafc4cf?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4163, 
        "link": "http://stackoverflow.com/users/144408/shahjapan", 
        "accept_rate": 77, 
        "display_name": "shahjapan"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1373011916, 
      "answer_id": 2182437
    }, 
    {
      "community_owned_date": 1371677447, 
      "body": "<p>Here's an approach with some different characteristics I find valuable:</p>\n\n<ul>\n<li>allows > and &lt; comparison based on order in enum, not lexical order</li>\n<li>can address item by name, property or index: x.a, x['a'] or x[0]</li>\n<li>supports slicing operations like [:] or [-1]</li>\n</ul>\n\n<p>and most importantly <strong>prevents comparisons between enums of different types</strong>!</p>\n\n<p>Based closely on <a href=\"http://code.activestate.com/recipes/413486-first-class-enums-in-python\" rel=\"nofollow\">http://code.activestate.com/recipes/413486-first-class-enums-in-python</a>.</p>\n\n<p>Many doctests included here to illustrate what's different about this approach.</p>\n\n<pre><code>def enum(*names):\n    \"\"\"\nSYNOPSIS\n    Well-behaved enumerated type, easier than creating custom classes\n\nDESCRIPTION\n    Create a custom type that implements an enumeration.  Similar in concept\n    to a C enum but with some additional capabilities and protections.  See\n    http://code.activestate.com/recipes/413486-first-class-enums-in-python/.\n\nPARAMETERS\n    names       Ordered list of names.  The order in which names are given\n                will be the sort order in the enum type.  Duplicate names\n                are not allowed.  Unicode names are mapped to ASCII.\n\nRETURNS\n    Object of type enum, with the input names and the enumerated values.\n\nEXAMPLES\n    &gt;&gt;&gt; letters = enum('a','e','i','o','u','b','c','y','z')\n    &gt;&gt;&gt; letters.a &lt; letters.e\n    True\n\n    ## index by property\n    &gt;&gt;&gt; letters.a\n    a\n\n    ## index by position\n    &gt;&gt;&gt; letters[0]\n    a\n\n    ## index by name, helpful for bridging string inputs to enum\n    &gt;&gt;&gt; letters['a']\n    a\n\n    ## sorting by order in the enum() create, not character value\n    &gt;&gt;&gt; letters.u &lt; letters.b\n    True\n\n    ## normal slicing operations available\n    &gt;&gt;&gt; letters[-1]\n    z\n\n    ## error since there are not 100 items in enum\n    &gt;&gt;&gt; letters[99]\n    Traceback (most recent call last):\n        ...\n    IndexError: tuple index out of range\n\n    ## error since name does not exist in enum\n    &gt;&gt;&gt; letters['ggg']\n    Traceback (most recent call last):\n        ...\n    ValueError: tuple.index(x): x not in tuple\n\n    ## enums must be named using valid Python identifiers\n    &gt;&gt;&gt; numbers = enum(1,2,3,4)\n    Traceback (most recent call last):\n        ...\n    AssertionError: Enum values must be string or unicode\n\n    &gt;&gt;&gt; a = enum('-a','-b')\n    Traceback (most recent call last):\n        ...\n    TypeError: Error when calling the metaclass bases\n        __slots__ must be identifiers\n\n    ## create another enum\n    &gt;&gt;&gt; tags = enum('a','b','c')\n    &gt;&gt;&gt; tags.a\n    a\n    &gt;&gt;&gt; letters.a\n    a\n\n    ## can't compare values from different enums\n    &gt;&gt;&gt; letters.a == tags.a\n    Traceback (most recent call last):\n        ...\n    AssertionError: Only values from the same enum are comparable\n\n    &gt;&gt;&gt; letters.a &lt; tags.a\n    Traceback (most recent call last):\n        ...\n    AssertionError: Only values from the same enum are comparable\n\n    ## can't update enum after create\n    &gt;&gt;&gt; letters.a = 'x'\n    Traceback (most recent call last):\n        ...\n    AttributeError: 'EnumClass' object attribute 'a' is read-only\n\n    ## can't update enum after create\n    &gt;&gt;&gt; del letters.u\n    Traceback (most recent call last):\n        ...\n    AttributeError: 'EnumClass' object attribute 'u' is read-only\n\n    ## can't have non-unique enum values\n    &gt;&gt;&gt; x = enum('a','b','c','a')\n    Traceback (most recent call last):\n        ...\n    AssertionError: Enums must not repeat values\n\n    ## can't have zero enum values\n    &gt;&gt;&gt; x = enum()\n    Traceback (most recent call last):\n        ...\n    AssertionError: Empty enums are not supported\n\n    ## can't have enum values that look like special function names\n    ## since these could collide and lead to non-obvious errors\n    &gt;&gt;&gt; x = enum('a','b','c','__cmp__')\n    Traceback (most recent call last):\n        ...\n    AssertionError: Enum values beginning with __ are not supported\n\nLIMITATIONS\n    Enum values of unicode type are not preserved, mapped to ASCII instead.\n\n    \"\"\"\n    ## must have at least one enum value\n    assert names, 'Empty enums are not supported'\n    ## enum values must be strings\n    assert len([i for i in names if not isinstance(i, types.StringTypes) and not \\\n        isinstance(i, unicode)]) == 0, 'Enum values must be string or unicode'\n    ## enum values must not collide with special function names\n    assert len([i for i in names if i.startswith(\"__\")]) == 0,\\\n        'Enum values beginning with __ are not supported'\n    ## each enum value must be unique from all others\n    assert names == uniquify(names), 'Enums must not repeat values'\n\n    class EnumClass(object):\n        \"\"\" See parent function for explanation \"\"\"\n\n        __slots__ = names\n\n        def __iter__(self):\n            return iter(constants)\n\n        def __len__(self):\n            return len(constants)\n\n        def __getitem__(self, i):\n            ## this makes xx['name'] possible\n            if isinstance(i, types.StringTypes):\n                i = names.index(i)\n            ## handles the more normal xx[0]\n            return constants[i]\n\n        def __repr__(self):\n            return 'enum' + str(names)\n\n        def __str__(self):\n            return 'enum ' + str(constants)\n\n        def index(self, i):\n            return names.index(i)\n\n    class EnumValue(object):\n        \"\"\" See parent function for explanation \"\"\"\n\n        __slots__ = ('__value')\n\n        def __init__(self, value):\n            self.__value = value\n\n        value = property(lambda self: self.__value)\n\n        enumtype = property(lambda self: enumtype)\n\n        def __hash__(self):\n            return hash(self.__value)\n\n        def __cmp__(self, other):\n            assert self.enumtype is other.enumtype, 'Only values from the same enum are comparable'\n            return cmp(self.value, other.value)\n\n        def __invert__(self):\n            return constants[maximum - self.value]\n\n        def __nonzero__(self):\n            ## return bool(self.value)\n            ## Original code led to bool(x[0])==False, not correct\n            return True\n\n        def __repr__(self):\n            return str(names[self.value])\n\n    maximum = len(names) - 1\n    constants = [None] * len(names)\n    for i, each in enumerate(names):\n        val = EnumValue(i)\n        setattr(EnumClass, each, val)\n        constants[i] = val\n    constants = tuple(constants)\n    enumtype = EnumClass()\n    return enumtype\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1371677447, 
      "creation_date": 1371677447, 
      "score": 0, 
      "owner": {
        "user_id": 763269, 
        "profile_image": "https://www.gravatar.com/avatar/0c27474bcff67974d6a9fcb43cb7ba4e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3629, 
        "link": "http://stackoverflow.com/users/763269/chris-johnson", 
        "accept_rate": 80, 
        "display_name": "Chris Johnson"
      }, 
      "is_accepted": false, 
      "answer_id": 17201727
    }, 
    {
      "community_owned_date": 1368202142, 
      "body": "<p>On 2013-05-10, Guido agreed to accept <a href=\"http://www.python.org/dev/peps/pep-0435/\">PEP 435</a> into the Python 3.4 standard library. This means that Python finally has builtin support for enumerations!</p>\n\n<p>There is a backport available for Python 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4.  It's on Pypi as <a href=\"https://pypi.python.org/pypi/enum34\">enum34</a>.</p>\n\n<p>Declaration:</p>\n\n<pre><code>&gt;&gt;&gt; from enum import Enum\n&gt;&gt;&gt; class Color(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n</code></pre>\n\n<p>Representation:</p>\n\n<pre><code>&gt;&gt;&gt; print(Color.red)\nColor.red\n&gt;&gt;&gt; print(repr(Color.red))\n&lt;Color.red: 1&gt;\n</code></pre>\n\n<p>Iteration:</p>\n\n<pre><code>&gt;&gt;&gt; for color in Color:\n...   print(color)\n...\nColor.red\nColor.green\nColor.blue\n</code></pre>\n\n<p>Programmatic access:</p>\n\n<pre><code>&gt;&gt;&gt; Color(1)\nColor.red\n&gt;&gt;&gt; Color['blue']\nColor.blue\n</code></pre>\n\n<p>For more information, refer to <a href=\"http://www.python.org/dev/peps/pep-0435/\">the proposal</a>. Official documentation will probably follow soon.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1371554550, 
      "creation_date": 1368202142, 
      "score": 15, 
      "owner": {
        "user_id": 284318, 
        "profile_image": "https://www.gravatar.com/avatar/1e0588e345236881aff23040eb1d5dc3?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4562, 
        "link": "http://stackoverflow.com/users/284318/danilo-bargen", 
        "accept_rate": 91, 
        "display_name": "Danilo Bargen"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1371554550, 
      "answer_id": 16486444
    }, 
    {
      "community_owned_date": 1368202962, 
      "body": "<p>The new standard in Python is <a href=\"http://www.python.org/dev/peps/pep-0435/\" rel=\"nofollow\">PEP 435</a>, so an Enum class will be available in future versions of Python:</p>\n\n<pre><code>&gt;&gt;&gt; from enum import Enum\n</code></pre>\n\n<p>However to begin using it now you can install the <a href=\"http://bazaar.launchpad.net/~barry/flufl.enum/trunk/view/head:/flufl/enum/README.rst\" rel=\"nofollow\">original library</a> that motivated the PEP:</p>\n\n<pre><code>#sudo pip install flufl.enum   //or #sudo easy_install flufl.enum\n</code></pre>\n\n<p>Then you <a href=\"http://pythonhosted.org/flufl.enum/docs/using.html\" rel=\"nofollow\">can use it as per its online guide</a>:</p>\n\n<pre><code>&gt;&gt;&gt; from flufl.enum import Enum\n&gt;&gt;&gt; class Colors(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n&gt;&gt;&gt; for color in Colors: print color\nColors.red\nColors.green\nColors.blue\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1369002740, 
      "creation_date": 1368202962, 
      "score": 4, 
      "owner": {
        "user_id": 213307, 
        "profile_image": "https://www.gravatar.com/avatar/8aeadcc3aa99914bfbdba9efe9bb682a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 928, 
        "link": "http://stackoverflow.com/users/213307/riaz-rizvi", 
        "display_name": "Riaz Rizvi"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1369002740, 
      "answer_id": 16486681
    }, 
    {
      "community_owned_date": 1324520164, 
      "body": "<p>I have had occasion to need of an Enum class, for the purpose of decoding a binary file format. The features I happened to want is concise enum definition, the ability to freely create instances of the enum by either integer value or string, and a useful <code>repr</code>esentation.  Here's what I ended up with:</p>\n\n<pre><code>&gt;&gt;&gt; class Enum(int):\n...     def __new__(cls, value):\n...         if isinstance(value, str):\n...             return getattr(cls, value)\n...         elif isinstance(value, int):\n...             return cls.__index[value]\n...     def __str__(self): return self.__name\n...     def __repr__(self): return \"%s.%s\" % (type(self).__name__, self.__name)\n...     class __metaclass__(type):\n...         def __new__(mcls, name, bases, attrs):\n...             attrs['__slots__'] = ['_Enum__name']\n...             cls = type.__new__(mcls, name, bases, attrs)\n...             cls._Enum__index = _index = {}\n...             for base in reversed(bases):\n...                 if hasattr(base, '_Enum__index'):\n...                     _index.update(base._Enum__index)\n...             # create all of the instances of the new class\n...             for attr in attrs.keys():\n...                 value = attrs[attr]\n...                 if isinstance(value, int):\n...                     evalue = int.__new__(cls, value)\n...                     evalue._Enum__name = attr\n...                     _index[value] = evalue\n...                     setattr(cls, attr, evalue)\n...             return cls\n... \n</code></pre>\n\n<p>A whimsical example of using it:</p>\n\n<pre><code>&gt;&gt;&gt; class Citrus(Enum):\n...     Lemon = 1\n...     Lime = 2\n... \n&gt;&gt;&gt; Citrus.Lemon\nCitrus.Lemon\n&gt;&gt;&gt; \n&gt;&gt;&gt; Citrus(1)\nCitrus.Lemon\n&gt;&gt;&gt; Citrus(5)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 6, in __new__\nKeyError: 5\n&gt;&gt;&gt; class Fruit(Citrus):\n...     Apple = 3\n...     Banana = 4\n... \n&gt;&gt;&gt; Fruit.Apple\nFruit.Apple\n&gt;&gt;&gt; Fruit.Lemon\nCitrus.Lemon\n&gt;&gt;&gt; Fruit(1)\nCitrus.Lemon\n&gt;&gt;&gt; Fruit(3)\nFruit.Apple\n&gt;&gt;&gt; \"%d %s %r\" % ((Fruit.Apple,)*3)\n'3 Apple Fruit.Apple'\n&gt;&gt;&gt; Fruit(1) is Citrus.Lemon\nTrue\n</code></pre>\n\n<p>Key features:</p>\n\n<ul>\n<li><code>str()</code>, <code>int()</code> and <code>repr()</code> all produce the most useful output possible, respectively the name of the enumartion, its integer value, and a Python expression that evaluates back to the enumeration.</li>\n<li>Enumerated values returned by the constructor are limited strictly to the predefined values, no accidental enum values.</li>\n<li>Enumerated values are singletons; they can be strictly compared with <code>is</code></li>\n</ul>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368904010, 
      "creation_date": 1324520164, 
      "score": 5, 
      "owner": {
        "user_id": 65696, 
        "profile_image": "https://www.gravatar.com/avatar/d8da959b2a586b4a147604e6f534a9fe?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 64003, 
        "link": "http://stackoverflow.com/users/65696/ifloop", 
        "accept_rate": 85, 
        "display_name": "IfLoop"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368904010, 
      "answer_id": 8598742
    }, 
    {
      "community_owned_date": 1353417526, 
      "body": "<p>I like to use lists or sets as enumerations. For example:</p>\n\n<pre><code>&gt;&gt;&gt; packet_types = ['INIT', 'FINI', 'RECV', 'SEND']\n&gt;&gt;&gt; packet_types.index('INIT')\n0\n&gt;&gt;&gt; packet_types.index('FINI')\n1\n&gt;&gt;&gt;\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368871176, 
      "creation_date": 1353417526, 
      "score": 0, 
      "owner": {
        "user_id": 1207615, 
        "profile_image": "https://www.gravatar.com/avatar/4729094a2350e15608fe610d944f8ff0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 453, 
        "link": "http://stackoverflow.com/users/1207615/jah", 
        "accept_rate": 86, 
        "display_name": "Jah"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368871176, 
      "answer_id": 13474078
    }, 
    {
      "community_owned_date": 1340318635, 
      "body": "<p>A variant (with support to get an enum value's name) to <a href=\"http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python/1695250#1695250\">Alec Thomas's neat answer</a>:</p>\n\n<pre><code>class EnumBase(type):\n    def __init__(self, name, base, fields):\n        super(EnumBase, self).__init__(name, base, fields)\n        self.__mapping = dict((v, k) for k, v in fields.iteritems())\n    def __getitem__(self, val):\n        return self.__mapping[val]\n\ndef enum(*seq, **named):\n    enums = dict(zip(seq, range(len(seq))), **named)\n    return EnumBase('Enum', (), enums)\n\nNumbers = enum(ONE=1, TWO=2, THREE='three')\nprint Numbers.TWO\nprint Numbers[Numbers.ONE]\nprint Numbers[2]\nprint Numbers['three']\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368871137, 
      "creation_date": 1340318635, 
      "score": 1, 
      "owner": {
        "user_id": 545299, 
        "profile_image": "https://www.gravatar.com/avatar/ff751b1f5cf8508f66d7354a6f779d42?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 382, 
        "link": "http://stackoverflow.com/users/545299/oxdeadbeef", 
        "accept_rate": 60, 
        "display_name": "Oxdeadbeef"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368871137, 
      "answer_id": 11147900
    }, 
    {
      "community_owned_date": 1333507416, 
      "body": "<p>I use a metaclass to implement an enumeration (in my thought, it is a const). Here is the code:</p>\n\n<pre><code>class ConstMeta(type):\n    '''\n    Metaclass for some class that store constants\n    '''\n    def __init__(cls, name, bases, dct):\n        '''\n        init class instance\n        '''\n        def static_attrs():\n            '''\n            @rtype: (static_attrs, static_val_set)\n            @return: Static attributes in dict format and static value set\n            '''\n            import types\n            attrs = {}\n            val_set = set()\n            #Maybe more\n            filter_names = set(['__doc__', '__init__', '__metaclass__', '__module__', '__main__'])\n            for key, value in dct.iteritems():\n                if type(value) != types.FunctionType and key not in filter_names:\n                    if len(value) != 2:\n                        raise NotImplementedError('not support for values that is not 2 elements!')\n                    #Check value[0] duplication.\n                    if value[0] not in val_set:\n                        val_set.add(value[0])\n                    else:\n                        raise KeyError(\"%s 's key: %s is duplicated!\" % (dict([(key, value)]), value[0]))\n                    attrs[key] = value\n            return attrs, val_set\n\n        attrs, val_set = static_attrs()\n        #Set STATIC_ATTRS to class instance so that can reuse\n        setattr(cls, 'STATIC_ATTRS', attrs)\n        setattr(cls, 'static_val_set', val_set)\n        super(ConstMeta, cls).__init__(name, bases, dct)\n\n    def __getattribute__(cls, name):\n        '''\n        Rewrite the special function so as to get correct attribute value\n        '''\n        static_attrs = object.__getattribute__(cls, 'STATIC_ATTRS')\n        if name in static_attrs:\n            return static_attrs[name][0]\n        return object.__getattribute__(cls, name)\n\n    def static_values(cls):\n        '''\n        Put values in static attribute into a list, use the function to validate value.\n        @return: Set of values\n        '''\n        return cls.static_val_set\n\n    def __getitem__(cls, key):\n        '''\n        Rewrite to make syntax SomeConstClass[key] works, and return desc string of related static value.\n        @return: Desc string of related static value\n        '''\n        for k, v in cls.STATIC_ATTRS.iteritems():\n            if v[0] == key:\n                return v[1]\n        raise KeyError('Key: %s does not exists in %s !' % (str(key), repr(cls)))\n\n\nclass Const(object):\n    '''\n    Base class for constant class.\n\n    @usage:\n\n    Definition: (must inherit from Const class!\n        &gt;&gt;&gt; class SomeConst(Const):\n        &gt;&gt;&gt;   STATUS_NAME_1 = (1, 'desc for the status1')\n        &gt;&gt;&gt;   STATUS_NAME_2 = (2, 'desc for the status2')\n\n    Invoke(base upper SomeConst class):\n    1) SomeConst.STATUS_NAME_1 returns 1\n    2) SomeConst[1] returns 'desc for the status1'\n    3) SomeConst.STATIC_ATTRS returns {'STATUS_NAME_1': (1, 'desc for the status1'), 'STATUS_NAME_2': (2, 'desc for the status2')}\n    4) SomeConst.static_values() returns set([1, 2])\n\n    Attention:\n    SomeCosnt's value 1, 2 can not be duplicated!\n    If WrongConst is like this, it will raise KeyError:\n    class WrongConst(Const):\n        STATUS_NAME_1 = (1, 'desc for the status1')\n        STATUS_NAME_2 = (1, 'desc for the status2')\n    '''\n    __metaclass__ = ConstMeta\n##################################################################\n#Const Base Class ends\n##################################################################\n\n\ndef main():\n    class STATUS(Const):\n        ERROR = (-3, '??')\n        OK = (0, '??')\n\n    print STATUS.ERROR\n    print STATUS.static_values()\n    print STATUS.STATIC_ATTRS\n\n    #Usage sample:\n    user_input = 1\n    #Validate input:\n    print user_input in STATUS.static_values()\n    #Template render like:\n    print '&lt;select&gt;'\n    for key, value in STATUS.STATIC_ATTRS.items():\n        print '&lt;option value=\"%s\"&gt;%s&lt;/option&gt;' % (value[0], value[1])\n    print '&lt;/select&gt;'\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368871083, 
      "creation_date": 1333507416, 
      "score": 0, 
      "owner": {
        "user_id": 544251, 
        "profile_image": "https://www.gravatar.com/avatar/e560e8cc9a7ae3c050d68da4f402502e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1580, 
        "link": "http://stackoverflow.com/users/544251/jianpx", 
        "accept_rate": 62, 
        "display_name": "jianpx"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368871083, 
      "answer_id": 10004274
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>I needed the possibility of having the enum values be floats (not just integers) for use in defining API's where the enum classes are part of the API. My requirements (and implementation) are in the blog post <em><a href=\"http://franktheblue.blogspot.com/2011/05/enums-in-python-more-flexible-and.html\" rel=\"nofollow\">Enums in Python: a more flexible and powerful implementation</a></em>.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870609, 
      "creation_date": 1307186646, 
      "score": 2, 
      "owner": {
        "user_id": 783877, 
        "profile_image": "https://www.gravatar.com/avatar/0cf7ff090cebc88c649222e92b40a898?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/783877/cameron-hayne", 
        "display_name": "Cameron Hayne"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870609, 
      "answer_id": 6236462
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>I like the <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\" rel=\"nofollow\">Java</a> enum, that's how I do it in Python:</p>\n\n<pre><code>def enum(clsdef):\n    class Enum(object):\n        __slots__=tuple([var for var in clsdef.__dict__ if isinstance((getattr(clsdef, var)), tuple) and not var.startswith('__')])\n\n        def __new__(cls, *args, **kwargs):\n            if not '_the_instance' in cls.__dict__:\n                cls._the_instance = object.__new__(cls, *args, **kwargs)\n            return cls._the_instance\n\n        def __init__(self):\n            clsdef.values=lambda cls, e=Enum: e.values()\n            clsdef.valueOf=lambda cls, n, e=self: e.valueOf(n)\n            for ordinal, key in enumerate(self.__class__.__slots__):\n                args=getattr(clsdef, key)\n                instance=clsdef(*args)\n                instance._name=key\n                instance._ordinal=ordinal\n                setattr(self, key, instance)\n\n        @classmethod\n        def values(cls):\n            if not hasattr(cls, '_values'):\n                cls._values=[getattr(cls, name) for name in cls.__slots__]\n            return cls._values\n\n        def valueOf(self, name):\n            return getattr(self, name)\n\n        def __repr__(self):\n            return ''.join(['&lt;class Enum (', clsdef.__name__, ') at ', str(hex(id(self))), '&gt;'])\n\n    return Enum()\n</code></pre>\n\n<p>Sample use:</p>\n\n<pre><code>i=2\n@enum\nclass Test(object):\n    A=(\"a\",1)\n    B=(\"b\",)\n    C=(\"c\",2)\n    D=tuple()\n    E=(\"e\",3)\n\n    while True:\n        try:\n            F, G, H, I, J, K, L, M, N, O=[tuple() for _ in range(i)]\n            break;\n        except ValueError:\n            i+=1\n\n    def __init__(self, name=\"default\", aparam=0):\n        self.name=name\n        self.avalue=aparam\n</code></pre>\n\n<p>All class variables are defined as a tuple, just like the constructor. So far, you can't use named arguments.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870470, 
      "creation_date": 1275669207, 
      "score": 0, 
      "owner": {
        "user_id": 358665, 
        "profile_image": "https://www.gravatar.com/avatar/e6fd7f65f21ca544ed8bcd2a20554c88?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/358665/daegga", 
        "display_name": "daegga"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870470, 
      "answer_id": 2976036
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Why must enumerations be ints? Unfortunately, I can't think of any good looking construct to produce this without changing the Python language, so I'll use strings:</p>\n\n<pre><code>class Enumerator(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        if self.name == other:\n            return True\n        return self is other\n\n    def __ne__(self, other):\n        if self.name != other:\n            return False\n        return self is other\n\n    def __repr__(self):\n        return 'Enumerator({0})'.format(self.name)\n\n    def __str__(self):\n        return self.name\n\nclass Enum(object):\n    def __init__(self, *enumerators):\n        for e in enumerators:\n            setattr(self, e, Enumerator(e))\n    def __getitem__(self, key):\n        return getattr(self, key)\n</code></pre>\n\n<p>Then again maybe it's even better now that we can naturally test against strings, for the sake of configuration files or other remote input.</p>\n\n<p>Example:</p>\n\n<pre><code>class Cow(object):\n    State = Enum(\n        'standing',\n        'walking',\n        'eating',\n        'mooing',\n        'sleeping',\n        'dead',\n        'dying'\n    )\n    state = State.standing\n\nIn [1]: from enum import Enum\n\nIn [2]: c = Cow()\n\nIn [3]: c2 = Cow()\n\nIn [4]: c.state, c2.state\nOut[4]: (Enumerator(standing), Enumerator(standing))\n\nIn [5]: c.state == c2.state\nOut[5]: True\n\nIn [6]: c.State.mooing\nOut[6]: Enumerator(mooing)\n\nIn [7]: c.State['mooing']\nOut[7]: Enumerator(mooing)\n\nIn [8]: c.state = Cow.State.dead\n\nIn [9]: c.state == c2.state\nOut[9]: False\n\nIn [10]: c.state == Cow.State.dead\nOut[10]: True\n\nIn [11]: c.state == 'dead'\nOut[11]: True\n\nIn [12]: c.state == Cow.State['dead']\nOut[11]: True\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870406, 
      "creation_date": 1273197903, 
      "score": 1, 
      "owner": {
        "user_id": 80243, 
        "profile_image": "https://www.gravatar.com/avatar/93ce59ea9096936b695d975bf4096e53?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6809, 
        "link": "http://stackoverflow.com/users/80243/l%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3n%cc%b2%cc%b3%cc%b3g%cc%b2%cc%b3%cc%b3p%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3k%cc%b2%cc%b3%cc%b3e%cc%b2%cc%b3%cc%b3", 
        "accept_rate": 46, 
        "display_name": "L\u0332\u0333o\u0332\u0333\u0333n\u0332\u0333\u0333g\u0332\u0333\u0333p\u0332\u0333o\u0332\u0333\u0333k\u0332\u0333\u0333e\u0332\u0333\u0333"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870406, 
      "answer_id": 2785738
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>The enum package from <a href=\"http://en.wikipedia.org/wiki/Python_Package_Index\" rel=\"nofollow\">PyPI</a> provides a robust implementation of enums. An earlier answer mentioned PEP 354; this was rejected but the proposal was implemented \n<a href=\"http://pypi.python.org/pypi/enum\" rel=\"nofollow\">http://pypi.python.org/pypi/enum</a>.</p>\n\n<p>Usage is easy and elegant:</p>\n\n<pre><code>&gt;&gt;&gt; from enum import Enum\n&gt;&gt;&gt; Colors = Enum('red', 'blue', 'green')\n&gt;&gt;&gt; shirt_color = Colors.green\n&gt;&gt;&gt; shirt_color = Colors[2]\n&gt;&gt;&gt; shirt_color &gt; Colors.red\nTrue\n&gt;&gt;&gt; shirt_color.index\n2\n&gt;&gt;&gt; str(shirt_color)\n'green'\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870342, 
      "creation_date": 1268779002, 
      "score": 2, 
      "owner": {
        "user_id": 189456, 
        "profile_image": "https://www.gravatar.com/avatar/c6ca9162e98fb50ab30f3171ca7031ec?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2551, 
        "link": "http://stackoverflow.com/users/189456/pythonic-metaphor", 
        "accept_rate": 88, 
        "display_name": "pythonic metaphor"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870342, 
      "answer_id": 2458660
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Following the Java like enum implementation proposed by Aaron Maenpaa, I came out with the following. The idea was to make it generic and parseable.</p>\n\n<pre><code>class Enum:\n    #'''\n    #Java like implementation for enums.\n    #\n    #Usage:\n    #class Tool(Enum): name = 'Tool'\n    #Tool.DRILL = Tool.register('drill')\n    #Tool.HAMMER = Tool.register('hammer')\n    #Tool.WRENCH = Tool.register('wrench')\n    #'''\n\n    name = 'Enum'    # Enum name\n    _reg = dict([])   # Enum registered values\n\n    @classmethod\n    def register(cls, value):\n        #'''\n        #Registers a new value in this enum.\n        #\n        #@param value: New enum value.\n        #\n        #@return: New value wrapper instance.\n        #'''\n        inst = cls(value)\n        cls._reg[value] = inst\n        return inst\n\n    @classmethod\n    def parse(cls, value):\n        #'''\n        #Parses a value, returning the enum instance.\n        #\n        #@param value: Enum value.\n        #\n        #@return: Value corresp instance.        \n        #'''\n        return cls._reg.get(value)    \n\n    def __init__(self, value):\n        #'''\n        #Constructor (only for internal use).\n        #'''\n        self.value = value\n\n    def __str__(self):\n        #'''\n        #str() overload.\n        #'''\n        return self.value\n\n    def __repr__(self):\n        #'''\n        #repr() overload.\n        #'''\n        return \"&lt;\" + self.name + \": \" + self.value + \"&gt;\"\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870228, 
      "creation_date": 1267820661, 
      "score": 0, 
      "owner": {
        "user_id": 287423, 
        "profile_image": "https://www.gravatar.com/avatar/c7237492f05a57f75c4987cbeef30a0d?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/287423/iobaixas", 
        "display_name": "iobaixas"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870228, 
      "answer_id": 2389722
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Use the following.</p>\n\n<pre><code>TYPE = {'EAN13':   u'EAN-13',\n        'CODE39':  u'Code 39',\n        'CODE128': u'Code 128',\n        'i25':     u'Interleaved 2 of 5',}\n\n&gt;&gt;&gt; TYPE.items()\n[('EAN13', u'EAN-13'), ('i25', u'Interleaved 2 of 5'), ('CODE39', u'Code 39'), ('CODE128', u'Code 128')]\n&gt;&gt;&gt; TYPE.keys()\n['EAN13', 'i25', 'CODE39', 'CODE128']\n&gt;&gt;&gt; TYPE.values()\n[u'EAN-13', u'Interleaved 2 of 5', u'Code 39', u'Code 128']\n</code></pre>\n\n<p>I used that for <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\" rel=\"nofollow\">Django</a> model choices, and it looks very pythonic. It is not really an Enum, but it does the job.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870155, 
      "creation_date": 1255947699, 
      "score": 0, 
      "owner": {
        "user_id": 186202, 
        "profile_image": "https://www.gravatar.com/avatar/48e87ebebf7bee2a0ca10aa2362795a6?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4860, 
        "link": "http://stackoverflow.com/users/186202/natim", 
        "accept_rate": 94, 
        "display_name": "Natim"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870155, 
      "answer_id": 1587932
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>It's funny, I just had a need for this the other day and I couldnt find an implementation worth using... so I wrote my own:</p>\n\n<pre><code>import functools\n\nclass EnumValue(object):\n    def __init__(self,name,value,type):\n        self.__value=value\n        self.__name=name\n        self.Type=type\n    def __str__(self):\n        return self.__name\n    def __repr__(self):#2.6 only... so change to what ever you need...\n        return '{cls}({0!r},{1!r},{2})'.format(self.__name,self.__value,self.Type.__name__,cls=type(self).__name__)\n\n    def __hash__(self):\n        return hash(self.__value)\n    def __nonzero__(self):\n        return bool(self.__value)\n    def __cmp__(self,other):\n        if isinstance(other,EnumValue):\n            return cmp(self.__value,other.__value)\n        else:\n            return cmp(self.__value,other)#hopefully their the same type... but who cares?\n    def __or__(self,other):\n        if other is None:\n            return self\n        elif type(self) is not type(other):\n            raise TypeError()\n        return EnumValue('{0.Name} | {1.Name}'.format(self,other),self.Value|other.Value,self.Type)\n    def __and__(self,other):\n        if other is None:\n            return self\n        elif type(self) is not type(other):\n            raise TypeError()\n        return EnumValue('{0.Name} &amp; {1.Name}'.format(self,other),self.Value&amp;other.Value,self.Type)\n    def __contains__(self,other):\n        if self.Value==other.Value:\n            return True\n        return bool(self&amp;other)\n    def __invert__(self):\n        enumerables=self.Type.__enumerables__\n        return functools.reduce(EnumValue.__or__,(enum for enum in enumerables.itervalues() if enum not in self))\n\n    @property\n    def Name(self):\n        return self.__name\n\n    @property\n    def Value(self):\n        return self.__value\n\nclass EnumMeta(type):\n    @staticmethod\n    def __addToReverseLookup(rev,value,newKeys,nextIter,force=True):\n        if value in rev:\n            forced,items=rev.get(value,(force,()) )\n            if forced and force: #value was forced, so just append\n                rev[value]=(True,items+newKeys)\n            elif not forced:#move it to a new spot\n                next=nextIter.next()\n                EnumMeta.__addToReverseLookup(rev,next,items,nextIter,False)\n                rev[value]=(force,newKeys)\n            else: #not forcing this value\n                next = nextIter.next()\n                EnumMeta.__addToReverseLookup(rev,next,newKeys,nextIter,False)\n                rev[value]=(force,newKeys)\n        else:#set it and forget it\n            rev[value]=(force,newKeys)\n        return value\n\n    def __init__(cls,name,bases,atts):\n        classVars=vars(cls)\n        enums = classVars.get('__enumerables__',None)\n        nextIter = getattr(cls,'__nextitr__',itertools.count)()\n        reverseLookup={}\n        values={}\n\n        if enums is not None:\n            #build reverse lookup\n            for item in enums:\n                if isinstance(item,(tuple,list)):\n                    items=list(item)\n                    value=items.pop()\n                    EnumMeta.__addToReverseLookup(reverseLookup,value,tuple(map(str,items)),nextIter)\n                else:\n                    value=nextIter.next()\n                    value=EnumMeta.__addToReverseLookup(reverseLookup,value,(str(item),),nextIter,False)#add it to the reverse lookup, but don't force it to that value\n\n            #build values and clean up reverse lookup\n            for value,fkeys in reverseLookup.iteritems():\n                f,keys=fkeys\n                for key in keys:\n                    enum=EnumValue(key,value,cls)\n                    setattr(cls,key,enum)\n                    values[key]=enum\n                reverseLookup[value]=tuple(val for val in values.itervalues() if val.Value == value)\n        setattr(cls,'__reverseLookup__',reverseLookup)\n        setattr(cls,'__enumerables__',values)\n        setattr(cls,'_Max',max([key for key in reverseLookup] or [0]))\n        return super(EnumMeta,cls).__init__(name,bases,atts)\n\n    def __iter__(cls):\n        for enum in cls.__enumerables__.itervalues():\n            yield enum\n    def GetEnumByName(cls,name):\n        return cls.__enumerables__.get(name,None)\n    def GetEnumByValue(cls,value):\n        return cls.__reverseLookup__.get(value,(None,))[0]\n\nclass Enum(object):\n    __metaclass__=EnumMeta\n    __enumerables__=None\n\nclass FlagEnum(Enum):\n    @staticmethod\n    def __nextitr__():\n        yield 0\n        for val in itertools.count():\n            yield 2**val\n\ndef enum(name,*args):\n    return EnumMeta(name,(Enum,),dict(__enumerables__=args))\n</code></pre>\n\n<p>Take it or leave it, it did what I needed it to do :)</p>\n\n<p>Use it like:</p>\n\n<pre><code>class Air(FlagEnum):\n    __enumerables__=('None','Oxygen','Nitrogen','Hydrogen')\n\nclass Mammals(Enum):\n    __enumerables__=('Bat','Whale',('Dog','Puppy',1),'Cat')\nBool = enum('Bool','Yes',('No',0))\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368870107, 
      "creation_date": 1224554909, 
      "score": 1, 
      "owner": {
        "user_id": 24730, 
        "profile_image": "https://www.gravatar.com/avatar/62ce3d1eb42259c30fa65e2178e212b8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1935, 
        "link": "http://stackoverflow.com/users/24730/jake", 
        "accept_rate": 100, 
        "display_name": "Jake"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368870107, 
      "answer_id": 220537
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Before PEP-435, Python didn't have an equivalent but you could implement your own.</p>\n\n<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>\n\n<pre><code>class Animal:\n    DOG = 1\n    CAT = 2\n\nx = Animal.DOG\n</code></pre>\n\n<hr>\n\n<p>In Python 3.4 (<a href=\"http://www.python.org/dev/peps/pep-0435/\">PEP 435</a>), you can make Enum the base class.  This gets you a little bit of extra functionality, described in the PEP.  For example, enum values are distinct from integers.</p>\n\n<pre><code>class Animal(Enum):\n    DOG = 1\n    CAT = 2\n\nprint(Animal.DOG)\n&lt;Animal.DOG: 1&gt;\n</code></pre>\n\n<hr>\n\n<p>If you don't want to type the values, use the following shortcut:</p>\n\n<pre><code>class Animal(Enum):\n    DOG, CAT = range(2)\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1368277085, 
      "creation_date": 1220198774, 
      "score": 478, 
      "owner": {
        "user_id": 3280, 
        "profile_image": "https://www.gravatar.com/avatar/0289cf5fb7dc48bc0d1237a779b8b107?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4030, 
        "link": "http://stackoverflow.com/users/3280/alexandru-nedelcu", 
        "accept_rate": 71, 
        "display_name": "Alexandru Nedelcu"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1368277085, 
      "answer_id": 36937
    }, 
    {
      "community_owned_date": 1366334180, 
      "body": "<p>While the original enum proposal, <a href=\"http://www.python.org/dev/peps/pep-0354/\" rel=\"nofollow\">PEP 354</a>, was rejected years ago, it keeps coming back up. Some kind of enum was intended to be added to 3.2, but it got pushed back to 3.3 and then forgotten. And now there's a <a href=\"http://www.python.org/dev/peps/pep-0435/\" rel=\"nofollow\">PEP 435</a> intended for inclusion in Python 3.4. The reference implementation of PEP 435 is <a href=\"http://pythonhosted.org/flufl.enum/docs/using.html\" rel=\"nofollow\"><code>flufl.enum</code></a>.</p>\n\n<p>As of April 2013, there seems to be a general consensus that <em>something</em> should be added to the standard library in 3.4\u2014as long as people can agree on what that \"something\" should be. That's the hard part. See the threads starting <a href=\"http://mail.python.org/pipermail/python-ideas/2013-January/019003.html\" rel=\"nofollow\">here</a> and <a href=\"http://mail.python.org/pipermail/python-ideas/2013-February/019332.html\" rel=\"nofollow\">here</a>, and a half dozen other threads in the early months of 2013.</p>\n\n<p>Meanwhile, every time this comes up, a slew of new designs and implementations appear on PyPI, ActiveState, etc., so if you don't like the FLUFL design, try a <a href=\"https://pypi.python.org/pypi?%3aaction=search&amp;term=enum&amp;submit=search\" rel=\"nofollow\">PyPI search</a>.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1366334180, 
      "creation_date": 1366334180, 
      "score": 2, 
      "owner": {
        "user_id": 908494, 
        "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 119081, 
        "link": "http://stackoverflow.com/users/908494/abarnert", 
        "accept_rate": 25, 
        "display_name": "abarnert"
      }, 
      "is_accepted": false, 
      "answer_id": 16095707
    }, 
    {
      "community_owned_date": 1365447532, 
      "body": "<h2>Python 2.7 and find_name()</h2>\n\n<p>Here is an easy-to-read implementation of the chosen idea with some helper methods, which perhaps are more Pythonic and cleaner to use than \"reverse_mapping\". Requires Python >= 2.7. </p>\n\n<p>To address some comments below, Enums are quite useful to prevent spelling mistakes in code, e.g. for state machines, error classifiers, etc.</p>\n\n<pre><code>def Enum(*sequential, **named):\n  \"\"\"Generate a new enum type. Usage example:\n\n  ErrorClass = Enum('STOP','GO')\n  print ErrorClass.find_name(ErrorClass.STOP)\n    = \"STOP\"\n  print ErrorClass.find_val(\"STOP\")\n    = 0\n  ErrorClass.FOO     # Raises AttributeError\n  \"\"\"\n  enums = { v:k for k,v in enumerate(sequential) } if not named else named\n\n  @classmethod\n  def find_name(cls, val):\n    result = [ k for k,v in cls.__dict__.iteritems() if v == val ]\n    if not len(result):\n        raise ValueError(\"Value %s not found in Enum\" % val)\n    return result[0]\n\n  @classmethod\n  def find_val(cls, n):\n    return getattr(cls, n)\n\n  enums['find_val'] = find_val\n  enums['find_name'] = find_name\n  return type('Enum', (), enums)\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1365447532, 
      "creation_date": 1365447532, 
      "score": 0, 
      "owner": {
        "user_id": 823602, 
        "profile_image": "https://www.gravatar.com/avatar/c159b9553ca232abe76970ce92ad12b6?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 851, 
        "link": "http://stackoverflow.com/users/823602/fds", 
        "display_name": "FDS"
      }, 
      "is_accepted": false, 
      "answer_id": 15886819
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<pre><code>def M_add_class_attribs(attribs):\n    def foo(name, bases, dict_):\n        for v, k in attribs:\n            dict_[k] = v\n        return type(name, bases, dict_)\n    return foo\n\ndef enum(*names):\n    class Foo(object):\n        __metaclass__ = M_add_class_attribs(enumerate(names))\n        def __setattr__(self, name, value):  # this makes it read-only\n            raise NotImplementedError\n    return Foo()\n</code></pre>\n\n<p>Use it like this:  </p>\n\n<pre><code>Animal = enum('DOG', 'CAT')\nAnimal.DOG # returns 0\nAnimal.CAT # returns 1\nAnimal.DOG = 2 # raises NotImplementedError\n</code></pre>\n\n<p>if you just want unique symbols and don't care about the values, replace this line:  </p>\n\n<pre><code>__metaclass__ = M_add_class_attribs(enumerate(names))\n</code></pre>\n\n<p>with this:</p>\n\n<pre><code>__metaclass__ = M_add_class_attribs((object(), name) for name in names)\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1359856671, 
      "creation_date": 1221911378, 
      "score": 24, 
      "owner": {
        "user_id": 18695, 
        "profile_image": "https://www.gravatar.com/avatar/09cc62e1582009bcfc0371f6a7a9dac1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 215, 
        "link": "http://stackoverflow.com/users/18695/user18695", 
        "display_name": "user18695"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1359856671, 
      "answer_id": 107973
    }, 
    {
      "community_owned_date": 1359642463, 
      "body": "<p>The solution that I usually use is this simple function to get an instance of a dynamically created class.</p>\n\n<pre><code>def enum(names):\n    \"Create a simple enumeration having similarities to C.\"\n    return type('enum', (), dict(map(reversed, enumerate(\n        names.replace(',', ' ').split())), __slots__=()))()\n</code></pre>\n\n<p>Using it is as simple as calling the function with a string having the names that you want to reference.</p>\n\n<pre><code>grade = enum('A B C D F')\nstate = enum('awake, sleeping, dead')\n</code></pre>\n\n<p>The values are just integers, so you can take advantage of that if desired (just like in the C language).</p>\n\n<pre><code>&gt;&gt;&gt; grade.A\n0\n&gt;&gt;&gt; grade.B\n1\n&gt;&gt;&gt; grade.F == 4\nTrue\n&gt;&gt;&gt; state.dead == 2\nTrue\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1359642463, 
      "creation_date": 1359642463, 
      "score": 1, 
      "owner": {
        "user_id": 216356, 
        "profile_image": "https://www.gravatar.com/avatar/dc105cdd75395154274f9da3d7612a9f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5689, 
        "link": "http://stackoverflow.com/users/216356/noctis-skytower", 
        "accept_rate": 93, 
        "display_name": "Noctis Skytower"
      }, 
      "is_accepted": false, 
      "answer_id": 14628126
    }, 
    {
      "community_owned_date": 1328734798, 
      "body": "<p>An Enum class can be a one-liner.</p>\n\n<pre><code>class Enum(tuple): __getattr__ = tuple.index\n</code></pre>\n\n<p>How to use it (forward and reverse lookup, keys, values, items, etc.)</p>\n\n<pre><code>&gt;&gt;&gt; State = Enum(['Unclaimed', 'Claimed'])\n&gt;&gt;&gt; State.Claimed\n1\n&gt;&gt;&gt; State[1]\n'Claimed'\n&gt;&gt;&gt; State\n('Unclaimed', 'Claimed')\n&gt;&gt;&gt; range(len(State))\n[0, 1]\n&gt;&gt;&gt; [(k, State[k]) for k in range(len(State))]\n[(0, 'Unclaimed'), (1, 'Claimed')]\n&gt;&gt;&gt; [(k, getattr(State, k)) for k in State]\n[('Unclaimed', 0), ('Claimed', 1)]\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1328820393, 
      "creation_date": 1328734798, 
      "score": 31, 
      "owner": {
        "user_id": 653048, 
        "profile_image": "https://www.gravatar.com/avatar/dfc6dbd2c75a2b7db984850a694be1b7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 49, 
        "link": "http://stackoverflow.com/users/653048/zoetic", 
        "display_name": "Zoetic"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1328820393, 
      "answer_id": 9201329
    }, 
    {
      "community_owned_date": 1326866958, 
      "body": "<p>I really like Alec Thomas' solution (http://stackoverflow.com/a/1695250):</p>\n\n<pre><code>def enum(**enums):\n    '''simple constant \"enums\"'''\n    return type('Enum', (object,), enums)\n</code></pre>\n\n<p>It's elegant and clean looking, but it's just a function that creates a class with the specified attributes.</p>\n\n<p>With a little modification to the function, we can get it to act a little more 'enumy':</p>\n\n<blockquote>\n  <p>NOTE: I created the following examples by trying to reproduce the\n  behavior of pygtk's new style 'enums' (like Gtk.MessageType.WARNING)</p>\n</blockquote>\n\n<pre><code>def enum_base(t, **enums):\n    '''enums with a base class'''\n    T = type('Enum', (t,), {})\n    for key,val in enums.items():\n        setattr(T, key, T(val))\n\n    return T\n</code></pre>\n\n<p>This creates an enum based off a specified type. In addition to giving attribute access like the previous function, it behaves as you would expect an Enum to with respect to types.  It also inherits the base class.</p>\n\n<p>For example, integer enums:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum_base(int, ONE=1, TWO=2, THREE=3)\n&gt;&gt;&gt; Numbers.ONE\n1\n&gt;&gt;&gt; x = Numbers.TWO\n&gt;&gt;&gt; 10 + x\n12\n&gt;&gt;&gt; type(Numbers)\n&lt;type 'type'&gt;\n&gt;&gt;&gt; type(Numbers.ONE)\n&lt;class 'Enum'&gt;\n&gt;&gt;&gt; isinstance(x, Numbers)\nTrue\n</code></pre>\n\n<p>Another interesting thing that can be done with this method is customize specific behavior by overriding built-in methods:</p>\n\n<pre><code>def enum_repr(t, **enums):\n    '''enums with a base class and repr() output'''\n    class Enum(t):\n        def __repr__(self):\n            return '&lt;enum {0} of type Enum({1})&gt;'.format(self._name, t.__name__)\n\n    for key,val in enums.items():\n        i = Enum(val)\n        i._name = key\n        setattr(Enum, key, i)\n\n    return Enum\n\n\n\n&gt;&gt;&gt; Numbers = enum_repr(int, ONE=1, TWO=2, THREE=3)\n&gt;&gt;&gt; repr(Numbers.ONE)\n'&lt;enum ONE of type Enum(int)&gt;'\n&gt;&gt;&gt; str(Numbers.ONE)\n'1'\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1326866958, 
      "creation_date": 1326866958, 
      "score": 2, 
      "owner": {
        "user_id": 618895, 
        "profile_image": "https://www.gravatar.com/avatar/bb58ac95332a6e8d0cdc03397f5da9b0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1053, 
        "link": "http://stackoverflow.com/users/618895/bj0", 
        "accept_rate": 50, 
        "display_name": "bj0"
      }, 
      "is_accepted": false, 
      "answer_id": 8905914
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>This is the best one I have seen: \"First Class Enums in Python\"</p>\n\n<p><a href=\"http://code.activestate.com/recipes/413486/\">http://code.activestate.com/recipes/413486/</a></p>\n\n<p>It gives you a class, and the class contains all the enums. The enums can be compared to each other, but don't have any particular value; you can't use them as an integer value. (I resisted this at first because I am used to C enums, which are integer values. But if you can't use it as an integer, you can't use it as an integer by mistake so overall I think it is a win.) Each enum is a unique value. You can print enums, you can iterate over them, you can test that an enum value is \"in\" the enum. It's pretty complete and slick.</p>\n\n<p>Edit (cfi): The above link is not Python 3 compatible. Here's my port of enum.py to Python 3:</p>\n\n<pre><code>def cmp(a,b):\n   if a &lt; b: return -1\n   if b &lt; a: return 1\n   return 0\n\n\ndef Enum(*names):\n   ##assert names, \"Empty enums are not supported\" # &lt;- Don't like empty enums? Uncomment!\n\n   class EnumClass(object):\n      __slots__ = names\n      def __iter__(self):        return iter(constants)\n      def __len__(self):         return len(constants)\n      def __getitem__(self, i):  return constants[i]\n      def __repr__(self):        return 'Enum' + str(names)\n      def __str__(self):         return 'enum ' + str(constants)\n\n   class EnumValue(object):\n      __slots__ = ('__value')\n      def __init__(self, value): self.__value = value\n      Value = property(lambda self: self.__value)\n      EnumType = property(lambda self: EnumType)\n      def __hash__(self):        return hash(self.__value)\n      def __cmp__(self, other):\n         # C fans might want to remove the following assertion\n         # to make all enums comparable by ordinal value {;))\n         assert self.EnumType is other.EnumType, \"Only values from the same enum are comparable\"\n         return cmp(self.__value, other.__value)\n      def __lt__(self, other):   return self.__cmp__(other) &lt; 0\n      def __eq__(self, other):   return self.__cmp__(other) == 0\n      def __invert__(self):      return constants[maximum - self.__value]\n      def __nonzero__(self):     return bool(self.__value)\n      def __repr__(self):        return str(names[self.__value])\n\n   maximum = len(names) - 1\n   constants = [None] * len(names)\n   for i, each in enumerate(names):\n      val = EnumValue(i)\n      setattr(EnumClass, each, val)\n      constants[i] = val\n   constants = tuple(constants)\n   EnumType = EnumClass()\n   return EnumType\n\n\nif __name__ == '__main__':\n   print( '\\n*** Enum Demo ***')\n   print( '--- Days of week ---')\n   Days = Enum('Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su')\n   print( Days)\n   print( Days.Mo)\n   print( Days.Fr)\n   print( Days.Mo &lt; Days.Fr)\n   print( list(Days))\n   for each in Days:\n      print( 'Day:', each)\n   print( '--- Yes/No ---')\n   Confirmation = Enum('No', 'Yes')\n   answer = Confirmation.No\n   print( 'Your answer is not', ~answer)\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1318501777, 
      "creation_date": 1258512700, 
      "score": 8, 
      "owner": {
        "user_id": 166949, 
        "profile_image": "https://www.gravatar.com/avatar/f59da2cd4382555d85365f508abb2f3a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 27334, 
        "link": "http://stackoverflow.com/users/166949/steveha", 
        "accept_rate": 90, 
        "display_name": "steveha"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1318501777, 
      "answer_id": 1753340
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>This solution is a simple way of getting a class for the enumeration defined as a list (no more annoying integer assignments):</p>\n\n<p>enumeration.py:</p>\n\n<pre><code>import new\n\ndef create(class_name, names):\n    return new.classobj(\n        class_name, (object,), dict((y, x) for x, y in enumerate(names))\n    )\n</code></pre>\n\n<p>example.py:</p>\n\n<pre><code>import enumeration\n\nColors = enumeration.create('Colors', (\n    'red',\n    'orange',\n    'yellow',\n    'green',\n    'blue',\n    'violet',\n))\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1316310004, 
      "creation_date": 1316309214, 
      "score": 2, 
      "owner": {
        "user_id": 950809, 
        "profile_image": "https://www.gravatar.com/avatar/f9b634959264b1442a931dd15f354986?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/950809/michael-truog", 
        "display_name": "Michael Truog"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1316310004, 
      "answer_id": 7458935
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Another, very simple, implementation of an enum in Python, using <code>namedtuple</code>:</p>\n\n<pre><code>from collections import namedtuple\n\ndef enum(*keys):\n    return namedtuple('Enum', keys)(*keys)\n\nMyEnum = enum('FOO', 'BAR', 'BAZ')\n</code></pre>\n\n<p>or, alternatively,</p>\n\n<pre><code># With sequential number values\ndef enum(*keys):\n    return namedtuple('Enum', keys)(*range(len(keys)))\n\n# From a dict / keyword args\ndef enum(**kwargs):\n    return namedtuple('Enum', kwargs.keys())(*kwargs.values())\n</code></pre>\n\n<p>Like the method above that subclasses <code>set</code>, this allows:</p>\n\n<pre><code>'FOO' in MyEnum\nother = MyEnum.FOO\nassert other == MyEnum.FOO\n</code></pre>\n\n<p>But has more flexibility as it can have different keys and values. This allows</p>\n\n<pre><code>MyEnum.FOO &lt; MyEnum.BAR\n</code></pre>\n\n<p>to act as is expected if you use the version that fills in sequential number values.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1312703093, 
      "creation_date": 1312696261, 
      "score": 11, 
      "owner": {
        "user_id": 500584, 
        "profile_image": "https://www.gravatar.com/avatar/7f60965cd495837ba48051cd1b56b947?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 49656, 
        "link": "http://stackoverflow.com/users/500584/agf", 
        "display_name": "agf"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1312703093, 
      "answer_id": 6971002
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Here is a variant on <a href=\"http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python/1695250#1695250\">Alec Thomas's solution</a>:</p>\n\n<pre><code>def enum(*args, **kwargs):\n    return type('Enum', (), dict((y, x) for x, y in enumerate(args), **kwargs)) \n\nx = enum('POOH', 'TIGGER', 'EEYORE', 'ROO', 'PIGLET', 'RABBIT', 'OWL')\nassert x.POOH == 0\nassert x.TIGGER == 1\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1308073020, 
      "creation_date": 1308072589, 
      "score": 1, 
      "owner": {
        "user_id": 192092, 
        "profile_image": "https://www.gravatar.com/avatar/21622322d55072d980fbc48c4f1fa9c5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1416, 
        "link": "http://stackoverflow.com/users/192092/roy-hyunjin-han", 
        "display_name": "Roy Hyunjin Han"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1308073020, 
      "answer_id": 6347576
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>The typesafe enum pattern which was used in Java pre-JDK 5 has a\nnumber of advantages. Much like in Alexandru's answer, you create a\nclass and class level fields are the enum values; however, the enum\nvalues are instances of the class rather than small integers. This has\nthe advantage that your enum values don't inadvertently compare equal\nto small integers, you can control how they're printed, add arbitrary\nmethods if that's useful and make assertions using isinstance:</p>\n\n<pre><code>class Animal:\n   def __init__(self, name):\n       self.name = name\n\n   def __str__(self):\n       return self.name\n\n   def __repr__(self):\n       return \"&lt;Animal: %s&gt;\" % self\n\nAnimal.DOG = Animal(\"dog\")\nAnimal.CAT = Animal(\"cat\")\n\n&gt;&gt;&gt; x = Animal.DOG\n&gt;&gt;&gt; x\n&lt;Animal: dog&gt;\n&gt;&gt;&gt; x == 1\nFalse\n</code></pre>\n\n<hr>\n\n<p>A recent <a href=\"http://mail.python.org/pipermail/python-dev/2010-November/105873.html\">thread on python-dev</a> pointed out there are a couple of enum libraries in the wild, including:</p>\n\n<ul>\n<li><a href=\"http://packages.python.org/flufl.enum/docs/using.html\">flufl.enum</a></li>\n<li><a href=\"http://pypi.python.org/pypi/lazr.enum\">lazr.enum</a></li>\n<li>... and the imaginatively named <a href=\"http://pypi.python.org/pypi/enum/\">enum</a></li>\n</ul>\n", 
      "question_id": 36932, 
      "last_activity_date": 1291089382, 
      "creation_date": 1220285125, 
      "score": 61, 
      "owner": {
        "user_id": 2603, 
        "profile_image": "http://i.stack.imgur.com/NIuNK.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 41769, 
        "link": "http://stackoverflow.com/users/2603/aaron-maenpaa", 
        "accept_rate": 75, 
        "display_name": "Aaron Maenpaa"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1291089382, 
      "answer_id": 38092
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>I prefer to define enums in Python like so:</p>\n\n<pre><code>class Animal:\n  class Dog: pass\n  class Cat: pass\n\nx = Animal.Dog\n</code></pre>\n\n<p>It's more bug-proof than using integers since you don't have to worry about ensuring that the integers are unique (e.g. if you said Dog = 1 and Cat = 1 you'd be screwed).</p>\n\n<p>It's more bug-proof than using strings since you don't have to worry about typos (e.g.\nx == \"catt\" fails silently, but x == Animal.Catt is a runtime exception).</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1290996355, 
      "creation_date": 1290996355, 
      "score": 16, 
      "owner": {
        "user_id": 18446, 
        "profile_image": "https://www.gravatar.com/avatar/9b148ba202291626ddcd07f2f160c062?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4028, 
        "link": "http://stackoverflow.com/users/18446/mbac32768", 
        "accept_rate": 84, 
        "display_name": "mbac32768"
      }, 
      "is_accepted": false, 
      "answer_id": 4300343
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>If you need the numeric values, here's the quickest way:</p>\n\n<pre><code>dog, cat, rabbit = range(3)\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1277374420, 
      "creation_date": 1220214682, 
      "score": 121, 
      "owner": {
        "user_id": 116, 
        "profile_image": "https://www.gravatar.com/avatar/f79b395a801bf291b74e8bccea8e03f8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 86912, 
        "link": "http://stackoverflow.com/users/116/mark-harrison", 
        "accept_rate": 95, 
        "display_name": "Mark Harrison"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1277374420, 
      "answer_id": 37081
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<pre><code>def enum( *names ):\n\n    '''\n    Makes enum.\n    Usage:\n        E = enum( 'YOUR', 'KEYS', 'HERE' )\n        print( E.HERE )\n    '''\n\n    class Enum():\n        pass\n    for index, name in enumerate( names ):\n        setattr( Enum, name, index )\n    return Enum\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1274879654, 
      "creation_date": 1274879654, 
      "score": 0, 
      "owner": {
        "user_id": 350937, 
        "profile_image": "https://www.gravatar.com/avatar/945b1b7869371340530a06fc2dc9da89?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 401, 
        "link": "http://stackoverflow.com/users/350937/denis-ryzhkov", 
        "display_name": "Denis Ryzhkov"
      }, 
      "is_accepted": false, 
      "answer_id": 2913233
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>I had need of some symbolic constants in pyparsing to represent left and right associativity of binary operators.  I used class constants like this:</p>\n\n<pre><code># an internal class, not intended to be seen by client code\nclass _Constants(object):\n    pass\n\n\n# an enumeration of constants for operator associativity\nopAssoc = _Constants()\nopAssoc.LEFT = object()\nopAssoc.RIGHT = object()\n</code></pre>\n\n<p>Now when client code wants to use these constants, they can import the entire enum using:</p>\n\n<pre><code>import opAssoc from pyparsing\n</code></pre>\n\n<p>The enumerations are unique, they can be tested with 'is' instead of '==', they don't take up a big footprint in my code for a minor concept, and they are easily imported into the client code.  They don't support any fancy str() behavior, but so far that is in the <a href=\"http://c2.com/xp/YouArentGonnaNeedIt.html\" rel=\"nofollow\">YAGNI</a> category.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1271421644, 
      "creation_date": 1258491274, 
      "score": 1, 
      "owner": {
        "user_id": 165216, 
        "profile_image": "https://www.gravatar.com/avatar/7da5683418b0e1436cc13f43374773a5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 26714, 
        "link": "http://stackoverflow.com/users/165216/paul-mcguire", 
        "accept_rate": 100, 
        "display_name": "Paul McGuire"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1271421644, 
      "answer_id": 1751697
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Here is another one.  It seems somewhat similar to the general approach used by @Cipher.  The author called it yapenum, \"yet another Python enum\".</p>\n\n<p><a href=\"http://blog.bstpierre.org/yet-another-python-enum-module\" rel=\"nofollow\">http://blog.bstpierre.org/yet-another-python-enum-module</a></p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1258512573, 
      "creation_date": 1258512573, 
      "score": 1, 
      "owner": {
        "user_id": 166949, 
        "profile_image": "https://www.gravatar.com/avatar/f59da2cd4382555d85365f508abb2f3a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 27334, 
        "link": "http://stackoverflow.com/users/166949/steveha", 
        "accept_rate": 90, 
        "display_name": "steveha"
      }, 
      "is_accepted": false, 
      "answer_id": 1753328
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>What I use:</p>\n\n<pre><code>class Enum(object):\n    def __init__(self, names, separator=None):\n        self.names = names.split(separator)\n        for value, name in enumerate(self.names):\n            setattr(self, name.upper(), value)\n    def tuples(self):\n        return tuple(enumerate(self.names))\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>&gt;&gt;&gt; state = Enum('draft published retracted')\n&gt;&gt;&gt; state.DRAFT\n0\n&gt;&gt;&gt; state.RETRACTED\n2\n&gt;&gt;&gt; state.FOO\nTraceback (most recent call last):\n   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Enum' object has no attribute 'FOO'\n&gt;&gt;&gt; state.tuples()\n((0, 'draft'), (1, 'published'), (2, 'retracted'))\n</code></pre>\n\n<p>So this gives you integer constants like state.PUBLISHED and the two-tuples to use as choices in Django models.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1258487162, 
      "creation_date": 1233617993, 
      "score": 12, 
      "owner": {
        "display_name": "Luciano Ramalho", 
        "user_type": "does_not_exist"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1258487162, 
      "answer_id": 505457
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>You can take a look at the <a href=\"http://code.enthought.com/projects/traits/\" rel=\"nofollow\">traits</a> package. This gives you something like type safety and many other useful features.</p>\n\n<p>But it really depends on what you want to use such an enum for.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1234136389, 
      "creation_date": 1221828327, 
      "score": 1, 
      "owner": {
        "user_id": 11992, 
        "profile_image": "https://www.gravatar.com/avatar/09b743ba088c0bf7e07ee429a32acedc?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 9632, 
        "link": "http://stackoverflow.com/users/11992/nikow", 
        "accept_rate": 91, 
        "display_name": "nikow"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1234136389, 
      "answer_id": 101546
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Alexandru's suggestion of using class constants for enums works quite well. </p>\n\n<p>I also like to add a dictionary for each set of constants to lookup a human-readable string representation. </p>\n\n<p>This serves two purposes: a) it provides a simple way to pretty-print your enum and b) the dictionary logically groups the constants so that you can test for membership.</p>\n\n<pre><code>class Animal:    \n  TYPE_DOG = 1\n  TYPE_CAT = 2\n\n  type2str = {\n    TYPE_DOG: \"dog\",\n    TYPE_CAT: \"cat\"\n  }\n\n  def __init__(self, type_):\n    assert type_ in self.type2str.keys()\n    self._type = type_\n\n  def __repr__(self):\n    return \"&lt;%s type=%s&gt;\" % (\n        self.__class__.__name__, self.type2str[self._type].upper())\n</code></pre>\n", 
      "question_id": 36932, 
      "last_activity_date": 1221795463, 
      "creation_date": 1221795463, 
      "score": 3, 
      "owner": {
        "user_id": 18460, 
        "profile_image": "https://www.gravatar.com/avatar/afb82eaa9550a5ba8538bb926b854465?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/18460/rick-harris", 
        "display_name": "Rick Harris"
      }, 
      "is_accepted": false, 
      "answer_id": 99347
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>davidg recommends using dicts.  I'd go one step further and use sets:</p>\n\n<pre><code>months = set('January', 'February', ..., 'December')\n</code></pre>\n\n<p>Now you can test whether a value matches one of the values in the set like this:</p>\n\n<pre><code>if m in months:\n</code></pre>\n\n<p>like dF, though, I usually just use string constants in place of enums.</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1220325630, 
      "creation_date": 1220325630, 
      "score": 9, 
      "owner": {
        "user_id": 3286, 
        "profile_image": "https://www.gravatar.com/avatar/e9547c4d0ae669e49654df0b3b7c9702?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 279, 
        "link": "http://stackoverflow.com/users/3286/tuxedo", 
        "display_name": "tuxedo"
      }, 
      "is_accepted": false, 
      "answer_id": 38762
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Python doesn't have a built-in equivalent to <code>enum</code>, and other answers have ideas for implementing your own (you may also be interested in the <a href=\"http://code.activestate.com/recipes/67107/\">over the top version</a> in the Python cookbook).</p>\n\n<p>However, in situations where an <code>enum</code> would be called for in C, I usually end up <strong><em>just using simple strings</em></strong>: because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places.</p>\n\n<pre><code>ANIMALS = ['cat', 'dog', 'python']\n\ndef take_for_a_walk(animal):\n    assert animal in ANIMALS\n    ...\n</code></pre>\n\n<p>(One disadvantage compared to using a class is that you lose the benefit of autocomplete)</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1220275566, 
      "creation_date": 1220206250, 
      "score": 35, 
      "owner": {
        "user_id": 3002, 
        "profile_image": "https://www.gravatar.com/avatar/c91297e756fde7ca97d31f5d9acfaf90?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 31961, 
        "link": "http://stackoverflow.com/users/3002/df", 
        "accept_rate": 100, 
        "display_name": "dF."
      }, 
      "is_accepted": false, 
      "last_edit_date": 1220275566, 
      "answer_id": 37000
    }, 
    {
      "community_owned_date": 1316309214, 
      "body": "<p>Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:</p>\n\n<pre><code>months = {\n    'January': 1,\n    'February': 2,\n    ...\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>months = dict(\n    January=1,\n    February=2,\n    ...\n)\n</code></pre>\n\n<p>Then, you can use the symbolic name for the constants like this:</p>\n\n<pre><code>mymonth = months['January']\n</code></pre>\n\n<p>There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a \"symbolic\" (constant string) way to access the \nvalue.</p>\n\n<p>Edit: I like Alexandru's answer too!</p>\n", 
      "question_id": 36932, 
      "last_activity_date": 1220198993, 
      "creation_date": 1220198993, 
      "score": 11, 
      "owner": {
        "user_id": 2384, 
        "profile_image": "https://www.gravatar.com/avatar/6662bb196c1d1c2c4ac5cb8674e173e1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3193, 
        "link": "http://stackoverflow.com/users/2384/dguaraglia", 
        "display_name": "dguaraglia"
      }, 
      "is_accepted": false, 
      "answer_id": 36940
    }
  ], 
  "89228": [
    {
      "body": "<p>os.system is OK, but kind of dated.  It's also not very secure.  Instead, try subprocess.  subprocess does not call sh directly and is therefore more secure than os.system.</p>\n\n<p>Get more information at <a href=\"https://docs.python.org/library/subprocess.html\" rel=\"nofollow\">https://docs.python.org/library/subprocess.html</a></p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1414901373, 
      "creation_date": 1221702807, 
      "score": 8, 
      "owner": {
        "user_id": 14199, 
        "profile_image": "https://www.gravatar.com/avatar/ee8084e09b211c8c1981a5bc75088df0?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 809, 
        "link": "http://stackoverflow.com/users/14199/martin-w", 
        "display_name": "Martin W"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1414901373, 
      "answer_id": 89304
    }, 
    {
      "body": "<p><a href=\"https://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">https://docs.python.org/2/library/subprocess.html</a></p>\n\n<p>...or for a very simple command:</p>\n\n<pre><code>import os\nos.system('cat testfile')\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1414900855, 
      "creation_date": 1221702210, 
      "score": 3, 
      "owner": {
        "user_id": 4482, 
        "profile_image": "https://www.gravatar.com/avatar/6d420afab45ed2cc6e50dd5ae571434c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 49315, 
        "link": "http://stackoverflow.com/users/4482/ben-hoffstein", 
        "display_name": "Ben Hoffstein"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1414900855, 
      "answer_id": 89262
    }, 
    {
      "body": "<p>There is also <a href=\"http://plumbum.readthedocs.org/en/latest/\" rel=\"nofollow\">Plumbum</a></p>\n\n<pre><code>&gt;&gt;&gt; from plumbum import local\n&gt;&gt;&gt; ls = local[\"ls\"]\n&gt;&gt;&gt; ls\nLocalCommand(&lt;LocalPath /bin/ls&gt;)\n&gt;&gt;&gt; ls()\nu'build.py\\ndist\\ndocs\\nLICENSE\\nplumbum\\nREADME.rst\\nsetup.py\\ntests\\ntodo.txt\\n'\n&gt;&gt;&gt; notepad = local[\"c:\\\\windows\\\\notepad.exe\"]\n&gt;&gt;&gt; notepad()                                   # Notepad window pops up\nu''                                             # Notepad window is closed by user, command returns\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1412962873, 
      "creation_date": 1412962873, 
      "score": 1, 
      "owner": {
        "user_id": 394370, 
        "profile_image": "https://www.gravatar.com/avatar/4601548d4933216aa6bbe8215c66936e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 577, 
        "link": "http://stackoverflow.com/users/394370/stuckintheshuck", 
        "accept_rate": 91, 
        "display_name": "stuckintheshuck"
      }, 
      "is_accepted": false, 
      "answer_id": 26305089
    }, 
    {
      "body": "<p>A simple way is to use the os module:</p>\n\n<pre><code>import os\nos.system('ls')\n</code></pre>\n\n<p>Alternatively you can also use the subprocess module</p>\n\n<pre><code>import subprocess\nsubprocess.check_call('ls')\n</code></pre>\n\n<p>If you want the result to be stored in a variable try:</p>\n\n<pre><code>import subprocess\nr = subprocess.check_output('ls')\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1408916772, 
      "creation_date": 1408916772, 
      "score": 1, 
      "owner": {
        "user_id": 658247, 
        "profile_image": "https://www.gravatar.com/avatar/80366677e22e921ad193009c1fd25c4f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 101, 
        "link": "http://stackoverflow.com/users/658247/amehta", 
        "accept_rate": 60, 
        "display_name": "amehta"
      }, 
      "is_accepted": false, 
      "answer_id": 25476624
    }, 
    {
      "body": "<p>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</p>\n\n<ol>\n<li><p><code>os.system(\"some_command with args\")</code> passes the command and arguments to your system's shell.  This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection.  For example,<br>\n<code>os.system(\"some_command &lt; input_file | another_command &gt; output_file\")</code><br>\nHowever, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc.  On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.<br>\n<a href=\"https://docs.python.org/2/library/os.html#os.system\">see documentation</a></p></li>\n<li><p><code>stream = os.popen(\"some_command with args\")</code> will do the same thing as <code>os.system</code> except that it gives you a file-like object that you can use to access standard input/output for that process.  There are 3 other variants of popen that all handle the i/o slightly differently.  If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything.<br>\n<a href=\"https://docs.python.org/2/library/os.html#os.popen\">see documentation</a></p></li>\n<li><p>The <code>Popen</code> class of the <code>subprocess</code> module.  This is intended as a replacement for <code>os.popen</code> but has the downside of being slightly more complicated by virtue of being so comprehensive.  For example, you'd say</p>\n\n<pre><code>print subprocess.Popen(\"echo Hello World\", shell=True, stdout=PIPE).stdout.read()\n</code></pre>\n\n<p>instead of  </p>\n\n<pre><code>print os.popen(\"echo Hello World\").read()\n</code></pre>\n\n<p>but it is nice to have all of the options there in one unified class instead of 4 different popen functions.<br>\n<a href=\"https://docs.python.org/2/library/subprocess.html#popen-constructor\">see documentation</a></p></li>\n<li><p>The <code>call</code> function from the <code>subprocess</code> module.  This is basically just like the <code>Popen</code> class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code.  For example:</p>\n\n<pre><code>return_code = subprocess.call(\"echo Hello World\", shell=True)  \n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/subprocess.html#subprocess.call\">see documentation</a></p></li>\n<li><p>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</p></li>\n</ol>\n\n<p>The <code>subprocess</code> module should probably be what you use.</p>\n\n<p>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it <strong>there are serious security implications if</strong> any part of the string that you pass can not be fully trusted (for example if a user is entering some/any part of the string). If unsure only use these methods with constants. To give you a hint of the implications consider this code</p>\n\n<pre><code>print subprocess.Popen(\"echo %s \" % user_input, stdout=PIPE).stdout.read()\n</code></pre>\n\n<p>and imagine that the user enters \"my mama didnt love me &amp;&amp; rm -rf /\".</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1405509558, 
      "creation_date": 1221743506, 
      "score": 1225, 
      "owner": {
        "user_id": 1694, 
        "profile_image": "https://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 58644, 
        "link": "http://stackoverflow.com/users/1694/eli-courtwright", 
        "accept_rate": 94, 
        "display_name": "Eli Courtwright"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1405509558, 
      "answer_id": 92395
    }, 
    {
      "body": "<p>In case <strong>you need to go only with standard library</strong>, use <a href=\"http://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">subprocess module</a>:</p>\n\n<pre><code>from subprocess import call\ncall(['ls', '-l'])\n</code></pre>\n\n<p>It is the recommended standard way. However, more complicated tasks (pipes, output, input, etc.) can be tedious to construct and write.</p>\n\n<p><em>Note: <a href=\"https://docs.python.org/2/library/shlex.html#shlex.split\" rel=\"nofollow\">shlex.split</a> can help you to parse the command for <code>call</code> and other <code>subprocess</code> functions in case you don't want (or you can't!) provide them in form of lists:</em></p>\n\n<pre><code>import shlex\nfrom subprocess import call\ncall(shlex.split('ls -l'))\n</code></pre>\n\n<hr>\n\n<p>If <strong>you do not mind external dependencies</strong>, install and use <a href=\"https://pypi.python.org/pypi/sh\" rel=\"nofollow\">sh</a>:</p>\n\n<pre><code>from sh import ifconfig\nprint ifconfig('wlan0')\n</code></pre>\n\n<p>It is the best and the most developer-friendly <code>subprocess</code> wrapper I have seen. It is under active development, it has good documentation and you will be usually able to solve any of your tasks on just couple of lines and in a very readable form. The only thing you need to do to have it available is to type <code>pip install sh</code> in your terminal :-)</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1401729006, 
      "creation_date": 1365700673, 
      "score": 11, 
      "owner": {
        "user_id": 325365, 
        "profile_image": "https://www.gravatar.com/avatar/d4a28b46d4ac5f2cc601f588becf9f74?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1031, 
        "link": "http://stackoverflow.com/users/325365/honza-javorek", 
        "accept_rate": 81, 
        "display_name": "Honza Javorek"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1401729006, 
      "answer_id": 15954964
    }, 
    {
      "body": "<p>Shameless plug, I wrote a library for this :P\n<a href=\"https://github.com/houqp/shell.py\" rel=\"nofollow\">https://github.com/houqp/shell.py</a></p>\n\n<p>It's basically a wrapper for popen and shlex for now. It also supports piping commands so you can chain commands easier in Python. So you can do things like:</p>\n\n<pre><code>ex('echo hello shell.py') | \"awk '{print $2}'\"\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1398977341, 
      "creation_date": 1398977341, 
      "score": 1, 
      "owner": {
        "user_id": 929095, 
        "profile_image": "https://www.gravatar.com/avatar/de4bdd0982fc27bafaae60eef98d8bc1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 90, 
        "link": "http://stackoverflow.com/users/929095/houqp", 
        "display_name": "houqp"
      }, 
      "is_accepted": false, 
      "answer_id": 23416345
    }, 
    {
      "body": "<p>I tend to use <a href=\"https://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">subprocess</a> together with <a href=\"https://docs.python.org/2/library/shlex.html\" rel=\"nofollow\">shlex</a> (to handle escaping of quoted strings):</p>\n\n<pre><code>&gt;&gt;&gt; import subprocess, shlex\n&gt;&gt;&gt; command = 'ls -l \"/your/path/with spaces/\"'\n&gt;&gt;&gt; call_params = shlex.split(command)\n&gt;&gt;&gt; print call_params\n[\"ls\", \"-l\", \"/your/path/with spaces/\"]\n&gt;&gt;&gt; subprocess.call(call_params)\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1398868624, 
      "creation_date": 1398868624, 
      "score": 3, 
      "owner": {
        "user_id": 117268, 
        "profile_image": "https://www.gravatar.com/avatar/7960f43b3a2012753afecc0e4591217c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3779, 
        "link": "http://stackoverflow.com/users/117268/emil-stenstr%c3%b6m", 
        "accept_rate": 100, 
        "display_name": "Emil Stenstr&#246;m"
      }, 
      "is_accepted": false, 
      "answer_id": 23391049
    }, 
    {
      "body": "<p>Use <a href=\"https://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">subprocess.call</a>:</p>\n\n\n\n<pre class=\"lang-python prettyprint-override\"><code>from subprocess import call\n\n# using list\ncall([\"echo\", \"Hello\", \"world\"])\n\n# single string argument varies across platforms so better split it\ncall(\"echo Hello world\".split(\" \"))\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1397303903, 
      "creation_date": 1397303903, 
      "score": 0, 
      "owner": {
        "user_id": 950708, 
        "profile_image": "https://www.gravatar.com/avatar/70551e2e21c5e5a75f8559e4cb2ba826?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 356, 
        "link": "http://stackoverflow.com/users/950708/andrusr", 
        "display_name": "andrusr"
      }, 
      "is_accepted": false, 
      "answer_id": 23030076
    }, 
    {
      "body": "<p>I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer: <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"nofollow\">http://docs.python.org/library/subprocess.html</a></p>\n\n<pre><code>subprocess.call(['ping', 'localhost'])\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1396640768, 
      "creation_date": 1221702150, 
      "score": 42, 
      "owner": {
        "user_id": 6222, 
        "profile_image": "https://www.gravatar.com/avatar/3b38598391b9b2b687bd4a109bf08f03?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 635, 
        "link": "http://stackoverflow.com/users/6222/sirwart", 
        "display_name": "SirWart"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396640768, 
      "answer_id": 89255
    }, 
    {
      "body": "<p>After some research, I have the following code which works very well for me. It basically prints both stdout and stderr in real time. Hope it helps someone else who needs it.</p>\n\n<pre><code>stdout_result = 1\nstderr_result = 1\n\n\ndef stdout_thread(pipe):\n    global stdout_result\n    while True:\n        out = pipe.stdout.read(1)\n        stdout_result = pipe.poll()\n        if out == '' and stdout_result is not None:\n            break\n\n        if out != '':\n            sys.stdout.write(out)\n            sys.stdout.flush()\n\n\ndef stderr_thread(pipe):\n    global stderr_result\n    while True:\n        err = pipe.stderr.read(1)\n        stderr_result = pipe.poll()\n        if err == '' and stderr_result is not None:\n            break\n\n        if err != '':\n            sys.stdout.write(err)\n            sys.stdout.flush()\n\n\ndef exec_command(command, cwd=None):\n    if cwd is not None:\n        print '[' + ' '.join(command) + '] in ' + cwd\n    else:\n        print '[' + ' '.join(command) + ']'\n\n    p = subprocess.Popen(\n        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd\n    )\n\n    out_thread = threading.Thread(name='stdout_thread', target=stdout_thread, args=(p,))\n    err_thread = threading.Thread(name='stderr_thread', target=stderr_thread, args=(p,))\n\n    err_thread.start()\n    out_thread.start()\n\n    out_thread.join()\n    err_thread.join()\n\n    return stdout_result + stderr_result\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1394765945, 
      "creation_date": 1394765945, 
      "score": 2, 
      "owner": {
        "user_id": 746837, 
        "profile_image": "http://i.stack.imgur.com/ke6Zm.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 550, 
        "link": "http://stackoverflow.com/users/746837/jake-w", 
        "accept_rate": 100, 
        "display_name": "Jake W"
      }, 
      "is_accepted": false, 
      "answer_id": 22395328
    }, 
    {
      "body": "<p>Very simplest way to run any command and get result back:</p>\n\n<pre><code>from commands import getstatusoutput\n\ntry:\n    return getstatusoutput(\"ls -ltr\")\nexcept Exception, e:\n    return None\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1389034301, 
      "creation_date": 1343199110, 
      "score": 3, 
      "owner": {
        "user_id": 789213, 
        "profile_image": "https://www.gravatar.com/avatar/98fa9b6bfaf0a7c21e9ef848f3639c88?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 524, 
        "link": "http://stackoverflow.com/users/789213/underscore", 
        "accept_rate": 80, 
        "display_name": "underscore"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1389034301, 
      "answer_id": 11644161
    }, 
    {
      "body": "<p>There are a lot of different ways to run external commands in python, \nand all of them have their own plus sides and drawbacks.</p>\n\n<p>My colleagues and me have been writing python sysadmin tools, so we need to \nrun a lot of external commands, and sometimes you want them to block or run asynchronously,\ntime-out, update every second...</p>\n\n<p>There are also different ways of handling the return code and errors,\nand you might want to parse the output, and provide new input (in an <a href=\"http://en.wikipedia.org/wiki/Expect\" rel=\"nofollow\">expect</a> kind of style)\nOr you will need to redirect stdin, stdout and stderr to run in a different tty (e.g., when using screen)</p>\n\n<p>So you will probably have to write a lot of wrappers around the external command.\nSo here is a python module which we have written which can handle\nalmost anything you would want, and if not, it's very flexible so you can easily extend it:</p>\n\n<p><a href=\"https://github.com/hpcugent/vsc-base/blob/master/lib/vsc/utils/run.py\" rel=\"nofollow\">https://github.com/hpcugent/vsc-base/blob/master/lib/vsc/utils/run.py</a></p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1383920903, 
      "creation_date": 1366207806, 
      "score": 4, 
      "owner": {
        "user_id": 869482, 
        "profile_image": "https://www.gravatar.com/avatar/bbdebf9137340dfb14f7482c14246844?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1890, 
        "link": "http://stackoverflow.com/users/869482/jens-timmerman", 
        "display_name": "Jens Timmerman"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1383920903, 
      "answer_id": 16062355
    }, 
    {
      "body": "<p>I always use <code>fabric</code> for this things like:</p>\n\n<pre><code>from fabric.operations import local\nresult = local('ls', capture=True)\nprint \"Content:/n%s\" % (result, )\n</code></pre>\n\n<p>But this seem to be a good tool: <a href=\"https://github.com/amoffat/sh\"><code>sh</code> (Python subprocess interface)</a>.</p>\n\n<p>Look an example:</p>\n\n<pre><code>from sh import vgdisplay\nprint vgdisplay()\nprint vgdisplay('-v')\nprint vgdisplay(v=True)\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1374604103, 
      "creation_date": 1331597574, 
      "score": 20, 
      "owner": {
        "user_id": 361023, 
        "profile_image": "https://www.gravatar.com/avatar/db1370294dd5de25a4fdbdf15c454858?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 22228, 
        "link": "http://stackoverflow.com/users/361023/jorge-eduardo-cardona", 
        "accept_rate": 36, 
        "display_name": "Jorge Eduardo Cardona"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1374604103, 
      "answer_id": 9676642
    }, 
    {
      "body": "<p>Just to add to the discussion, if you include using a Python console, you can call external commands from ipython. While in the ipython prompt, you can call call shell commands by prefixing '!'. You can also combine python code with shell, and assign the output of shell scripts to python variables. </p>\n\n<p>For instance: </p>\n\n<pre><code>In [9]: mylist = !ls\n\nIn [10]: mylist\nOut[10]:\n['file1',\n 'file2',\n 'file3',]\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1371683914, 
      "creation_date": 1371683914, 
      "score": 3, 
      "owner": {
        "user_id": 1119779, 
        "profile_image": "https://www.gravatar.com/avatar/4cbc4488855b0421943b57de0a9018c2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 561, 
        "link": "http://stackoverflow.com/users/1119779/imagineerthis", 
        "accept_rate": 59, 
        "display_name": "imagineerThis"
      }, 
      "is_accepted": false, 
      "answer_id": 17202916
    }, 
    {
      "body": "<p>The <a href=\"http://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">subprocess module</a> described above by Eli is very powerful, but the syntax to make a bog-standard system call and inspect its output, is unnecessarily prolix.</p>\n\n<p>The easiest way to make a system call is with the <a href=\"http://docs.python.org/2/library/commands.html\" rel=\"nofollow\">commands module</a> (Linux only).</p>\n\n<pre><code>&gt; import commands\n&gt; commands.getstatusoutput(\"grep matter alice-in-wonderland.txt\")\n(0, \"'Then it doesn't matter which way you go,' said the Cat.\")\n</code></pre>\n\n<p>The first item in the tuple is the return code of the process. The second item is its standard output (and standard error, merged).</p>\n\n<hr>\n\n<p>The Python devs have 'deprecated' the commands module, but that doesn't mean you shouldn't use it. Only that they're not developing it anymore, which is okay, because it's already perfect (at its small but important function).</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1366306790, 
      "creation_date": 1366306790, 
      "score": 2, 
      "owner": {
        "user_id": 284795, 
        "profile_image": "https://www.gravatar.com/avatar/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 29045, 
        "link": "http://stackoverflow.com/users/284795/colonel-panic", 
        "accept_rate": 79, 
        "display_name": "Colonel Panic"
      }, 
      "is_accepted": false, 
      "answer_id": 16089689
    }, 
    {
      "body": "<p>without the output of result</p>\n\n<pre><code>import os\nos.system(\"your command here\")\n</code></pre>\n\n<p>with output of result</p>\n\n<pre><code>import commands\ncommands.getoutput(\"your command here\")\nor\ncommands.getstatusoutput(\"your command here\")\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1366247373, 
      "creation_date": 1366247373, 
      "score": 11, 
      "owner": {
        "user_id": 1275507, 
        "profile_image": "http://i.stack.imgur.com/A6GdN.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 126, 
        "link": "http://stackoverflow.com/users/1275507/zuckonit", 
        "accept_rate": 8, 
        "display_name": "Zuckonit"
      }, 
      "is_accepted": false, 
      "answer_id": 16072857
    }, 
    {
      "body": "<p>I recommend trying <a href=\"https://github.com/kennethreitz/envoy\">Envoy</a>. It's a wrapper for subprocess, which in turn <a href=\"http://docs.python.org/2/library/subprocess.html\">aims to replace</a> the older modules and functions. Envoy is subprocess for humans.</p>\n\n<p>Example usage from <a href=\"https://github.com/kennethreitz/envoy#readme\">the readme</a>:</p>\n\n<pre><code>&gt;&gt;&gt; r = envoy.run('git config', data='data to pipe in', timeout=2)\n\n&gt;&gt;&gt; r.status_code\n129\n&gt;&gt;&gt; r.std_out\n'usage: git config [options]'\n&gt;&gt;&gt; r.std_err\n''\n</code></pre>\n\n<p>Pipe stuff around too:</p>\n\n<pre><code>&gt;&gt;&gt; r = envoy.run('uptime | pbcopy')\n\n&gt;&gt;&gt; r.command\n'pbcopy'\n&gt;&gt;&gt; r.status_code\n0\n\n&gt;&gt;&gt; r.history\n[&lt;Response 'uptime'&gt;]\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1352999602, 
      "creation_date": 1352999602, 
      "score": 6, 
      "owner": {
        "user_id": 233098, 
        "profile_image": "https://www.gravatar.com/avatar/f6019c48fc1cec3f2a076560d0ec1467?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3342, 
        "link": "http://stackoverflow.com/users/233098/joe", 
        "accept_rate": 97, 
        "display_name": "Joe"
      }, 
      "is_accepted": false, 
      "answer_id": 13402722
    }, 
    {
      "body": "<p>This is how I run my commands. This code has everything you need pretty much</p>\n\n<pre><code>from subprocess import Popen, PIPE\ncmd = \"ls -l ~/\"\np = Popen(cmd , shell=True, stdout=PIPE, stderr=PIPE)\nout, err = p.communicate()\nprint \"Return code: \", p.returncode\nprint out.rstrip(), err.rstrip()\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1351403045, 
      "creation_date": 1351401241, 
      "score": 11, 
      "owner": {
        "user_id": 1755213, 
        "profile_image": "https://www.gravatar.com/avatar/ff4e000414299f8b2be019c1adedb93c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 127, 
        "link": "http://stackoverflow.com/users/1755213/usman-khan", 
        "display_name": "Usman Khan"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1351403045, 
      "answer_id": 13106558
    }, 
    {
      "body": "<p>I quite like <a href=\"http://shell-command.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">shell_command</a> for its simplicity.  It's built on top of the subprocess module.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1344882992, 
      "creation_date": 1344882992, 
      "score": 2, 
      "owner": {
        "user_id": 605022, 
        "profile_image": "https://www.gravatar.com/avatar/81f59a1f3fe798bb30205eed9fb5a5fb?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1246, 
        "link": "http://stackoverflow.com/users/605022/mdwhatcott", 
        "accept_rate": 100, 
        "display_name": "mdwhatcott"
      }, 
      "is_accepted": false, 
      "answer_id": 11940294
    }, 
    {
      "body": "<p>you can use Popen, then you can check procedure's status</p>\n\n<pre><code>from subprocess import Popen\n\nproc = Popen(['ls', '-l'])\nif proc.poll() is None:\n    proc.kill()\n</code></pre>\n\n<p>Check this out <a href=\"http://docs.python.org/library/subprocess.html#popen-objects\" rel=\"nofollow\">subprocess.Popen</a></p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1342451784, 
      "creation_date": 1342451784, 
      "score": 3, 
      "owner": {
        "user_id": 1417123, 
        "profile_image": "https://www.gravatar.com/avatar/6784b0e1cfe203931e87fc74bae33e87?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 121, 
        "link": "http://stackoverflow.com/users/1417123/admire", 
        "display_name": "admire"
      }, 
      "is_accepted": false, 
      "answer_id": 11507283
    }, 
    {
      "body": "<p>Look at the <a href=\"http://docs.python.org/library/subprocess.html\">subprocess module</a> in the stdlib:</p>\n\n<pre><code>from subprocess import call\ncall([\"ls\", \"-l\"])\n</code></pre>\n\n<p>The advantage of subprocess vs system is that it is more flexible (you can get the stdout, stderr, the \"real\" status code, better error handling, etc...). I think os.system is deprecated, too, or will be:</p>\n\n<p><a href=\"http://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module\">http://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module</a></p>\n\n<p>For quick/dirty/one time scripts, <code>os.system</code> is enough, though.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1340828871, 
      "creation_date": 1221701975, 
      "score": 1180, 
      "owner": {
        "user_id": 11465, 
        "profile_image": "https://www.gravatar.com/avatar/9820b5956634e5bbad7f4ed91a232822?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 24824, 
        "link": "http://stackoverflow.com/users/11465/david-cournapeau", 
        "accept_rate": 65, 
        "display_name": "David Cournapeau"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1340828871, 
      "answer_id": 89243
    }, 
    {
      "body": "<p><code>os.system</code> does not allow you to store results, so if you want to store results in some list or something <code>subprocess.call</code> works.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1339454735, 
      "creation_date": 1339453715, 
      "score": 4, 
      "owner": {
        "user_id": 1449929, 
        "profile_image": "https://www.gravatar.com/avatar/e76595a895880b2593d104d3ece3d86e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/1449929/saurabh-bangad", 
        "display_name": "Saurabh Bangad"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1339454735, 
      "answer_id": 10988365
    }, 
    {
      "body": "<p>Check \"pexpect\" python library, too.\nIt allows for interactive controlling of external programs/commands, even ssh, ftp, telnet etc. You can just type something like:</p>\n\n<pre><code>child = pexpect.spawn('ftp 192.168.0.24')\n\nchild.expect('(?i)name .*: ')\n\nchild.sendline('anonymous')\n\nchild.expect('(?i)password')\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1323989607, 
      "creation_date": 1286435344, 
      "score": 22, 
      "owner": {
        "user_id": 463023, 
        "profile_image": "https://www.gravatar.com/avatar/96d2d85cd13cc2c465d603793e8e3559?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 321, 
        "link": "http://stackoverflow.com/users/463023/athanassis", 
        "display_name": "athanassis"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1323989607, 
      "answer_id": 3879406
    }, 
    {
      "body": "<p>If what you need is the output from the command you are calling you can use subprocess.check_output since Python 2.7</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"])\n'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n</code></pre>\n", 
      "question_id": 89228, 
      "last_activity_date": 1304022569, 
      "creation_date": 1304022569, 
      "score": 14, 
      "owner": {
        "user_id": 181337, 
        "profile_image": "https://www.gravatar.com/avatar/471b3ac93ac8da3a68c8dd72c9225fcd?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3493, 
        "link": "http://stackoverflow.com/users/181337/f-c", 
        "accept_rate": 81, 
        "display_name": "F.C."
      }, 
      "is_accepted": false, 
      "answer_id": 5824565
    }, 
    {
      "body": "<p><code>subprocess.check_call</code> is convenient if you don't want to test return values. It throws an exception on any error.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1295378504, 
      "creation_date": 1295378504, 
      "score": 5, 
      "owner": {
        "user_id": 263998, 
        "profile_image": "https://www.gravatar.com/avatar/f39c51ab7728df9d23cdd3e0c72495e0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4247, 
        "link": "http://stackoverflow.com/users/263998/cdunn2001", 
        "display_name": "cdunn2001"
      }, 
      "is_accepted": false, 
      "answer_id": 4728086
    }, 
    {
      "body": "<p>Some hints on detaching the child process from the calling one (starting the child process in background).</p>\n\n<p>Suppose you want to start a long task from a CGI-script, that is the child process should live longer than the CGI-script execution process.</p>\n\n<p>The classical example from the subprocess module docs is:</p>\n\n<pre><code>import subprocess\nimport sys\n\n# some code here\n\npid = subprocess.Popen([sys.executable, \"longtask.py\"]) # call subprocess\n\n# some more code here\n</code></pre>\n\n<p>The idea here is that you do not want to wait in the line 'call subprocess' until the longtask.py is finished. But it is not clear what happens after the line 'some more code here' from the example.</p>\n\n<p>My target platform was freebsd, but the development was on windows, so I faced the problem on windows first.</p>\n\n<p>On windows (win xp), the parent process will not finish until the longtask.py has finished its work. It is not what you want in CGI-script. The problem is not specific to Python, in PHP community the problems are the same.</p>\n\n<p>The solution is to pass DETACHED_PROCESS flag to the underlying CreateProcess function in win API.\nIf you happen to have installed pywin32 you can import the flag from the win32process module, otherwise you should define it yourself:</p>\n\n<pre><code>DETACHED_PROCESS = 0x00000008\n\npid = subprocess.Popen([sys.executable, \"longtask.py\"],\n                       creationflags=DETACHED_PROCESS).pid\n</code></pre>\n\n<p>On freebsd we have another problem: when the parent process is finished, it finishes the child processes as well. And that is not what you want in CGI-script either. Some experiments showed that the problem seemed to be in sharing sys.stdout. And the working solution was the following:</p>\n\n<pre><code>pid = subprocess.Popen([sys.executable, \"longtask.py\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n</code></pre>\n\n<p>I have not checked the code on other platforms and do not know the reasons of the behaviour on freebsd. If anyone knows, please share your ideas. Googling on starting background processes in Python does not shed any light yet.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1270754739, 
      "creation_date": 1265969734, 
      "score": 56, 
      "owner": {
        "user_id": 68998, 
        "profile_image": "https://www.gravatar.com/avatar/d959037a9a17aba5d4d52b6ef4047dba?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 13220, 
        "link": "http://stackoverflow.com/users/68998/newtover", 
        "accept_rate": 85, 
        "display_name": "newtover"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1270754739, 
      "answer_id": 2251026
    }, 
    {
      "body": "<p>There is another difference here which is not mentioned above.</p>\n\n<p>subprocess.Popen executes the  as a subprocess. In my case, I need to execute file  which needs to communicate with another program . </p>\n\n<p>I tried subprocess, execution was successful. However  could not comm w/ .\neverything normal when I run both from the terminal.</p>\n\n<p>One more: \n(NOTE: kwrite behaves different from other apps. If you try below with firefox results will not be the same)</p>\n\n<p>If you try os.system(\"kwrite\"), program flow freezes until user closes kwrite. To overcome that I tried instead os.system(konsole -e kwrite). This time program continued to flow but kwrite became the subprocess of the konsole.</p>\n\n<p>Anyone runs the kwrite not being a subprocess (i.e. at the system monitor it must be appear at the leftmost edge of the tree)</p>\n\n<p>Thanks</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1262985090, 
      "creation_date": 1262985090, 
      "score": 4, 
      "owner": {
        "user_id": 246735, 
        "profile_image": "https://www.gravatar.com/avatar/2e443b254ea99386b5c466b0da2283bf?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/246735/atinc-delican", 
        "display_name": "Atinc Delican"
      }, 
      "is_accepted": false, 
      "answer_id": 2030768
    }, 
    {
      "body": "<p>I typically use:</p>\n\n<pre><code>import subprocess\n\np = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()\n</code></pre>\n\n<p>You are free to do what you want with the stdout data in the pipe.  In fact, you can simply omit those parameters (stdout= and stderr=) and it'll behave like os.system().</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1221762046, 
      "creation_date": 1221762046, 
      "score": 89, 
      "owner": {
        "user_id": 9188, 
        "profile_image": "https://www.gravatar.com/avatar/36f3e51a181e244316eaed3b6c450a47?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1927, 
        "link": "http://stackoverflow.com/users/9188/emmeff", 
        "display_name": "EmmEff"
      }, 
      "is_accepted": false, 
      "answer_id": 95246
    }, 
    {
      "body": "<p>os.system has been superceeded by the subprocess module. Use subproccess instead.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1221702236, 
      "creation_date": 1221702236, 
      "score": 6, 
      "owner": {
        "user_id": 17095, 
        "profile_image": "https://www.gravatar.com/avatar/e6d232754fc494bbb00e271a0e5ad538?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3043, 
        "link": "http://stackoverflow.com/users/17095/william-keller", 
        "display_name": "William Keller"
      }, 
      "is_accepted": false, 
      "answer_id": 89267
    }, 
    {
      "body": "<pre><code>import os\ncmd = 'ls -al'\nos.system(cmd)\n</code></pre>\n\n<p>If you want to return the results of the command you need <a href=\"http://oreilly.com/catalog/lpython/chapter/ch09.html\">os.popen</a>:</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1221701869, 
      "creation_date": 1221701869, 
      "score": 18, 
      "owner": {
        "user_id": 16203, 
        "profile_image": "https://www.gravatar.com/avatar/4cec80653b084d5c7316b701657dc650?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1077, 
        "link": "http://stackoverflow.com/users/16203/richard-franks", 
        "accept_rate": 80, 
        "display_name": "Richard Franks"
      }, 
      "is_accepted": false, 
      "answer_id": 89238
    }, 
    {
      "body": "<pre><code>import os\nos.system(\"your command\")\n</code></pre>\n\n<p>Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant docs on the 'os' and 'sys' modules. There are a bunch of functions (exec* , spawn*) that will do similar things.</p>\n", 
      "question_id": 89228, 
      "last_activity_date": 1221701844, 
      "creation_date": 1221701844, 
      "score": 9, 
      "owner": {
        "user_id": 3926, 
        "profile_image": "https://www.gravatar.com/avatar/7e5930b88f5aeb3e9395e4371536a475?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1152, 
        "link": "http://stackoverflow.com/users/3926/nimish", 
        "accept_rate": 100, 
        "display_name": "nimish"
      }, 
      "is_accepted": false, 
      "answer_id": 89237
    }
  ], 
  "166506": [
    {
      "body": "<p>A version I do not believe that has been posted yet. \nI tested with python 2.7 on Ubuntu 12.04.</p>\n\n<p>Found this solution at : <a href=\"http://code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/\" rel=\"nofollow\">http://code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/</a></p>\n\n<pre><code>import socket\nimport fcntl\nimport struct\n\ndef get_ip_address(ifname):\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    return socket.inet_ntoa(fcntl.ioctl(\n        s.fileno(),\n        0x8915,  # SIOCGIFADDR\n        struct.pack('256s', ifname[:15])\n    )[20:24])\n</code></pre>\n\n<p>Example Result:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>get_ip_address('eth0')\n          '38.113.228.130'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", 
      "question_id": 166506, 
      "last_activity_date": 1420495387, 
      "creation_date": 1420495387, 
      "score": 0, 
      "owner": {
        "user_id": 3842040, 
        "profile_image": "http://i.stack.imgur.com/g9OTc.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 5, 
        "link": "http://stackoverflow.com/users/3842040/mat-nehiser", 
        "display_name": "Mat Nehiser"
      }, 
      "is_accepted": false, 
      "answer_id": 27788672
    }, 
    {
      "body": "<p>If the computer has a route to the Internet, this will <em>always</em> work to get the preferred local ip address, even if /etc/hosts is not set correctly.</p>\n\n<pre><code>import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect(('8.8.8.8', 0))  # connecting to a UDP address doesn't send packets\nlocal_ip_address = s.getsockname()[0]\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1410792227, 
      "creation_date": 1410792227, 
      "score": 6, 
      "owner": {
        "user_id": 131881, 
        "profile_image": "https://www.gravatar.com/avatar/05081bd09da27830150776c53318e0ef?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1398, 
        "link": "http://stackoverflow.com/users/131881/collin-anderson", 
        "accept_rate": 56, 
        "display_name": "Collin Anderson"
      }, 
      "is_accepted": false, 
      "answer_id": 25850698
    }, 
    {
      "body": "<p>On Debian (tested) and I suspect most Linux's..</p>\n\n<pre><code>import commands\n\nRetMyIP = commands.getoutput(\"hostname -I\")\n</code></pre>\n\n<p>On MS Windows (tested) </p>\n\n<pre><code>import socket\n\nsocket.gethostbyname(socket.gethostname())\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1404430987, 
      "creation_date": 1404429574, 
      "score": 2, 
      "owner": {
        "user_id": 1863152, 
        "profile_image": "https://www.gravatar.com/avatar/6cfc323f028fd836267b55e6c9c9c900?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/1863152/user1863152", 
        "display_name": "user1863152"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1404430987, 
      "answer_id": 24564613
    }, 
    {
      "body": "<p>netifaces is available via pip and easy_install.  (I know, it's not in base, but it could be worth the install.)</p>\n\n<p>netifaces does have some oddities across platforms:</p>\n\n<ul>\n<li>The localhost/loop-back interface may not always be included (Cygwin).</li>\n<li>Addresses are listed per-protocol (e.g., IPv4, IPv6) and protocols are listed per-interface. On some systems (Linux) each protocol-interface pair has its own associated interface (using the interface_name:n notation) while on other systems (Windows) a single interface will have a list of addresses for each protocol.  In both cases there is a protocol list, but it may contain only a single element.</li>\n</ul>\n\n<p>Here's some netifaces code to play with:</p>\n\n<pre><code>import netifaces\n\nPROTO = netifaces.AF_INET   # We want only IPv4, for now at least\n\n# Get list of network interfaces\n# Note: Can't filter for 'lo' here because Windows lacks it.\nifaces = netifaces.interfaces()\n\n# Get all addresses (of all kinds) for each interface\nif_addrs = [netifaces.ifaddresses(iface) for iface in ifaces]\n\n# Filter for the desired address type\nif_inet_addrs = [addr[PROTO] for addr in if_addrs if PROTO in addr]\n\niface_addrs = [s['addr'] for a in if_inet_addrs for s in a if 'addr' in s]\n# Can filter for '127.0.0.1' here.\n</code></pre>\n\n<p>The above code doesn't map an address back to its interface name (useful for generating ebtables/iptables rules on the fly).  So here's a version that keeps the above information with the interface name in a tuple:</p>\n\n<pre><code>import netifaces\n\nPROTO = netifaces.AF_INET   # We want only IPv4, for now at least\n\n# Get list of network interfaces\nifaces = netifaces.interfaces()\n\n# Get addresses for each interface\nif_addrs = [(netifaces.ifaddresses(iface), iface) for iface in ifaces]\n\n# Filter for only IPv4 addresses\nif_inet_addrs = [(tup[0][PROTO], tup[1]) for tup in if_addrs if PROTO in tup[0]]\n\niface_addrs = [(s['addr'], tup[1]) for tup in if_inet_addrs for s in tup[0] if 'addr' in s]\n</code></pre>\n\n<p>And, no, I'm not in love with list comprehensions.  It's just the way my brain works these days.</p>\n\n<p>The following snippet will print it all out:</p>\n\n<pre><code>from __future__ import print_function  # For 2.x folks\nfrom pprint import pprint as pp\n\nprint('\\nifaces = ', end='')\npp(ifaces)\n\nprint('\\nif_addrs = ', end='')\npp(if_addrs)\n\nprint('\\nif_inet_addrs = ', end='')\npp(if_inet_addrs)\n\nprint('\\niface_addrs = ', end='')\npp(iface_addrs)\n</code></pre>\n\n<p>Enjoy!</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1402526670, 
      "creation_date": 1402516046, 
      "score": 2, 
      "owner": {
        "user_id": 3712955, 
        "profile_image": "https://www.gravatar.com/avatar/9e95d6993a6761fad4d9a1b5d4954eb2?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/3712955/user3712955", 
        "display_name": "user3712955"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1402526670, 
      "answer_id": 24171358
    }, 
    {
      "body": "<p>Variation on ninjagecko's answer. This should work on any LAN that allows UDP broadcast and doesn't require access to an address on the LAN or internet.</p>\n\n<pre><code>import socket\ndef getNetworkIp():\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n    s.connect(('&lt;broadcast&gt;', 0))\n    return s.getsockname()[0]\n\nprint (getNetworkIp())\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1400826658, 
      "creation_date": 1400826658, 
      "score": 0, 
      "owner": {
        "user_id": 748925, 
        "profile_image": "https://www.gravatar.com/avatar/d1686cbd90f0b22edcee4efe3a0a5897?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 748, 
        "link": "http://stackoverflow.com/users/748925/dlm", 
        "display_name": "dlm"
      }, 
      "is_accepted": false, 
      "answer_id": 23822431
    }, 
    {
      "body": "<pre class=\"lang-py prettyprint-override\"><code>import socket\nprint([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith(\"127.\")][:1])\n</code></pre>\n\n<p>I'm using this, because one of the computers I was on had an /etc/hosts with duplicate entries and references to itself. socket.gethostbyname() only returns the last entry in /etc/hosts. This solution weeds out the ones starting with \"127.\". \nWorks with Python 3 and 2.5, possibly other versions too. Does not deal with several network devices or IPv6. Works on Linux and Windows.</p>\n\n<p><strong>Update:</strong> The above technique stopped working on recent Linux distros. This can be used instead:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import socket\nprint([(s.connect(('8.8.8.8', 80)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1396957802, 
      "creation_date": 1250097638, 
      "score": 64, 
      "owner": {
        "user_id": 131264, 
        "profile_image": "https://www.gravatar.com/avatar/67c4f2aed4839e9325dd58097aaa8eca?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2102, 
        "link": "http://stackoverflow.com/users/131264/alexander", 
        "display_name": "Alexander"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1396957802, 
      "answer_id": 1267524
    }, 
    {
      "body": "<p>Well you can use the command \"ip route\" on GNU/Linux to know your current IP address.</p>\n\n<p>This shows the IP given to the interface by the DHCP server running on the router/modem. Usually \"192.168.1.1/24\" is the IP for local network where \"24\" means the range of posible IP addresses given by the DHCP server within the mask range.</p>\n\n<p>Here's an example: Note that PyNotify is just an addition to get my point straight and is not required at all</p>\n\n<pre><code>#! /usr/bin/env python\n\nimport sys , pynotify\n\nif sys.version_info[1] != 7:\n   raise RuntimeError('Python 2.7 And Above Only')       \n\nfrom subprocess import check_output # Available on Python 2.7+ | N/A \n\nIP = check_output(['ip', 'route'])\nSplit_Result = IP.split()\n\n# print Split_Result[2] # Remove \"#\" to enable\n\npynotify.init(\"image\")\nnotify = pynotify.Notification(\"Ip\", \"Server Running At:\" + Split_Result[2] , \"/home/User/wireless.png\")    \nnotify.show()    \n</code></pre>\n\n<p>The advantage of this is that you don't need to specify the network interface. That's pretty useful when running a socket server</p>\n\n<p>You can install PyNotify using easy_install or even Pip:</p>\n\n<pre><code>easy_install py-notify\n</code></pre>\n\n<p>or</p>\n\n<pre><code>pip install py-notify\n</code></pre>\n\n<p>or within python script/interpreter</p>\n\n<pre><code>from pip import main\n\nmain(['install', 'py-notify'])\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1392262341, 
      "creation_date": 1385674676, 
      "score": 2, 
      "owner": {
        "user_id": 2179483, 
        "profile_image": "http://i.stack.imgur.com/UI9P3.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 53, 
        "link": "http://stackoverflow.com/users/2179483/darkxdroid", 
        "display_name": "DarkXDroid"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1392262341, 
      "answer_id": 20275076
    }, 
    {
      "body": "<p>im using following module:</p>\n\n<pre><code>#!/usr/bin/python\n# module for getting the lan ip address of the computer\n\nimport os\nimport socket\n\nif os.name != \"nt\":\n    import fcntl\n    import struct\n    def get_interface_ip(ifname):\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        return socket.inet_ntoa(fcntl.ioctl(\n                s.fileno(),\n                0x8915,  # SIOCGIFADDR\n                struct.pack('256s', ifname[:15])\n            )[20:24])\n\ndef get_lan_ip():\n    ip = socket.gethostbyname(socket.gethostname())\n    if ip.startswith(\"127.\") and os.name != \"nt\":\n        interfaces = [\"eth0\",\"eth1\",\"eth2\",\"wlan0\",\"wlan1\",\"wifi0\",\"ath0\",\"ath1\",\"ppp0\"]\n        for ifname in interfaces:\n            try:\n                ip = get_interface_ip(ifname)\n                break;\n            except IOError:\n                pass\n    return ip\n</code></pre>\n\n<p>Tested with windows and linux (and doesnt require additional modules for those)\nintended for use on systems which are in a single LAN.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1389541180, 
      "creation_date": 1261501678, 
      "score": 15, 
      "owner": {
        "user_id": 231717, 
        "profile_image": "https://www.gravatar.com/avatar/fefb0e98c3b69374711caa5ba65b4ec6?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3466, 
        "link": "http://stackoverflow.com/users/231717/smerlin", 
        "accept_rate": 87, 
        "display_name": "smerlin"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1389541180, 
      "answer_id": 1947766
    }, 
    {
      "body": "<p>This is a variant of UnkwnTech's answer -- it provides a <code>get_local_addr()</code> function, which returns the primary LAN ip address of the host. I'm posting it because this adds a number of things: ipv6 support, error handling, ignoring localhost/linklocal addrs, and uses a TESTNET addr (rfc5737) to connect to.</p>\n\n<pre><code># imports\nimport errno\nimport socket\n\n# localhost prefixes\n_local_networks = (\"127.\", \"0:0:0:0:0:0:0:1\")\n\n# ignore these prefixes -- localhost, unspecified, and link-local\n_ignored_networks = _local_networks + (\"0.\", \"0:0:0:0:0:0:0:0\", \"169.254.\", \"fe80:\")\n\ndef detect_family(addr):\n    if \".\" in addr:\n        assert \":\" not in addr\n        return socket.AF_INET\n    elif \":\" in addr:\n        return socket.AF_INET6\n    else:\n        raise ValueError(\"invalid ipv4/6 address: %r\" % addr)\n\ndef expand_addr(addr):\n    \"\"\"convert address into canonical expanded form --\n    no leading zeroes in groups, and for ipv6: lowercase hex, no collapsed groups.\n    \"\"\"\n    family = detect_family(addr)\n    addr = socket.inet_ntop(family, socket.inet_pton(family, addr))\n    if \"::\" in addr:\n        count = 8-addr.count(\":\")\n        addr = addr.replace(\"::\", (\":0\" * count) + \":\")\n        if addr.startswith(\":\"):\n            addr = \"0\" + addr\n    return addr\n\ndef _get_local_addr(family, remote):\n    try:\n        s = socket.socket(family, socket.SOCK_DGRAM)\n        try:\n            s.connect((remote, 9))\n            return s.getsockname()[0]\n        finally:\n            s.close()\n    except socket.error:\n        return None\n\ndef get_local_addr(remote=None, ipv6=True):\n    \"\"\"get LAN address of host\n\n    :param remote:\n        return  LAN address that host would use to access that specific remote address.\n        by default, returns address it would use to access the public internet.\n\n    :param ipv6:\n        by default, attempts to find an ipv6 address first.\n        if set to False, only checks ipv4.\n\n    :returns:\n        primary LAN address for host, or ``None`` if couldn't be determined.\n    \"\"\"\n    if remote:\n        family = detect_family(remote)\n        local = _get_local_addr(family, remote)\n        if not local:\n            return None\n        if family == socket.AF_INET6:\n            # expand zero groups so the startswith() test works.\n            local = expand_addr(local)\n        if local.startswith(_local_networks):\n            # border case where remote addr belongs to host\n            return local\n    else:\n        # NOTE: the two addresses used here are TESTNET addresses,\n        #       which should never exist in the real world.\n        if ipv6:\n            local = _get_local_addr(socket.AF_INET6, \"2001:db8::1234\")\n            # expand zero groups so the startswith() test works.\n            if local:\n                local = expand_addr(local)\n        else:\n            local = None\n        if not local:\n            local = _get_local_addr(socket.AF_INET, \"192.0.2.123\")\n            if not local:\n                return None\n    if local.startswith(_ignored_networks):\n        return None\n    return local\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1387564908, 
      "creation_date": 1387564908, 
      "score": 3, 
      "owner": {
        "user_id": 681277, 
        "profile_image": "https://www.gravatar.com/avatar/7867b95b55c40dae3aa27590831b01da?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3566, 
        "link": "http://stackoverflow.com/users/681277/eli-collins", 
        "display_name": "Eli Collins"
      }, 
      "is_accepted": false, 
      "answer_id": 20710035
    }, 
    {
      "body": "<p>Simple yet sweet!</p>\n\n<pre><code>def getip():\n\n    import socket\n    hostname= socket.gethostname()\n    ip=socket.gethostbyname(hostname)\n\n    return(ip)\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1385906524, 
      "creation_date": 1385906524, 
      "score": 0, 
      "owner": {
        "user_id": 3054551, 
        "profile_image": "https://www.gravatar.com/avatar/dbd6acf72d464f933f9138dbdb677998?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 36, 
        "link": "http://stackoverflow.com/users/3054551/matt", 
        "display_name": "Matt"
      }, 
      "is_accepted": false, 
      "answer_id": 20312936
    }, 
    {
      "body": "<p>Note: This is not using the standard library, but quite simple.</p>\n\n<p>$ pip install pif</p>\n\n<pre><code>from pif import get_public_ip\nget_public_ip()\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1378376120, 
      "creation_date": 1377904153, 
      "score": 0, 
      "owner": {
        "user_id": 2318839, 
        "profile_image": "https://www.gravatar.com/avatar/affa9ee26cc31be3349877c2275316cf?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 719, 
        "link": "http://stackoverflow.com/users/2318839/artur-barseghyan", 
        "display_name": "Artur Barseghyan"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1378376120, 
      "answer_id": 18542718
    }, 
    {
      "body": "<p>You can use the <a href=\"http://pypi.python.org/pypi/netifaces\">netifaces</a> module. Just type:</p>\n\n<pre><code>easy_install netifaces\n</code></pre>\n\n<p>in your command shell and it will install itself on default Python installation.</p>\n\n<p>Then you can use it like this:</p>\n\n<pre><code>from netifaces import interfaces, ifaddresses, AF_INET\nfor ifaceName in interfaces():\n    addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET, [{'addr':'No IP addr'}] )]\n    print '%s: %s' % (ifaceName, ', '.join(addresses))\n</code></pre>\n\n<p>On my computer it printed:</p>\n\n<pre>{45639BDC-1050-46E0-9BE9-075C30DE1FBC}: 192.168.0.100\n{D43A468B-F3AE-4BF9-9391-4863A4500583}: 10.5.9.207</pre>\n\n<p>Author of this module claims it should work on Windows, UNIX and Mac OS X.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1376922523, 
      "creation_date": 1223037342, 
      "score": 39, 
      "owner": {
        "user_id": 18745, 
        "profile_image": "https://www.gravatar.com/avatar/8ba0489ea90652c08d1406f2afe2e0e2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 14983, 
        "link": "http://stackoverflow.com/users/18745/dzinx", 
        "accept_rate": 75, 
        "display_name": "DzinX"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1376922523, 
      "answer_id": 166591
    }, 
    {
      "body": "<p><strong>Socket API method</strong></p>\n\n<pre><code>import socket\n\n# from http://commandline.org.uk/python/how-to-find-out-ip-address-in-python/\ndef getNetworkIp():\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    s.connect(('INSERT SOME TARGET WEBSITE.com', 0))\n    return s.getsockname()[0]\n</code></pre>\n\n<p>Downsides:</p>\n\n<ul>\n<li><em>Not cross-platform.</em></li>\n<li>Requires more fallback code, tied to existence of particular addresses on the internet</li>\n<li>This will also not work if you're behind a NAT</li>\n<li>Probably creates a UDP connection, not independent of (usually ISP's) DNS availability (see other answers for ideas like using 8.8.8.8: Google's (coincidentally also DNS) server)</li>\n<li>Very poor form to incorporate third-party dependency (like <code>google.com</code>) in code as a means of specifying the network interface, unless you specifically want the public IP of the interface which will route you to the specific website you want.</li>\n</ul>\n\n<hr>\n\n<p><strong>Reflector method</strong></p>\n\n<p>(Do note that this does not answer the OP's question of the local IP address, e.g. 192.168...; it gives you your public IP address, which might be more desirable depending on use case.)</p>\n\n<p>You can query some site like whatismyip.com (but with an API), such as:</p>\n\n<pre><code>from urllib.request import urlopen\nimport re\ndef getPublicIp():\n    data = str(urlopen('http://checkip.dyndns.com/').read())\n    # data = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Current IP Check&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Current IP Address: 65.96.168.198&lt;/body&gt;&lt;/html&gt;\\r\\n'\n\n    return re.compile(r'Address: (\\d+\\.\\d+\\.\\d+\\.\\d+)').search(data).group(1)\n</code></pre>\n\n<p>or if using python2:</p>\n\n<pre><code>from urllib import urlopen\nimport re\ndef getPublicIp():\n    data = str(urlopen('http://checkip.dyndns.com/').read())\n    # data = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Current IP Check&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Current IP Address: 65.96.168.198&lt;/body&gt;&lt;/html&gt;\\r\\n'\n\n    return re.compile(r'Address: (\\d+\\.\\d+\\.\\d+\\.\\d+)').search(data).group(1)\n</code></pre>\n\n<p>Advantages:</p>\n\n<ul>\n<li>One upside of this method is it's cross-platform</li>\n<li>It works from behind ugly NATs (e.g. your home router).</li>\n</ul>\n\n<p>Disadvantages (and workarounds):</p>\n\n<ul>\n<li>Requires this website to be up, the format to not change (almost certainly won't), and your DNS servers to be working. One can mitigate this issue by also querying other third-party IP address reflectors in case of failure.</li>\n<li>Possible attack vector if you don't query multiple reflectors (to prevent a compromised reflector from telling you that your address is something it's not), or if you don't use HTTPS (to prevent a man-in-the-middle attack pretending to be the server)</li>\n</ul>\n\n<hr>\n\n<p><em>edit</em>: Though initially I thought these methods were really bad (unless you use many fallbacks, the code may be irrelevant many years from now), it does pose the question \"what is the internet?\". A computer may have many interfaces pointing to many different networks. For a more thorough description of the topic, google for <code>gateways and routes</code>. A computer may be able to access an internal network via an internal gateway, or access the world-wide web via a gateway on for example a router (usually the case). The local IP address that the OP asks about is only well-defined with respect to a single link layer, so you have to specify that (\"is it the network card, or the ethernet cable, which we're talking about?\"). There may be multiple non-unique answers to this question as posed. However the global IP address on the world-wide web is probably well-defined (in the absence of massive network fragmentation): probably the return path via the gateway which can access the TLDs.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1373796672, 
      "creation_date": 1308827231, 
      "score": 37, 
      "owner": {
        "user_id": 711085, 
        "profile_image": "https://www.gravatar.com/avatar/fabf3436107ffee76255957a7732d0f1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 28230, 
        "link": "http://stackoverflow.com/users/711085/ninjagecko", 
        "display_name": "ninjagecko"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1373796672, 
      "answer_id": 6453053
    }, 
    {
      "body": "<pre><code>import socket\n[i[4][0] for i in socket.getaddrinfo(socket.gethostname(), None)]\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1367909673, 
      "creation_date": 1367909673, 
      "score": 4, 
      "owner": {
        "user_id": 322020, 
        "profile_image": "https://www.gravatar.com/avatar/dce43cb8158a14c3fed02bea797becd7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 13268, 
        "link": "http://stackoverflow.com/users/322020/nakilon", 
        "accept_rate": 49, 
        "display_name": "Nakilon"
      }, 
      "is_accepted": false, 
      "answer_id": 16412954
    }, 
    {
      "body": "<p>I use this on my ubuntu machines:</p>\n\n<pre><code>import commands\ncommands.getoutput(\"/sbin/ifconfig\").split(\"\\n\")[1].split()[1][5:]\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1348477757, 
      "creation_date": 1278305147, 
      "score": 22, 
      "owner": {
        "user_id": 244843, 
        "profile_image": "http://i.stack.imgur.com/XqTZn.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1074, 
        "link": "http://stackoverflow.com/users/244843/shino", 
        "accept_rate": 80, 
        "display_name": "shino"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1348477757, 
      "answer_id": 3177266
    }, 
    {
      "body": "<p>On Linux:</p>\n\n<pre><code>&gt;&gt;&gt; import socket, struct, fcntl\n&gt;&gt;&gt; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n&gt;&gt;&gt; sockfd = sock.fileno()\n&gt;&gt;&gt; SIOCGIFADDR = 0x8915\n&gt;&gt;&gt;\n&gt;&gt;&gt; def get_ip(iface = 'eth0'):\n...     ifreq = struct.pack('16sH14s', iface, socket.AF_INET, '\\x00'*14)\n...     try:\n...         res = fcntl.ioctl(sockfd, SIOCGIFADDR, ifreq)\n...     except:\n...         return None\n...     ip = struct.unpack('16sH2x4s8x', res)[2]\n...     return socket.inet_ntoa(ip)\n... \n&gt;&gt;&gt; get_ip('eth0')\n'10.80.40.234'\n&gt;&gt;&gt; \n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1347041745, 
      "creation_date": 1329166351, 
      "score": 25, 
      "owner": {
        "user_id": 592851, 
        "profile_image": "https://www.gravatar.com/avatar/21dc54ace246ac7672dabd01ae82ed2f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4436, 
        "link": "http://stackoverflow.com/users/592851/tmc", 
        "accept_rate": 97, 
        "display_name": "tMC"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1347041745, 
      "answer_id": 9267833
    }, 
    {
      "body": "<p>One simple way to produce \"clean\" output via command line utils:</p>\n\n<pre><code>import commands\nips = commands.getoutput(\"/sbin/ifconfig | grep -i \\\"inet\\\" | grep -iv \\\"inet6\\\" | \" +\n                         \"awk {'print $2'} | sed -ne 's/addr\\:/ /p'\")\nprint ips\n</code></pre>\n\n<p>It will show all IPv4 addresses on the system.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1342044227, 
      "creation_date": 1307949716, 
      "score": 7, 
      "owner": {
        "user_id": 795536, 
        "profile_image": "https://www.gravatar.com/avatar/ccf7aa14183e0ec205479cdb9764fba4?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 71, 
        "link": "http://stackoverflow.com/users/795536/viker", 
        "display_name": "viker"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1342044227, 
      "answer_id": 6327620
    }, 
    {
      "body": "<p>This answer is my personal attempt to solve the problem of getting the LAN IP, since <code>socket.gethostbyname(socket.gethostname())</code> also returned 127.0.0.1. This method does not require Internet just a LAN connection. Code is for Python 3.x but could easily be converted for 2.x. Using UDP Broadcast:</p>\n\n<pre><code>import select\nimport socket\nimport threading\nfrom queue import Queue, Empty\n\ndef get_local_ip():\n        def udp_listening_server():\n            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            s.bind(('&lt;broadcast&gt;', 8888))\n            s.setblocking(0)\n            while True:\n                result = select.select([s],[],[])\n                msg, address = result[0][0].recvfrom(1024)\n                msg = str(msg, 'UTF-8')\n                if msg == 'What is my LAN IP address?':\n                    break\n            queue.put(address)\n\n        queue = Queue()\n        thread = threading.Thread(target=udp_listening_server)\n        thread.queue = queue\n        thread.start()\n        s2 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s2.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n        waiting = True\n        while waiting:\n            s2.sendto(bytes('What is my LAN IP address?', 'UTF-8'), ('&lt;broadcast&gt;', 8888))\n            try:\n                address = queue.get(False)\n            except Empty:\n                pass\n            else:\n                waiting = False\n        return address[0]\n\nif __name__ == '__main__':\n    print(get_local_ip())\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1339500703, 
      "creation_date": 1339488913, 
      "score": 3, 
      "owner": {
        "user_id": 1450678, 
        "profile_image": "https://www.gravatar.com/avatar/81d1436652aa9110054d239fcf94f479?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/1450678/wolfrage", 
        "display_name": "WolfRage"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1339500703, 
      "answer_id": 10992813
    }, 
    {
      "body": "<pre><code>import socket\nsocket.gethostbyname(socket.getfqdn())\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1339148540, 
      "creation_date": 1339148540, 
      "score": 3, 
      "owner": {
        "user_id": 422242, 
        "profile_image": "https://www.gravatar.com/avatar/1a1c60e72b3a0c18157d47d60f9e87ff?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 52, 
        "link": "http://stackoverflow.com/users/422242/oink", 
        "accept_rate": 67, 
        "display_name": "Oink"
      }, 
      "is_accepted": false, 
      "answer_id": 10946468
    }, 
    {
      "body": "<p>Another option is to ping whatismyip</p>\n\n<p>the below script will return your public ip as a string - advantage is that they allow this \n<a href=\"http://www.whatismyip.com/faq/automation.asp\" rel=\"nofollow\">http://www.whatismyip.com/faq/automation.asp</a></p>\n\n<pre><code>def findIP():\n    headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0)' \\\n                    + ' Gecko/20100101 Firefox/12.0' }\n    return = urllib2.urlopen(\n                urllib2.Request(\n                        \"http://automation.whatismyip.com/n09230945.asp\",\n                         None, headers )\n                ).read()\n</code></pre>\n\n<p>executable version available at\n<a href=\"https://gist.github.com/2786450\" rel=\"nofollow\">https://gist.github.com/2786450</a></p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1337931928, 
      "creation_date": 1337931308, 
      "score": 0, 
      "owner": {
        "user_id": 141686, 
        "profile_image": "https://www.gravatar.com/avatar/1fe7f3c07aa27ab433b320922d8f7a90?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1249, 
        "link": "http://stackoverflow.com/users/141686/alvin", 
        "accept_rate": 57, 
        "display_name": "Alvin"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1337931928, 
      "answer_id": 10750359
    }, 
    {
      "body": "<p>A slight refinement of the commands version that uses the IP command, and returns IPv4 and IPv6 addresses:</p>\n\n<pre><code>import commands,re,socket\n\n#A generator that returns stripped lines of output from \"ip address show\"\niplines=(line.strip() for line in commands.getoutput(\"ip address show\").split('\\n'))\n\n#Turn that into a list of IPv4 and IPv6 address/mask strings\naddresses1=reduce(lambda a,v:a+v,(re.findall(r\"inet ([\\d.]+/\\d+)\",line)+re.findall(r\"inet6 ([\\:\\da-f]+/\\d+)\",line) for line in iplines))\n#addresses1 now looks like ['127.0.0.1/8', '::1/128', '10.160.114.60/23', 'fe80::1031:3fff:fe00:6dce/64']\n\n#Get a list of IPv4 addresses as (IPstring,subnetsize) tuples\nipv4s=[(ip,int(subnet)) for ip,subnet in (addr.split('/') for addr in addresses1 if '.' in addr)]\n#ipv4s now looks like [('127.0.0.1', 8), ('10.160.114.60', 23)]\n\n#Get IPv6 addresses\nipv6s=[(ip,int(subnet)) for ip,subnet in (addr.split('/') for addr in addresses1 if ':' in addr)]\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1335745954, 
      "creation_date": 1335745954, 
      "score": 3, 
      "owner": {
        "user_id": 661571, 
        "profile_image": "https://www.gravatar.com/avatar/e554e7347fe10b4315fa8bdf410fb389?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 491, 
        "link": "http://stackoverflow.com/users/661571/ben-last", 
        "display_name": "Ben Last"
      }, 
      "is_accepted": false, 
      "answer_id": 10377262
    }, 
    {
      "body": "<p>This will work on most linux boxes:</p>\n\n<pre><code>import socket, subprocess, re\ndef get_ipv4_address():\n    \"\"\"\n    Returns IP address(es) of current machine.\n    :return:\n    \"\"\"\n    p = subprocess.Popen([\"ifconfig\"], stdout=subprocess.PIPE)\n    ifc_resp = p.communicate()\n    patt = re.compile(r'inet\\s*\\w*\\S*:\\s*(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})')\n    resp = patt.findall(ifc_resp[0])\n    print resp\n\nget_ipv4_address()\n</code></pre>\n", 
      "question_id": 166506, 
      "last_activity_date": 1335528841, 
      "creation_date": 1335528841, 
      "score": 5, 
      "owner": {
        "user_id": 34747, 
        "profile_image": "https://www.gravatar.com/avatar/a9a76b717433d7c5cc5977c7025b2cee?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1616, 
        "link": "http://stackoverflow.com/users/34747/fccoelho", 
        "accept_rate": 56, 
        "display_name": "fccoelho"
      }, 
      "is_accepted": false, 
      "answer_id": 10350424
    }, 
    {
      "body": "<p>I had to solve the problem \"Figure out if an IP address is local or not\", and my first thought was to build a list of IPs that were local and then match against it. This is what led me to this question. However, I later realized there is a more straightfoward way to do it: Try to bind on that IP and see if it works.</p>\n\n<pre><code>_local_ip_cache = []\n_nonlocal_ip_cache = []\ndef ip_islocal(ip):\n    if ip in _local_ip_cache:\n        return True\n    if ip in _nonlocal_ip_cache:\n        return False\n    s = socket.socket()\n    try:\n        try:\n            s.bind((ip, 0))\n        except socket.error, e:\n            if e.args[0] == errno.EADDRNOTAVAIL:\n                _nonlocal_ip_cache.append(ip)\n                return False\n            else:\n                raise\n    finally:\n        s.close()\n    _local_ip_cache.append(ip)\n    return True\n</code></pre>\n\n<p>I know this doesn't answer the question directly, but this should be helpful to anyone trying to solve the related question and who was following the same train of thought. This has the advantage of being a cross-platform solution (I think).</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1335400326, 
      "creation_date": 1335400326, 
      "score": 2, 
      "owner": {
        "user_id": 109696, 
        "profile_image": "https://www.gravatar.com/avatar/e6c0d560cf31263a4fe45d31f4a5a031?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1946, 
        "link": "http://stackoverflow.com/users/109696/etienne-perot", 
        "accept_rate": 100, 
        "display_name": "Etienne Perot"
      }, 
      "is_accepted": false, 
      "answer_id": 10325724
    }, 
    {
      "body": "<p>Ok so this is Windows specific, and requires the installation of the  <a href=\"http://timgolden.me.uk/python/wmi/index.html\" rel=\"nofollow\">python WMI module</a>, but it seems much less hackish than constantly trying to call an external server. It's just another option, as there are already many good ones, but it might be a good fit for your project.</p>\n\n<pre><code>Import WMI\n\ndef getlocalip():\n    local = wmi.WMI()\n    for interface in local.Win32_NetworkAdapterConfiguration(IPEnabled=1):\n        for ip_address in interface.IPAddress:\n            if ip_address != '0.0.0.0':\n                localip = ip_address\n    return localip\n\n\n\n\n\n\n\n&gt;&gt;&gt;getlocalip()\nu'xxx.xxx.xxx.xxx'\n&gt;&gt;&gt;\n</code></pre>\n\n<p>By the way, WMI is very powerful... if you are doing any remote admin of window machines you should definitely check out what it can do.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1334668898, 
      "creation_date": 1334668898, 
      "score": 0, 
      "owner": {
        "user_id": 688589, 
        "profile_image": "https://www.gravatar.com/avatar/4ae43e149cf2dbac6fc0fef3056091f8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 19, 
        "link": "http://stackoverflow.com/users/688589/snakebarber", 
        "display_name": "snakebarber"
      }, 
      "is_accepted": false, 
      "answer_id": 10192097
    }, 
    {
      "body": "<p>I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked.</p>\n\n<pre><code>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\"gmail.com\",80))\nprint(s.getsockname()[0])\ns.close()\n</code></pre>\n\n<p>This assumes you have an internet access, and that there is no local proxy.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1318605825, 
      "creation_date": 1223037313, 
      "score": 138, 
      "owner": {
        "user_id": 115, 
        "profile_image": "https://www.gravatar.com/avatar/198d6d4fed2012d939b47e63e561082f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 23746, 
        "link": "http://stackoverflow.com/users/115/unkwntech", 
        "accept_rate": 98, 
        "display_name": "UnkwnTech"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1318605825, 
      "answer_id": 166589
    }, 
    {
      "body": "<p><code>127.0.1.1</code> <em>is</em> your real IP address. More generally speaking, a computer can have any number of IP addresses. You can filter them for private networks - 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16.</p>\n\n<p>However, there is no cross-platform way to get all IP addresses. On Linux, you can use the <a href=\"http://linux.die.net/man/7/netdevice\" rel=\"nofollow\"><code>SIOCGIFCONF</code></a> ioctl.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1308827059, 
      "creation_date": 1308827059, 
      "score": 4, 
      "owner": {
        "user_id": 35070, 
        "profile_image": "https://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 97728, 
        "link": "http://stackoverflow.com/users/35070/phihag", 
        "accept_rate": 72, 
        "display_name": "phihag"
      }, 
      "is_accepted": false, 
      "answer_id": 6453024
    }, 
    {
      "body": "<p>A machine can have multiple network interfaces (including the local loopback 127.0.0.1) you mentioned. As far as the OS is concerned, it's also a \"real IP address\". </p>\n\n<p>If you want to track all of interfaces, have a look at the following Puthon package : <a href=\"http://alastairs-place.net/netifaces/\" rel=\"nofollow\">http://alastairs-place.net/netifaces/</a></p>\n\n<p>I think you can avoid having gethostbyname return 127.0.0.1 if you ommit the loopback entry from your hosts file. (to be verified).</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1308826941, 
      "creation_date": 1308826941, 
      "score": 0, 
      "owner": {
        "user_id": 492410, 
        "profile_image": "https://www.gravatar.com/avatar/afa5f1047c1344242b2b876bc86e872c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 12753, 
        "link": "http://stackoverflow.com/users/492410/ddewaele", 
        "accept_rate": 60, 
        "display_name": "ddewaele"
      }, 
      "is_accepted": false, 
      "answer_id": 6452999
    }, 
    {
      "body": "<p>For a list of IP addresses on *nix systems,</p>\n\n<pre><code>import subprocess\nco = subprocess.Popen(['ifconfig'], stdout = subprocess.PIPE)\nifconfig = co.stdout.read()\nip_regex = re.compile('((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-4]|2[0-5][0-9]|[01]?[0-9][0-9]?))')\n[match[0] for match in ip_regex.findall(ifconfig, re.MULTILINE)]\n</code></pre>\n\n<p>Though it's a bit late for this answer, I thought someone else may find it useful :-)</p>\n\n<p>PS : It'll return Broadcast addresses and Netmask as well.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1298590309, 
      "creation_date": 1298590309, 
      "score": 0, 
      "owner": {
        "user_id": 625510, 
        "profile_image": "http://i.stack.imgur.com/2kXd5.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 2808, 
        "link": "http://stackoverflow.com/users/625510/kulbir-saini", 
        "display_name": "Kulbir Saini"
      }, 
      "is_accepted": false, 
      "answer_id": 5111878
    }, 
    {
      "body": "<p>FYI I can verify that the method:</p>\n\n<pre><code>import socket\naddr = socket.gethostbyname(socket.gethostname())\n</code></pre>\n\n<p>Works in OS X (10.6,10.5), Windows XP, and on a well administered RHEL department server.  It did not work on a very minimal CentOS VM that I just do some kernel hacking on.  So for that instance you can just check for a 127.0.0.1 address and in that case do the following:</p>\n\n<pre><code>if addr == \"127.0.0.1\":\n     import commands\n     output = commands.getoutput(\"/sbin/ifconfig\")\n     addr = parseaddress(output)\n</code></pre>\n\n<p>And then parse the ip address from the output.  It should be noted that ifconfig is not in a normal user's PATH by default and that is why I give the full path in the command.  I hope this helps.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1262188281, 
      "creation_date": 1262188281, 
      "score": 4, 
      "owner": {
        "user_id": 240954, 
        "profile_image": "https://www.gravatar.com/avatar/751bbd7b4122bfe8b748d897d986d3e0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 253, 
        "link": "http://stackoverflow.com/users/240954/gavaletz", 
        "display_name": "gavaletz"
      }, 
      "is_accepted": false, 
      "answer_id": 1980854
    }, 
    {
      "body": "<p>If you don't want to use external packages and don't want to rely on outside Internet servers, this might help. It's a code sample that I found on <a href=\"http://www.google.com/codesearch?hl=en&amp;lr=&amp;q=getMACAddrWin&amp;sbtn=Search\">Google Code Search</a> and modified to return required information:</p>\n\n<pre><code>def getIPAddresses():\n    from ctypes import Structure, windll, sizeof\n    from ctypes import POINTER, byref\n    from ctypes import c_ulong, c_uint, c_ubyte, c_char\n    MAX_ADAPTER_DESCRIPTION_LENGTH = 128\n    MAX_ADAPTER_NAME_LENGTH = 256\n    MAX_ADAPTER_ADDRESS_LENGTH = 8\n    class IP_ADDR_STRING(Structure):\n        pass\n    LP_IP_ADDR_STRING = POINTER(IP_ADDR_STRING)\n    IP_ADDR_STRING._fields_ = [\n        (\"next\", LP_IP_ADDR_STRING),\n        (\"ipAddress\", c_char * 16),\n        (\"ipMask\", c_char * 16),\n        (\"context\", c_ulong)]\n    class IP_ADAPTER_INFO (Structure):\n        pass\n    LP_IP_ADAPTER_INFO = POINTER(IP_ADAPTER_INFO)\n    IP_ADAPTER_INFO._fields_ = [\n        (\"next\", LP_IP_ADAPTER_INFO),\n        (\"comboIndex\", c_ulong),\n        (\"adapterName\", c_char * (MAX_ADAPTER_NAME_LENGTH + 4)),\n        (\"description\", c_char * (MAX_ADAPTER_DESCRIPTION_LENGTH + 4)),\n        (\"addressLength\", c_uint),\n        (\"address\", c_ubyte * MAX_ADAPTER_ADDRESS_LENGTH),\n        (\"index\", c_ulong),\n        (\"type\", c_uint),\n        (\"dhcpEnabled\", c_uint),\n        (\"currentIpAddress\", LP_IP_ADDR_STRING),\n        (\"ipAddressList\", IP_ADDR_STRING),\n        (\"gatewayList\", IP_ADDR_STRING),\n        (\"dhcpServer\", IP_ADDR_STRING),\n        (\"haveWins\", c_uint),\n        (\"primaryWinsServer\", IP_ADDR_STRING),\n        (\"secondaryWinsServer\", IP_ADDR_STRING),\n        (\"leaseObtained\", c_ulong),\n        (\"leaseExpires\", c_ulong)]\n    GetAdaptersInfo = windll.iphlpapi.GetAdaptersInfo\n    GetAdaptersInfo.restype = c_ulong\n    GetAdaptersInfo.argtypes = [LP_IP_ADAPTER_INFO, POINTER(c_ulong)]\n    adapterList = (IP_ADAPTER_INFO * 10)()\n    buflen = c_ulong(sizeof(adapterList))\n    rc = GetAdaptersInfo(byref(adapterList[0]), byref(buflen))\n    if rc == 0:\n        for a in adapterList:\n            adNode = a.ipAddressList\n            while True:\n                ipAddr = adNode.ipAddress\n                if ipAddr:\n                    yield ipAddr\n                adNode = adNode.next\n                if not adNode:\n                    break\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&gt;&gt;&gt; for addr in getIPAddresses():\n&gt;&gt;&gt;    print addr\n192.168.0.100\n10.5.9.207\n</code></pre>\n\n<p>As it relies on <code>windll</code>, this will work only on Windows.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1223042051, 
      "creation_date": 1223042051, 
      "score": 15, 
      "owner": {
        "user_id": 18745, 
        "profile_image": "https://www.gravatar.com/avatar/8ba0489ea90652c08d1406f2afe2e0e2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 14983, 
        "link": "http://stackoverflow.com/users/18745/dzinx", 
        "accept_rate": 75, 
        "display_name": "DzinX"
      }, 
      "is_accepted": false, 
      "answer_id": 166992
    }, 
    {
      "body": "<p>I'm afraid there aren't any good platform independent ways to do this other than connecting to another computer and having it send you your IP address.  For example:  <a href=\"http://www.findmyipaddress.info/locateipaddresses.html\">findmyipaddress</a>.  Note that this won't work if you need an IP address that's behind NAT unless the computer you're connecting to is behind NAT as well.</p>\n\n<p>Here's one solution that works in Linux:  <a href=\"http://code.activestate.com/recipes/439094/\">get the IP address associated with a network interface</a>.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1223036357, 
      "creation_date": 1223035620, 
      "score": 5, 
      "owner": {
        "user_id": 2147, 
        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 60987, 
        "link": "http://stackoverflow.com/users/2147/jason-baker", 
        "accept_rate": 86, 
        "display_name": "Jason Baker"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1223036357, 
      "answer_id": 166521
    }, 
    {
      "body": "<pre><code>import socket\nsocket.gethostbyname(socket.gethostname())\n</code></pre>\n\n<p>This won't work always (returns 127.0.0.1 on machines having the hostname in /etc/hosts as 127.0.0.1), a paliative would be what gimel shows, use socket.getfqdn() instead. Of course your machine needs a resolvable hostname.</p>\n", 
      "question_id": 166506, 
      "last_activity_date": 1223036021, 
      "creation_date": 1223035610, 
      "score": 134, 
      "owner": {
        "user_id": 5190, 
        "profile_image": "https://www.gravatar.com/avatar/27a12fdc32baf8748018d373a973d22f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 126373, 
        "link": "http://stackoverflow.com/users/5190/vinko-vrsalovic", 
        "accept_rate": 73, 
        "display_name": "Vinko Vrsalovic"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1223036021, 
      "answer_id": 166520
    }
  ], 
  "38987": [
    {
      "body": "<p>In a follow-up answer, you asked about the relative performance of these two alternatives:</p>\n\n<pre><code>z1 = dict(x.items() + y.items())\nz2 = dict(x, **y)\n</code></pre>\n\n<p>On my machine, at least (a fairly ordinary x86_64 running Python 2.5.2), alternative <code>z2</code> is not only shorter and simpler but also significantly faster.  You can verify this for yourself using the <code>timeit</code> module that comes with Python.</p>\n\n<p>Example 1: identical dictionaries mapping 20 consecutive integers to themselves:</p>\n\n<pre><code>% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'\n100000 loops, best of 3: 5.67 usec per loop\n% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' \n100000 loops, best of 3: 1.53 usec per loop\n</code></pre>\n\n<p><code>z2</code> wins by a factor of 3.5 or so.  Different dictionaries seem to yield quite different results, but <code>z2</code> always seems to come out ahead.  (If you get inconsistent results for the <em>same</em> test, try passing in <code>-r</code> with a number larger than the default 3.)</p>\n\n<p>Example 2: non-overlapping dictionaries mapping 252 short strings to integers and vice versa:</p>\n\n<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'\n1000 loops, best of 3: 260 usec per loop\n% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               \n10000 loops, best of 3: 26.9 usec per loop\n</code></pre>\n\n<p><code>z2</code> wins by about a factor of 10.  That's a pretty big win in my book!</p>\n\n<p>After comparing those two, I wondered if <code>z1</code>'s poor performance could be attributed to the overhead of constructing the two item lists, which in turn led me to wonder if this variation might work better:</p>\n\n<pre><code>from itertools import chain\nz3 = dict(chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<p>A few quick tests, e.g.</p>\n\n<pre><code>% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'\n10000 loops, best of 3: 66 usec per loop\n</code></pre>\n\n<p>lead me to conclude that <code>z3</code> is somewhat faster than <code>z1</code>, but not nearly as fast as <code>z2</code>.  Definitely not worth all the extra typing.</p>\n\n<p>This discussion is still missing something important, which is a performance comparison of these alternatives with the \"obvious\" way of merging two lists: using the <code>update</code> method.  To try to keep things on an equal footing with the expressions, none of which modify x or y, I'm going to make a copy of x instead of modifying it in-place, as follows:</p>\n\n<pre><code>z0 = dict(x)\nz0.update(y)\n</code></pre>\n\n<p>A typical result:</p>\n\n<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'\n10000 loops, best of 3: 26.9 usec per loop\n</code></pre>\n\n<p>In other words, <code>z0</code> and <code>z2</code> seem to have essentially identical performance.  Do you think this might be a coincidence?  I don't....</p>\n\n<p>In fact, I'd go so far as to claim that it's impossible for pure Python code to do any better than this.  And if you can do significantly better in a C extension module, I imagine the Python folks might well be interested in incorporating your code (or a variation on your approach) into the Python core.  Python uses <code>dict</code> in lots of places; optimizing its operations is a big deal.</p>\n\n<p>You could also write this as</p>\n\n<pre><code>z0 = x.copy()\nz0.update(y)\n</code></pre>\n\n<p>as Tony does, but (not surprisingly) the difference in notation turns out not to have any measurable effect on performance.  Use whichever looks right to you.  Of course, he's absolutely correct to point out that the two-statement version is much easier to understand.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1420857175, 
      "creation_date": 1224729536, 
      "score": 75, 
      "owner": {
        "user_id": 13871, 
        "profile_image": "https://www.gravatar.com/avatar/a91548abcbeb30967e4182c5d29b1d29?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2156, 
        "link": "http://stackoverflow.com/users/13871/zaphod", 
        "accept_rate": 100, 
        "display_name": "zaphod"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420857175, 
      "answer_id": 228366
    }, 
    {
      "body": "<p>A union of the OP's two dictionaries would be something like:</p>\n\n<pre><code>{'a': 1, 'b': 2, 10, 'c': 11}\n</code></pre>\n\n<p>Specifically, the union of two entities(<code>x</code> and <code>y</code>) contains all the elements of <code>x</code> and/or <code>y</code>.\nUnfortunately, what the OP asks for is not a union, despite the title of the post.</p>\n\n<p>My code below is neither elegant nor a one-liner, but I believe it is consistent with the meaning of union.</p>\n\n<p>From the OP's example:</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\nz = {}\nfor k, v in x.items():\n    if not k in z:\n        z[k] = [(v)]\n    else:\n        z[k].append((v))\nfor k, v in y.items():\n    if not k in z:\n        z[k] = [(v)]\n    else:\n        z[k].append((v))\n\n{'a': [1], 'b': [2, 10], 'c': [11]}\n</code></pre>\n\n<p>Whether one wants lists could be changed, but the above will work if a dictionary contains lists (and nested lists) as values in either dictionary.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1420856518, 
      "creation_date": 1412044579, 
      "score": 0, 
      "owner": {
        "user_id": 3169972, 
        "profile_image": "https://www.gravatar.com/avatar/ee3c950c5397ef237467fe894e12abbe?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 23, 
        "link": "http://stackoverflow.com/users/3169972/bassounds", 
        "display_name": "bassounds"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420856518, 
      "answer_id": 26111877
    }, 
    {
      "body": "<p>Say you have two dicts and you want to merge them (without altering the original dicts):</p>\n\n<pre><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n</code></pre>\n\n<p><code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\n\n<p>The Pythonic way to do this is a two-step process:</p>\n\n<pre><code>z = x.copy()\nz.update(y)\n</code></pre>\n\n<p>If you want this in a single expression, put it in a function:</p>\n\n<pre><code>def merge_dicts(x, y):\n    '''Given two dicts, merge them into a new dict as a shallow copy.'''\n    z = x.copy()\n    z.update(y)\n    return z\n</code></pre>\n\n<p>and then you have a single expression:</p>\n\n<pre><code>z = merge_dicts(x, y)\n</code></pre>\n\n<hr>\n\n<p>Don't use what you see in the top answer:</p>\n\n<pre><code>z = dict(x.items() + y.items())\n</code></pre>\n\n<p>In Python 2, you create two lists in memory for each dict, and then creates a third list in memory equal to the length of the first two put together, then you discard all three lists to create the dict. In Python 3, this will fail because you're adding two iterators together, not two lists, and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>\n\n<p>A hack to get around this is:</p>\n\n<pre><code>z = dict(x, **y)\n</code></pre>\n\n<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slighly moreso than our two-step process) but unless you know precisely what is happening here, it's difficult to read, and so it is not Pythonic.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1420856472, 
      "creation_date": 1415657508, 
      "score": 1, 
      "owner": {
        "user_id": 541136, 
        "profile_image": "https://www.gravatar.com/avatar/603b9362bc65bbc728c269f7f467e9e4?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 10997, 
        "link": "http://stackoverflow.com/users/541136/aaron-hall", 
        "accept_rate": 82, 
        "display_name": "Aaron Hall"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420856472, 
      "answer_id": 26853961
    }, 
    {
      "body": "<p>In Python 3, you can use <a href=\"http://docs.python.org/3/library/collections.html#collections.ChainMap\" rel=\"nofollow\"><em>collections.ChainMap</em></a> which groups multiple dicts or other mappings together to create a single, updateable view:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import ChainMap\n&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = ChainMap({}, y, x)\n&gt;&gt;&gt; for k, v in z.items():\n        print(k, '--&gt;', v)\n\na --&gt; 1\nb --&gt; 10\nc --&gt; 11\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1411805561, 
      "creation_date": 1367118938, 
      "score": 22, 
      "owner": {
        "user_id": 1001643, 
        "profile_image": "https://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 55656, 
        "link": "http://stackoverflow.com/users/1001643/raymond-hettinger", 
        "accept_rate": 75, 
        "display_name": "Raymond Hettinger"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1411805561, 
      "answer_id": 16259217
    }, 
    {
      "body": "<p>I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.</p>\n\n<pre><code>def merge(d1, d2, merge_fn=lambda x,y:y):\n    \"\"\"\n    Merges two dictionaries, non-destructively, combining \n    values on duplicate keys as defined by the optional merge\n    function.  The default behavior replaces the values in d1\n    with corresponding values in d2.  (There is no other generally\n    applicable merge strategy, but often you'll have homogeneous \n    types in your dicts, so specifying a merge technique can be \n    valuable.)\n\n    Examples:\n\n    &gt;&gt;&gt; d1\n    {'a': 1, 'c': 3, 'b': 2}\n    &gt;&gt;&gt; merge(d1, d1)\n    {'a': 1, 'c': 3, 'b': 2}\n    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)\n    {'a': 2, 'c': 6, 'b': 4}\n\n    \"\"\"\n    result = dict(d1)\n    for k,v in d2.iteritems():\n        if k in result:\n            result[k] = merge_fn(result[k], v)\n        else:\n            result[k] = v\n    return result\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1410638181, 
      "creation_date": 1220555305, 
      "score": 48, 
      "owner": {
        "user_id": 3446, 
        "profile_image": "https://www.gravatar.com/avatar/b785d79619fc2a21e66d5b849341952a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6721, 
        "link": "http://stackoverflow.com/users/3446/rcreswick", 
        "accept_rate": 68, 
        "display_name": "rcreswick"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1410638181, 
      "answer_id": 44512
    }, 
    {
      "body": "<p>Abuse leading to a one-expression solution for <a href=\"http://stackoverflow.com/a/39437/15055\">Matthew's answer</a>:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = (lambda f=x.copy(): (f.update(y), f)[1])()\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n\n<p>You said you wanted one expression, so I abused <code>lambda</code> to bind a name, and tuples to override lambda's one-expression limit. Feel free to cringe.</p>\n\n<p>You could also do this of course if you don't care about copying it:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = (x.update(y), x)[1]\n&gt;&gt;&gt; z\n{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1410637938, 
      "creation_date": 1375910588, 
      "score": 5, 
      "owner": {
        "user_id": 15055, 
        "profile_image": "https://www.gravatar.com/avatar/7f71287b47b7189d11fe6d3fbc7ed2fe?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 64086, 
        "link": "http://stackoverflow.com/users/15055/claudiu", 
        "accept_rate": 80, 
        "display_name": "Claudiu"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1410637938, 
      "answer_id": 18114065
    }, 
    {
      "body": "<p>Here is some code, it seems to work ok:</p>\n\n<pre><code>def merge(d1, d2, mode=0):\n    if not type(d2) is dict:\n        raise Exception(\"d2 is not a dict\")\n\n    if not type(d1) is dict:\n        if mode == 0:\n            raise Exception(\"d1 is not a dict\")\n        return d2\n\n    result = dict(d1)\n\n    for k, v in d2.iteritems():\n        if k in result and type(v) is dict:\n            result[k] = merge(result[k], v, 1)\n        else:\n            if mode == 1:\n                result.update(d2)\n            else:\n                result[k] = v\n    return result\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1410637887, 
      "creation_date": 1373526792, 
      "score": 1, 
      "owner": {
        "user_id": 2571462, 
        "profile_image": "https://www.gravatar.com/avatar/f956ea98997414916a023c2e679dc90f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/2571462/user2571462", 
        "display_name": "user2571462"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1410637887, 
      "answer_id": 17587183
    }, 
    {
      "body": "<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=\"https://docs.python.org/2/library/copy.html\">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>\n\n<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>\n\n<p>In terms of <a href=\"https://docs.python.org/2/library/timeit.html\">time</a>:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.Timer(\"dict(x, **y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.52571702003479\n&gt;&gt;&gt; timeit.Timer(\"temp = x.copy()\\ntemp.update(y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.694622993469238\n&gt;&gt;&gt; timeit.Timer(\"dict(x.items() + y.items())\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n41.484580039978027\n</code></pre>\n\n<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1407282962, 
      "creation_date": 1220872614, 
      "score": 121, 
      "owner": {
        "user_id": 4966, 
        "profile_image": "https://www.gravatar.com/avatar/929fba6f82f04811b09c16df239bbb21?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4970, 
        "link": "http://stackoverflow.com/users/4966/tony-meyer", 
        "accept_rate": 60, 
        "display_name": "Tony Meyer"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1407282962, 
      "answer_id": 49492
    }, 
    {
      "body": "<p>I have a solution which is not specified here(Man I LOVE python) :-)</p>\n\n<pre><code>z = {}\nz.update(x) or z.update(y)\n</code></pre>\n\n<p>This will not update x as well as y. Performance? I don't think it will be terribly slow :-)</p>\n\n<p>NOTE: It is supposed to be 'or' operation and not 'and' operation. Edited to correct the code.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1403757403, 
      "creation_date": 1386230525, 
      "score": 2, 
      "owner": {
        "user_id": 850018, 
        "profile_image": "https://www.gravatar.com/avatar/258f18621477cf95a3639ca6de2bf651?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 471, 
        "link": "http://stackoverflow.com/users/850018/thiruvenkadam", 
        "accept_rate": 100, 
        "display_name": "thiruvenkadam"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1403757403, 
      "answer_id": 20394520
    }, 
    {
      "body": "<pre><code>def magic_add(*dictionaries):\n #Getting one dictionary from *dictionaries\n    return reduce(lambda dict1, dict2: dict(dict1.items() + dict2.items()), dictionaries)\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1401194898, 
      "creation_date": 1401194898, 
      "score": -2, 
      "owner": {
        "user_id": 2424174, 
        "profile_image": "https://www.gravatar.com/avatar/8aef80eeee8e7006fe692ec084613c2a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/2424174/user2424174", 
        "accept_rate": 50, 
        "display_name": "user2424174"
      }, 
      "is_accepted": false, 
      "answer_id": 23889874
    }, 
    {
      "body": "<p>It's so silly that <code>.update</code> returns nothing.<br>\nI just use a simple helper function to solve the problem:</p>\n\n<pre><code>def merge(dict1,*dicts):\n    for dict2 in dicts:\n        dict1.update(dict2)\n    return dict1\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>merge(dict1,dict2)\nmerge(dict1,dict2,dict3)\nmerge(dict1,dict2,dict3,dict4)\nmerge({},dict1,dict2)  # this one returns a new copy\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1393724679, 
      "creation_date": 1393724679, 
      "score": 1, 
      "owner": {
        "user_id": 25700, 
        "profile_image": "https://www.gravatar.com/avatar/25d524bf8c1ba77469fe3f3de416335a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6535, 
        "link": "http://stackoverflow.com/users/25700/getfree", 
        "accept_rate": 77, 
        "display_name": "GetFree"
      }, 
      "is_accepted": false, 
      "answer_id": 22122836
    }, 
    {
      "body": "<p>The problem I have with solutions listed to date is that, in the merged dictionary, the value for key \"b\" is 10 but, to my way of thinking, it should be 12.\nIn that light, I present the following:</p>\n\n<pre><code>import timeit\n\nn=100000\nsu = \"\"\"\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\"\"\"\n\ndef timeMerge(f,su,niter):\n    print \"{:4f} sec for: {:30s}\".format(timeit.Timer(f,setup=su).timeit(n),f)\n\ntimeMerge(\"dict(x, **y)\",su,n)\ntimeMerge(\"x.update(y)\",su,n)\ntimeMerge(\"dict(x.items() + y.items())\",su,n)\ntimeMerge(\"for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k] \",su,n)\n\n#confirm for loop adds b entries together\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nfor k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\nprint \"confirm b elements are added:\",x\n</code></pre>\n\n<h1>Results:</h1>\n\n<pre><code>0.049465 sec for: dict(x, **y)\n0.033729 sec for: x.update(y)                   \n0.150380 sec for: dict(x.items() + y.items())   \n0.083120 sec for: for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\n\nconfirm b elements are added: {'a': 1, 'c': 11, 'b': 12}\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1386094314, 
      "creation_date": 1386094314, 
      "score": 4, 
      "owner": {
        "user_id": 3062691, 
        "profile_image": "https://www.gravatar.com/avatar/0fdbda250dd4c10f2e0a354bc26db42b?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/3062691/upandacross", 
        "display_name": "upandacross"
      }, 
      "is_accepted": false, 
      "answer_id": 20358548
    }, 
    {
      "body": "<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; x, z = dict(x), x.update(y) or x\n&gt;&gt;&gt; x\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; y\n{'c': 11, 'b': 10}\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1384336891, 
      "creation_date": 1384336891, 
      "score": 4, 
      "owner": {
        "user_id": 174728, 
        "profile_image": "https://www.gravatar.com/avatar/b6503ff011243d513f9bcc65bbce6d03?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 113386, 
        "link": "http://stackoverflow.com/users/174728/gnibbler", 
        "accept_rate": 100, 
        "display_name": "gnibbler"
      }, 
      "is_accepted": false, 
      "answer_id": 19950727
    }, 
    {
      "body": "<p>In python3, the <code>items</code> method <a href=\"http://docs.python.org/dev/whatsnew/3.0.html#views-and-iterators-instead-of-lists\">no longer returns a list</a>, but rather a <em>view</em>, which acts like a set. In this case you'll need to take the set union since concatenating with <code>+</code> won't work:</p>\n\n<pre><code>dict(x.items() | y.items())\n</code></pre>\n\n<p>For python3-like behavior in version 2.7, the <code>viewitems</code> method should work in place of <code>items</code>:</p>\n\n<pre><code>dict(x.viewitems() | y.viewitems())\n</code></pre>\n\n<p>I prefer this notation anyways since it seems more natural to think of it as a set union operation rather than concatenation (as the title shows).</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>A couple more points for python 3. First, note that the <code>dict(x, **y)</code> trick won't work in python 3 unless the keys in <code>y</code> are strings.</p>\n\n<p>Also, Raymond Hettinger's Chainmap <a href=\"http://stackoverflow.com/a/16259217/386279\">answer</a> is pretty elegant, since it can take an arbitrary number of dicts as arguments, but <a href=\"http://docs.python.org/dev/library/collections\">from the docs</a> it looks like it sequentially looks through a list of all the dicts for each lookup:</p>\n\n<blockquote>\n  <p>Lookups search the underlying mappings successively until a key is found.</p>\n</blockquote>\n\n<p>This can slow you down if you have a lot of lookups in your application:</p>\n\n<pre><code>In [1]: from collections import ChainMap\nIn [2]: from string import ascii_uppercase as up, ascii_lowercase as lo; x = dict(zip(lo, up)); y = dict(zip(up, lo))\nIn [3]: chainmap_dict = ChainMap(y, x)\nIn [4]: union_dict = dict(x.items() | y.items())\nIn [5]: timeit for k in union_dict: union_dict[k]\n100000 loops, best of 3: 2.15 \u00b5s per loop\nIn [6]: timeit for k in chainmap_dict: chainmap_dict[k]\n10000 loops, best of 3: 27.1 \u00b5s per loop\n</code></pre>\n\n<p>So about an order of magnitude slower for lookups. I'm a fan of Chainmap, but looks less practical where there may be many lookups.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1381757249, 
      "creation_date": 1381342148, 
      "score": 7, 
      "owner": {
        "user_id": 386279, 
        "profile_image": "https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2529, 
        "link": "http://stackoverflow.com/users/386279/bird-jaguar-iv", 
        "accept_rate": 87, 
        "display_name": "Bird Jaguar IV"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1381757249, 
      "answer_id": 19279501
    }, 
    {
      "body": "<h1>Recursively/deep update a dict</h1>\n\n<pre><code>def deepupdate(original, update):\n    \"\"\"\n    Recursively update a dict.\n    Subdict's won't be overwritten but also updated.\n    \"\"\"\n    for key, value in original.iteritems(): \n        if not key in update:\n            update[key] = value\n        elif isinstance(value, dict):\n            deepupdate(value, update[key]) \n    return update</code></pre>\n\n<p>Demonstration:</p>\n\n<pre><code>pluto_original = {\n    'name': 'Pluto',\n    'details': {\n        'tail': True,\n        'color': 'orange'\n    }\n}\n\npluto_update = {\n    'name': 'Pluutoo',\n    'details': {\n        'color': 'blue'\n    }\n}\n\nprint deepupdate(pluto_original, pluto_update)</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>{\n    'name': 'Pluutoo',\n    'details': {\n        'color': 'blue',\n        'tail': True\n    }\n}</code></pre>\n\n<p>Thanks rednaw for edits.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1381176396, 
      "creation_date": 1322567535, 
      "score": 13, 
      "owner": {
        "user_id": 471393, 
        "profile_image": "https://www.gravatar.com/avatar/8fd227a5903415eb9c7bb6b8f2768084?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1725, 
        "link": "http://stackoverflow.com/users/471393/stanislav", 
        "accept_rate": 67, 
        "display_name": "Stanislav"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1381176396, 
      "answer_id": 8310229
    }, 
    {
      "body": "<p><code>**</code> creates an intermediary dict, which means that the total number of copies\nis actually higher doing the <code>dict(one, **two)</code> form, but all that happens in C\nso it's still generally faster than going to itertools, unless there are a huge number of copies (or, probably, if the copies are very expensive). As always if you actually care about speed you should time your use case.</p>\n\n<p>Timing on Python 2.7.3 with an empty dict:</p>\n\n<pre><code>$ python -m timeit \"dict({}, **{})\"\n1000000 loops, best of 3: 0.405 usec per loop\n\n$ python -m timeit -s \"from itertools import chain\" \\\n    \"dict(chain({}.iteritems(), {}.iteritems()))\"\n1000000 loops, best of 3: 1.18 usec per loop\n</code></pre>\n\n<p>With 10,000 (tiny) items:</p>\n\n<pre><code>$ python -m timeit -s 'd = {i: str(i) for i in xrange(10000)}' \\\n    \"dict(d, **d)\"\n1000 loops, best of 3: 550 usec per loop\n\n$ python -m timeit -s \"from itertools import chain\" -s 'd = {i: str(i) for i in xrange(10000)}' \\\n    \"dict(chain(d.iteritems(), d.iteritems()))\"\n1000 loops, best of 3: 1.11 msec per loop\n</code></pre>\n\n<p>With 100,000 items:</p>\n\n<pre><code>$ python -m timeit -s 'd = {i: str(i) for i in xrange(100000)}' \\\n    \"dict(d, **d)\"\n10 loops, best of 3: 19.6 msec per loop\n\n$ python -m timeit -s \"from itertools import chain\" -s 'd = {i: str(i) for i in xrange(100000)}' \\\n    \"dict(chain(d.iteritems(), d.iteritems()))\"\n10 loops, best of 3: 20.1 msec per loop\n</code></pre>\n\n<p>With 1,000,000 items:</p>\n\n<pre><code>$ python -m timeit -s 'd = {i: str(i) for i in xrange(1000000)}' \\\n    \"dict(d, **d)\"\n10 loops, best of 3: 273 msec per loop\n\n$ python -m timeit -s \"from itertools import chain\" -s 'd = {i: str(i) for i in xrange(1000000)}' \\\n    \"dict(chain(d.iteritems(), d.iteritems()))\"\n10 loops, best of 3: 233 msec per loop\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1378498738, 
      "creation_date": 1378498738, 
      "score": 2, 
      "owner": {
        "user_id": 25616, 
        "profile_image": "https://www.gravatar.com/avatar/026a7df26cfba1100757dae52a46a3df?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2812, 
        "link": "http://stackoverflow.com/users/25616/quodlibetor", 
        "accept_rate": 84, 
        "display_name": "quodlibetor"
      }, 
      "is_accepted": false, 
      "answer_id": 18665968
    }, 
    {
      "body": "<p>Drawing on ideas here and elsewhere I've comprehended a function:</p>\n\n<pre><code>def merge(*dicts, **kv): \n      return { k:v for d in list(dicts) + [kv] for k,v in d.items() }\n</code></pre>\n\n<p>Usage (tested in python 3):</p>\n\n<pre><code>assert (merge({1:11,'a':'aaa'},{1:99, 'b':'bbb'},foo='bar')==\\\n    {1: 99, 'foo': 'bar', 'b': 'bbb', 'a': 'aaa'})\n\nassert (merge(foo='bar')=={'foo': 'bar'})\n\nassert (merge({1:11},{1:99},foo='bar',baz='quux')==\\\n    {1: 99, 'foo': 'bar', 'baz':'quux'})\n\nassert (merge({1:11},{1:99})=={1: 99})\n</code></pre>\n\n<p>You could use a lambda instead.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1374212959, 
      "creation_date": 1374212959, 
      "score": 4, 
      "owner": {
        "user_id": 375570, 
        "profile_image": "https://www.gravatar.com/avatar/e21580d3238dfce3b9b68d8a87108e12?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1209, 
        "link": "http://stackoverflow.com/users/375570/bijou-trouvaille", 
        "accept_rate": 70, 
        "display_name": "Bijou Trouvaille"
      }, 
      "is_accepted": false, 
      "answer_id": 17738920
    }, 
    {
      "body": "<p>Using  a dict comprehension, you may</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\ndc = {xi:(x[xi] if xi not in list(y.keys()) \n           else y[xi]) for xi in list(x.keys())+(list(y.keys()))}\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>&gt;&gt;&gt; dc\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n\n<p>Note the syntax for <code>if else</code> in comprehension </p>\n\n<pre><code>{ (some_key if condition else default_key):(something_if_true if condition \n          else something_if_false) for key, value in dict_.items() }\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1369645460, 
      "creation_date": 1369645460, 
      "score": 2, 
      "owner": {
        "user_id": 1141493, 
        "profile_image": "https://www.gravatar.com/avatar/a2d49ab7bed0c38ddcb7beba77a92a54?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5606, 
        "link": "http://stackoverflow.com/users/1141493/octoback", 
        "accept_rate": 100, 
        "display_name": "octoback"
      }, 
      "is_accepted": false, 
      "answer_id": 16769722
    }, 
    {
      "body": "<p>This is all way too complicated.</p>\n\n<p>Simple:</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x,**y)\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1366151027, 
      "creation_date": 1366151027, 
      "score": 2, 
      "owner": {
        "user_id": 2288435, 
        "profile_image": "https://www.gravatar.com/avatar/69e5a5a5b8b7632e94d1045043f4e083?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 89, 
        "link": "http://stackoverflow.com/users/2288435/shea-lafayette-valentine", 
        "display_name": "Shea Lafayette Valentine"
      }, 
      "is_accepted": false, 
      "answer_id": 16048225
    }, 
    {
      "body": "<p><strong>Two dictionaries</strong></p>\n\n<pre><code>def union2(dict1, dict2):\n    return dict(list(dict1.items()) + list(dict2.items()))\n</code></pre>\n\n<p><strong><em>n</em> dictionaries</strong></p>\n\n<pre><code>def union(*dicts):\n    return dict(sum(map(lambda dct: list(dct.items()), dicts), []))\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import itertools\n\ndef union(*dicts):\n    return dict(itertools.chain(*map(lambda dct: list(dct.items()), dicts)))\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1350439785, 
      "creation_date": 1350439785, 
      "score": 5, 
      "owner": {
        "user_id": 122894, 
        "profile_image": "https://www.gravatar.com/avatar/a84beda8be2bea9e2e052c72b52114de?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 158, 
        "link": "http://stackoverflow.com/users/122894/mathieu", 
        "display_name": "Mathieu"
      }, 
      "is_accepted": false, 
      "answer_id": 12926103
    }, 
    {
      "body": "<p>In your case, what you can do is:</p>\n\n<pre><code>z = dict(x.items() + y.items())\n</code></pre>\n\n<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = dict(x.items() + y.items())\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n\n<p>If you use Python 3, it is only a little more complicated.  To create <code>z</code>:</p>\n\n<pre><code>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1346084308, 
      "creation_date": 1220341812, 
      "score": 1107, 
      "owner": {
        "user_id": 2900, 
        "profile_image": "https://www.gravatar.com/avatar/f5dc647e1f30b6127527da3dbfdaba73?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 19542, 
        "link": "http://stackoverflow.com/users/2900/thomas-vander-stichele", 
        "accept_rate": 42, 
        "display_name": "Thomas Vander Stichele"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1346084308, 
      "answer_id": 38990
    }, 
    {
      "body": "<pre><code>def dict_merge(a, b):\n  c = a.copy()\n  c.update(b)\n  return c\n\nnew = dict_merge(old, extras)\n</code></pre>\n\n<p>Among such shady and dubious answers, this shining example is the one and only good way to merge dicts in Python, endorsed by dictator for life <em>Guido van Rossum</em> himself!  Someone else suggested half of this, but did not put it in a function.</p>\n\n<pre><code>print dict_merge(\n      {'color':'red', 'model':'Mini'},\n      {'model':'Ferrari', 'owner':'Carl'})\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>{'color': 'red', 'owner': 'Carl', 'model': 'Ferrari'}\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1344245407, 
      "creation_date": 1344245084, 
      "score": 15, 
      "owner": {
        "user_id": 218294, 
        "profile_image": "https://www.gravatar.com/avatar/6ecbae898b5088d092feea0f82ae5ffb?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1607, 
        "link": "http://stackoverflow.com/users/218294/sam-watkins", 
        "display_name": "Sam Watkins"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1344245407, 
      "answer_id": 11825563
    }, 
    {
      "body": "<p>Even though the answers were good for this <em>shallow</em> dictionary, none of the methods defined here actually do a deep dictionary merge.</p>\n\n<p>Examples follow:</p>\n\n<pre><code>a = { 'one': { 'depth_2': True }, 'two': True }\nb = { 'one': { 'extra': False } }\nprint dict(a.items() + b.items())\n</code></pre>\n\n<p>One would expect a result of something like this:</p>\n\n<pre><code>{ 'one': { 'extra': False', 'depth_2': True }, 'two': True }\n</code></pre>\n\n<p>Instead, we get this:</p>\n\n<pre><code>{'two': True, 'one': {'extra': False}}\n</code></pre>\n\n<p>The 'one' entry should have had 'depth_2' and 'extra' as items inside its dictionary if it truly was a merge.</p>\n\n<p>Using chain also, does not work:</p>\n\n<pre><code>from itertools import chain\nprint dict(chain(a.iteritems(), b.iteritems()))\n</code></pre>\n\n<p>Results in:</p>\n\n<pre><code>{'two': True, 'one': {'extra': False}}\n</code></pre>\n\n<p>The deep merge that rcwesick gave also creates the same result.</p>\n\n<p>Yes, it will work to merge the sample dictionaries, but none of them are a generic mechanism to merge.  I'll update this later once I write a method that does a true merge.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1344037010, 
      "creation_date": 1344037010, 
      "score": 4, 
      "owner": {
        "user_id": 1575349, 
        "profile_image": "https://www.gravatar.com/avatar/beaad49077b11a2cee897dd81a3115d1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 49, 
        "link": "http://stackoverflow.com/users/1575349/thanh-lim", 
        "display_name": "Thanh Lim"
      }, 
      "is_accepted": false, 
      "answer_id": 11804613
    }, 
    {
      "body": "<p>If you think lambdas are evil then read no further.\nAs requested, you can write the fast and memory-efficient solution with one expression:</p>\n\n<pre><code>x = {'a':1, 'b':2}\ny = {'b':10, 'c':11}\nz = (lambda a, b: (lambda a_copy: a_copy.update(b) or a_copy)(a.copy()))(x, y)\nprint z\n{'a': 1, 'c': 11, 'b': 10}\nprint x\n{'a': 1, 'b': 2}\n</code></pre>\n\n<p>As suggested above, using two lines or writing a function is probably a better way to go.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1322072448, 
      "creation_date": 1322071703, 
      "score": 12, 
      "owner": {
        "user_id": 364984, 
        "profile_image": "https://www.gravatar.com/avatar/a529fd1ad1f897ff720065bd6de1738e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 179, 
        "link": "http://stackoverflow.com/users/364984/ems", 
        "display_name": "EMS"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1322072448, 
      "answer_id": 8247023
    }, 
    {
      "body": "<p>While the question has already been answered several times,\nthis simple solution to the problem has not been listed yet.</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz4 = {}\nz4.update(x)\nz4.update(y)\n</code></pre>\n\n<p>It is as fast as z0 and the evil z2 mentioned above, but easy to understand and change.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1318608753, 
      "creation_date": 1318608753, 
      "score": 17, 
      "owner": {
        "user_id": 509648, 
        "profile_image": "https://www.gravatar.com/avatar/9e12d88aff59b3cb0d8269ad7218e1b0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 697, 
        "link": "http://stackoverflow.com/users/509648/phobie", 
        "display_name": "phobie"
      }, 
      "is_accepted": false, 
      "answer_id": 7770473
    }, 
    {
      "body": "<p>Another, more concise, option:</p>\n\n<pre><code>z = dict(x, **y)\n</code></pre>\n\n<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in CPython 3.2, or in PyPy, IronPython, or Jython. Also, <a href=\"http://mail.python.org/pipermail/python-dev/2010-April/099459.html\">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1305248586, 
      "creation_date": 1220370727, 
      "score": 189, 
      "owner": {
        "user_id": 3207, 
        "profile_image": "https://www.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 33516, 
        "link": "http://stackoverflow.com/users/3207/carl-meyer", 
        "accept_rate": 100, 
        "display_name": "Carl Meyer"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1305248586, 
      "answer_id": 39858
    }, 
    {
      "body": "<p>The best version I could think while not using copy would be:</p>\n\n<pre><code>from itertools import chain\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\ndict(chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<p>It's faster than <code>dict(x.items() + y.items())</code> but not as fast as <code>n = copy(a); n.update(b)</code>, at least on CPython. This version also works in Python 3 if you change <code>iteritems()</code> to <code>items()</code>, which is automatically done by the 2to3 tool.</p>\n\n<p>Personally I like this version best because it describes fairly good what I want in a single  functional syntax. The only minor problem is that it doesn't make completely obvious that values from y takes precedence over values from x, but I don't believe it's difficult to figure that out.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1287082515, 
      "creation_date": 1287082515, 
      "score": 27, 
      "owner": {
        "user_id": 72476, 
        "profile_image": "https://www.gravatar.com/avatar/21ee2bfa3032b1db6cce0e0b6a9fc143?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 718, 
        "link": "http://stackoverflow.com/users/72476/driax", 
        "accept_rate": 75, 
        "display_name": "driax"
      }, 
      "is_accepted": false, 
      "answer_id": 3936548
    }, 
    {
      "body": "<p>An alternative:</p>\n\n<pre><code>z = x.copy()\nz.update(y)\n</code></pre>\n", 
      "question_id": 38987, 
      "last_activity_date": 1220360446, 
      "creation_date": 1220360446, 
      "score": 388, 
      "owner": {
        "user_id": 188, 
        "profile_image": "https://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 17314, 
        "link": "http://stackoverflow.com/users/188/matthew-schinckel", 
        "accept_rate": 100, 
        "display_name": "Matthew Schinckel"
      }, 
      "is_accepted": false, 
      "answer_id": 39437
    }, 
    {
      "body": "<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x.items() + y.items())\nprint z\n</code></pre>\n\n<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>\n", 
      "question_id": 38987, 
      "last_activity_date": 1220341767, 
      "creation_date": 1220341767, 
      "score": 17, 
      "owner": {
        "user_id": 893, 
        "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 391262, 
        "link": "http://stackoverflow.com/users/893/greg-hewgill", 
        "accept_rate": 87, 
        "display_name": "Greg Hewgill"
      }, 
      "is_accepted": false, 
      "answer_id": 38989
    }
  ], 
  "18686860": [
    {
      "body": "<p>Here's my contribution:</p>\n\n<pre><code>def rev(test):  \n    test = list(test)\n    i = len(test)-1\n    result = []\n\n    print test\n    while i &gt;= 0:\n        result.append(test.pop(i))\n        i -= 1\n    return \"\".join(result)\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1421454169, 
      "creation_date": 1421454169, 
      "score": 1, 
      "owner": {
        "user_id": 1303778, 
        "profile_image": "https://www.gravatar.com/avatar/a8f6e081c25c869790a07f0dee269821?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 45, 
        "link": "http://stackoverflow.com/users/1303778/fra", 
        "display_name": "fra"
      }, 
      "is_accepted": false, 
      "answer_id": 27994819
    }, 
    {
      "body": "<p>You can do simply like this</p>\n\n<pre><code>def rev(str):\n   rev = \"\"\n   for i in range(0,len(str)):\n   rev = rev + str[(len(str)-1)-i]\n   print rev\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1420548795, 
      "creation_date": 1420548795, 
      "score": 0, 
      "owner": {
        "user_id": 2745512, 
        "profile_image": "https://www.gravatar.com/avatar/f7cc3fd3603d22f98f7e601cff9db18a?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 23, 
        "link": "http://stackoverflow.com/users/2745512/vijay-kumar-k", 
        "display_name": "vijay kumar k"
      }, 
      "is_accepted": false, 
      "answer_id": 27799081
    }, 
    {
      "body": "<p>This is my solution using the for i in range loop:</p>\n\n<pre><code>def reverse(string):\n    tmp = \"\"\n    for i in range(1,len(string)+1):\n        tmp += string[len(string)-i]            \n    return tmp\n</code></pre>\n\n<p>It's pretty easy to understand. I start from 1 to avoid index out of bound.</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1420464997, 
      "creation_date": 1420463836, 
      "score": 0, 
      "owner": {
        "user_id": 4420152, 
        "profile_image": "https://lh4.googleusercontent.com/-PeffrfwmJN0/AAAAAAAAAAI/AAAAAAAAADI/EPp1pvwqd70/photo.jpg?sz=128", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/4420152/stefano-saitta", 
        "display_name": "Stefano Saitta"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420464997, 
      "answer_id": 27780382
    }, 
    {
      "body": "<pre><code>def reverseThatString(theString):\n    reversedString = \"\"\n    lenOfString = len(theString)\n    for i,j in enumerate(theString):\n        lenOfString -= 1\n        reversedString += theString[lenOfString]\n    return reversedString\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1417084137, 
      "creation_date": 1417084137, 
      "score": 1, 
      "owner": {
        "user_id": 2351611, 
        "profile_image": "http://i.stack.imgur.com/dNzH8.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/2351611/mattshirtliffe", 
        "display_name": "mattshirtliffe"
      }, 
      "is_accepted": false, 
      "answer_id": 27168344
    }, 
    {
      "body": "<p>My solution:</p>\n\n<p>s = raw_input(\"Enter string \")<br>\nprint<br>\ndef reverse(text):  </p>\n\n<pre><code>st = \"\"  \nrev = \"\"  \ncount = len(text)  \nprint \"Lenght of text: \", len(text)  \nprint  \nfor c in range(len(text)):  \n    count = count - 1  \n    st = st + \"\".join(text[c])  \n    rev = rev + \"\".join(text[count])  \n    print \"count:       \", count  \n    print \"print c:     \", c  \n    print \"text[c]:     \", text[c]  \n    print  \nprint \"Original:    \", st  \nprint \"Reversed:    \", rev  \nreturn rev  \n</code></pre>\n\n<p>reverse(s)</p>\n\n<p>Result screen  </p>\n\n<p>Enter string  joca  </p>\n\n<p>Lenght of text:  4  </p>\n\n<p>count:        3<br>\nprint c:      0<br>\ntext[c]:      j  </p>\n\n<p>count:        2<br>\nprint c:      1<br>\ntext[c]:      o  </p>\n\n<p>count:        1<br>\nprint c:      2<br>\ntext[c]:      c  </p>\n\n<p>count:        0<br>\nprint c:      3<br>\ntext[c]:      a  </p>\n\n<p>Original:     joca<br>\nReversed:     acoj<br>\nNone</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1416962706, 
      "creation_date": 1416962180, 
      "score": 1, 
      "owner": {
        "user_id": 2513899, 
        "profile_image": "https://www.gravatar.com/avatar/fd90f94e0acc00e828820b3c76069cb6?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/2513899/jovica", 
        "display_name": "Jovica"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1416962706, 
      "answer_id": 27139401
    }, 
    {
      "body": "<p>The way I can think of without using any built-in functions:</p>\n\n<pre><code>a = 'word'\ncount = 0\nfor letter in a:\n    count += 1\n\nb = ''\nfor letter in a:\n    b += a[count-1]\n    count -= 1\n</code></pre>\n\n<p>And if you print b:</p>\n\n<pre><code>print b\ndrow\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1414710944, 
      "creation_date": 1414710944, 
      "score": 0, 
      "owner": {
        "user_id": 2242941, 
        "profile_image": "https://www.gravatar.com/avatar/848962721f731bf95673f4bcf79a9965?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2242941/sunny-mui", 
        "display_name": "Sunny Mui"
      }, 
      "is_accepted": false, 
      "answer_id": 26665044
    }, 
    {
      "body": "<p>You've received a lot of alternative answers, but just to add another simple solution -- the first thing that came to mind something like this:</p>\n\n<pre><code>def reverse(text):\n    reversed_text = \"\"   \n\n    for n in range(len(text)):\n        reversed_text += text[-1 - n]\n\n    return reversed_text\n</code></pre>\n\n<p>It's not as fast as some of the other options people have mentioned(or built in methods), but easy to follow as we're simply using the length of the <code>text</code> string to concatenate one character at a time by slicing from the end toward the front. </p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1410725459, 
      "creation_date": 1410725459, 
      "score": 1, 
      "owner": {
        "user_id": 3246395, 
        "profile_image": "https://www.gravatar.com/avatar/3f4d2588829c8fd2a19be1d5a9a5888f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/3246395/perryaj", 
        "display_name": "PerryAJ"
      }, 
      "is_accepted": false, 
      "answer_id": 25837547
    }, 
    {
      "body": "<p>I used this:</p>\n\n<pre><code>def reverse(text):\ns=\"\"\nl=len(text)\nfor i in range(l):\n    s+=text[l-1-i]\nreturn s\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1405829969, 
      "creation_date": 1405829969, 
      "score": 2, 
      "owner": {
        "user_id": 2624779, 
        "profile_image": "https://www.gravatar.com/avatar/8aac6abace802a2e27be37537cd79d74?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/2624779/sumit-kushwaha", 
        "display_name": "Sumit Kushwaha"
      }, 
      "is_accepted": false, 
      "answer_id": 24847325
    }, 
    {
      "body": "<p>Pointfree:</p>\n\n<pre><code>from functools import partial\nfrom operator import add\n\nflip = lambda f: lambda x, y: f(y, x)\nrev = partial(reduce, flip(add))\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>&gt;&gt;&gt; rev('hello')\n'olleh'\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1404940666, 
      "creation_date": 1404940666, 
      "score": 0, 
      "owner": {
        "user_id": 395321, 
        "profile_image": "https://www.gravatar.com/avatar/0b96987a2d3f2717611753f88480c6c9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5057, 
        "link": "http://stackoverflow.com/users/395321/pillmuncher", 
        "display_name": "pillmuncher"
      }, 
      "is_accepted": false, 
      "answer_id": 24663970
    }, 
    {
      "body": "<p>Only been coding Python for a few days, but I feel like this was a fairly clean solution. Create an empty list, loop through each letter in the string and append it to the front of the list, return the joined list as a string.</p>\n\n<pre><code>def reverse(text):\nbackwardstext = []\nfor letter in text:\n    backwardstext.insert(0, letter)\nreturn ''.join(backwardstext)\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1404938310, 
      "creation_date": 1404938310, 
      "score": 4, 
      "owner": {
        "user_id": 3355359, 
        "profile_image": "http://graph.facebook.com/1612680052/picture?type=large", 
        "user_type": "registered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/3355359/user3355359", 
        "display_name": "user3355359"
      }, 
      "is_accepted": false, 
      "answer_id": 24663370
    }, 
    {
      "community_owned_date": 1404815771, 
      "body": "<p>You can simply reverse iterate your string starting from the last character. With python you can use list comprehension to construct the list of characters in reverse order and then join them to get the reversed string in a one-liner:</p>\n\n<pre><code>def reverse(s):\n  return \"\".join([s[-i-1] for i in xrange(len(s))])\n</code></pre>\n\n<p>if you are not allowed to even use negative indexing you should replace <code>s[-i-1]</code> with <code>s[len(s)-i-1]</code></p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1404816145, 
      "creation_date": 1404767887, 
      "score": 0, 
      "owner": {
        "user_id": 1221660, 
        "profile_image": "https://www.gravatar.com/avatar/a36c2a6d308a878faba903e217014094?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5159, 
        "link": "http://stackoverflow.com/users/1221660/emanuele-paolini", 
        "accept_rate": 54, 
        "display_name": "Emanuele Paolini"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1404816145, 
      "answer_id": 24620050
    }, 
    {
      "body": "<p>You can also do it with recursion:</p>\n\n<pre><code>def reverse(text):\n    if len(text) &lt;= 1:\n        return text\n\n    return reverse(text[1:]) + text[0]\n</code></pre>\n\n<p>And a simple example for the string <code>hello</code>:</p>\n\n<pre><code>   reverse(hello)\n = reverse(ello) + h           # The recursive step\n = reverse(llo) + e + h\n = reverse(lo) + l + e + h\n = reverse(o) + l + l + e + h  # Base case\n = o + l + l + e + h\n = olleh\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1404771519, 
      "creation_date": 1378663145, 
      "score": 24, 
      "owner": {
        "user_id": 464744, 
        "profile_image": "https://www.gravatar.com/avatar/3dfd6067f4c69986a652444f44bb6d7c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 120440, 
        "link": "http://stackoverflow.com/users/464744/blender", 
        "accept_rate": 86, 
        "display_name": "Blender"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1404771519, 
      "answer_id": 18686882
    }, 
    {
      "body": "<p>Not very clever, but tricky solution</p>\n\n<pre><code>def reverse(t):\n    for j in range(len(t) // 2):\n        t = t[:j] + t[- j - 1] + t[j + 1:- j - 1] + t[j] + t[len(t) - j:]\n    return t\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1404767168, 
      "creation_date": 1404767168, 
      "score": 0, 
      "owner": {
        "user_id": 2486969, 
        "profile_image": "https://www.gravatar.com/avatar/aefbe93a6b16491a34bb0a6fe058a89e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2486969/dmitry-kovalov", 
        "display_name": "Dmitry_Kovalov"
      }, 
      "is_accepted": false, 
      "answer_id": 24619884
    }, 
    {
      "body": "<p>All I did to achieve a reverse string is use the <code>xrange</code> function with the length of the string in a for loop and step back per the following:</p>\n\n<pre><code>myString = \"ABC\"\n\nfor index in xrange(len(myString),-1):\n    print index\n</code></pre>\n\n<p>My output is \"CBA\"</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1403364405, 
      "creation_date": 1403362596, 
      "score": 1, 
      "owner": {
        "user_id": 3763098, 
        "profile_image": "https://www.gravatar.com/avatar/82a4ea6fac6ff185a2d9bfd96de04eb2?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/3763098/usuariodesconocido", 
        "display_name": "usuariodesconocido"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1403364405, 
      "answer_id": 24342801
    }, 
    {
      "body": "<p>I created different versions of how to reverse a string in python in my repo:\n<a href=\"https://github.com/fedmich/Python-Codes/tree/master/Reverse%20a%20String\" rel=\"nofollow\">https://github.com/fedmich/Python-Codes/tree/master/Reverse%20a%20String</a></p>\n\n<p>You can do it by using list-comprehension or <a href=\"https://github.com/fedmich/Python-Codes/blob/master/Reverse%20a%20String/reverse_string3.py\" rel=\"nofollow\">lambda technique</a>:</p>\n\n<pre><code># Reverse a string without using reverse() function\ns = 'Federico';\nli = list( s )  #convert string to list\n\nret = [ li[i-1] for i in xrange(len(li),0,-1)  ]    #1 liner lambda\nprint ( \"\".join( ret ) )\n</code></pre>\n\n<p>or by doing a <a href=\"https://github.com/fedmich/Python-Codes/blob/master/Reverse%20a%20String/reverse_string2.py\" rel=\"nofollow\">backward for loop</a></p>\n\n<pre><code># Reverse a string without using reverse() function\ns = 'Federico';\nr = []\n\nlength = len(s)\nfor i in xrange(length,0,-1):\n    r.append( s[ i - 1] )\n\nprint ( \"\".join(r) )\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1401709745, 
      "creation_date": 1401709745, 
      "score": 2, 
      "owner": {
        "user_id": 227618, 
        "profile_image": "http://www.gravatar.com/avatar/303b0a741a14439b53c23ce4c9e28a12?s=128&amp;d=identicon&amp;r=PG", 
        "user_type": "registered", 
        "reputation": 2672, 
        "link": "http://stackoverflow.com/users/227618/fedmich", 
        "display_name": "fedmich"
      }, 
      "is_accepted": false, 
      "answer_id": 23993833
    }, 
    {
      "body": "<pre><code>def reverse(text):\n    a=\"\"\n    l=len(text)\n    while(l&gt;=1):\n        a+=text[l-1]\n        l-=1\n    return a\n</code></pre>\n\n<p>i just concatenated the string a with highest indexes of text (which keeps on decrementing by 1 each loop).</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1399818861, 
      "creation_date": 1399818861, 
      "score": 1, 
      "owner": {
        "user_id": 3625713, 
        "profile_image": "http://graph.facebook.com/100001102468923/picture?type=large", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/3625713/abhilash-26", 
        "display_name": "Abhilash_26"
      }, 
      "is_accepted": false, 
      "answer_id": 23593877
    }, 
    {
      "body": "<p>I have also just solved the coresponding exercise on codeacademy and wanted to compare my approach to others. I have not found the solution I used so far, so I thought that I sign up here and provide my solution to others. And maybe I get a suggestion or a helpful comment on how to improve the code.</p>\n\n<p>Ok here it goes, I did not use any list to store the string, instead I have just accessed the string index. It took me a bit at first to deal with the len() and index number, but in the end it worked :). </p>\n\n<pre><code>def reverse(x):\nreversestring = \"\"\nfor n in range(len(str(x))-1,-1, -1):\n    reversestring += x[n]\nreturn reversestring \n</code></pre>\n\n<p>I am still wondering if the <code>reversestring = \"\"</code> could be solved in a more elegant way, or if it is \"bad style\" even, but i couldn't find an answer so far.</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1395840996, 
      "creation_date": 1395840996, 
      "score": 1, 
      "owner": {
        "user_id": 3464393, 
        "profile_image": "https://www.gravatar.com/avatar/94fd36d8fcb852cf99d9b8b9babcc775?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/3464393/fadeiar", 
        "display_name": "Fadeiar"
      }, 
      "is_accepted": false, 
      "answer_id": 22662690
    }, 
    {
      "body": "<p>This is a way to do it with a while loop:</p>\n\n<pre><code>def reverse(s):\n    t = -1\n    s2 = ''\n    while abs(t) &lt; len(s) + 1: \n        s2 = s2 + s[t]\n        t  = t - 1\n    return s2\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1395105623, 
      "creation_date": 1395104461, 
      "score": 1, 
      "owner": {
        "user_id": 3431203, 
        "profile_image": "https://www.gravatar.com/avatar/ed363a14598008fbaad7b2250686f100?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/3431203/pythonsam", 
        "display_name": "PythonSam"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1395105623, 
      "answer_id": 22468465
    }, 
    {
      "body": "<p>i just solved this in code academy and was checking my answers and ran across this list. so with a very limited understanding of python i just did this and it seamed to work.</p>\n\n<pre><code>def reverse(s):\n    i = len(s) - 1\n    sNew = ''\n    while  i &gt;= 0:\n        sNew = sNew + str(s[i])\n        i = i -1\n    return sNew\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1394148240, 
      "creation_date": 1394148240, 
      "score": 2, 
      "owner": {
        "user_id": 3390480, 
        "profile_image": "https://www.gravatar.com/avatar/5a1e341625c32703dedd19cf2580e863?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/3390480/dewetha", 
        "display_name": "dewetha"
      }, 
      "is_accepted": false, 
      "answer_id": 22238331
    }, 
    {
      "body": "<p><strong>EDIT</strong></p>\n\n<p>Recent activity on this question caused me to look back and change my solution to a quick one-liner using a generator:</p>\n\n<pre><code>rev = ''.join([text[len(text) - count] for count in xrange(1,len(text)+1)])\n</code></pre>\n\n<p>Although obviously there are some better answers here like a negative step in the range or xrange function. The following is my original solution:</p>\n\n<hr>\n\n<p>Here is my solution, I'll explain it step by step</p>\n\n<pre><code>def reverse(text):\n\n    lst = []\n    count = 1\n\n    for i in range(0,len(text)):\n\n        lst.append(text[len(text)-count])\n        count += 1\n\n    lst = ''.join(lst)\n    return lst\n\nprint reverse('hello')\n</code></pre>\n\n<p>First, we have to pass a parameter to the function, in this case <code>text</code>. </p>\n\n<p>Next, I set an empty list, named <code>lst</code> to use later. (I actually didn't know I'd need the list until I got to the <code>for</code> loop, you'll see why it's necessary in a second.)</p>\n\n<p>The <code>count</code> variable will make sense once I get into the <code>for</code> loop</p>\n\n<p>So let's take a look at a basic version of what we are trying to accomplish:</p>\n\n<p>It makes sense that appending the last character to the list would start the reverse order. For example:</p>\n\n<pre><code>&gt;&gt;lst = []\n&gt;&gt;word = 'foo'\n&gt;&gt;lst.append(word[2])\n&gt;&gt;print lst\n['o']\n</code></pre>\n\n<p>But in order to continue reversing the order, we need to then append <code>word[1]</code> and then <code>word[0]</code>:</p>\n\n<pre><code>&gt;&gt;lst.append(word[2])\n&gt;&gt;lst.append(word[1])\n&gt;&gt;lst.append(word[0])\n&gt;&gt;print lst\n['o','o','f']\n</code></pre>\n\n<p>This is great, we now have a list that has our original word in reverse order and it can be converted back into a string by using <code>.join()</code>. But there's a problem. This works for the word foo, it even works for any word that has a length of 3 characters. But what about a word with 5 characters? Or 10 characters? Now it won't work. What if there was a way we could dynamically change the index we append so that any word will be returned in reverse order? </p>\n\n<p>Enter for loop.</p>\n\n<pre><code>for i in range(0,len(text)):\n\n    lst.append(text[len(text)-count])\n    count += 1\n</code></pre>\n\n<p>First off, it is necessary to use <code>in range()</code> rather than just <code>in</code>, because we need to iterate through the characters in the word, but we also need to pull the index value of the word so that we change the order. </p>\n\n<p>The first part of the body of our for loop should look familiar. Its very similar to</p>\n\n<pre><code>&gt;&gt;lst.append(word[..index..])\n</code></pre>\n\n<p>In fact, the base concept of it is exactly the same:</p>\n\n<pre><code>&gt;&gt;lst.append(text[..index..])\n</code></pre>\n\n<p>So what's all the stuff in the middle doing? </p>\n\n<p>Well, we need to first append the index of the last letter to our list, which is the length of the word, <code>text</code>, -1. From now on we'll refer to it as l(t) -1</p>\n\n<pre><code>&gt;&gt;lst.append(text[len(text)-1])\n</code></pre>\n\n<p>That alone will always get the last letter of our word, and append it to <code>lst</code>, regardless of the length of the word. But now that we have the last letter, which is l(t) - 1, we need the second to last letter, which is l(t) - 2, and so on, until there are no more characters to append to the list. Remember our <code>count</code> variable from above? That will come in handy. By using a <code>for</code> loop, we can increment the value of <code>count</code> by 1 through each iteration, so that the value we subtract by increases, until the for loop has iterated through the entire word:</p>\n\n<pre><code>&gt;&gt;for i in range(0,len(text)):\n..        \n..      lst.append(text[len(text)-count])\n..      count += 1\n</code></pre>\n\n<p>Now that we have the heart of our function, let's look at what we have so far:</p>\n\n<pre><code>def reverse(text):\n\n    lst = []\n    count = 1\n\n    for i in range(0,len(text)):\n\n        lst.append(text[len(text)-count])\n        count += 1\n</code></pre>\n\n<p>We're almost done! Right now, if we were to call our function with the word 'hello', we would get a list that looks like:</p>\n\n<p>['o','l','l','e','h']</p>\n\n<p>We don't want a list, we want a string. We can use <code>.join</code> for that:</p>\n\n<pre><code>def reverse(text):\n\n    lst = []\n    count = 1\n\n    for i in range(0,len(text)):\n\n        lst.append(text[len(text)-count])\n        count += 1\n\n    lst = ''.join(lst) # join the letters together without a space\n    return lst\n</code></pre>\n\n<p>And that's it. If we call the word 'hello' on reverse(), we'd get this:</p>\n\n<pre><code>&gt;&gt;print reverse('hello')\nolleh\n</code></pre>\n\n<p>Obviously, this is way more code than is necessary in a real life situation. Using the reversed function or extended slice would be the optimal way to accomplish this task, but maybe there is some instance when it would not work, and you would need this. Either way, I figured I'd share it for anyone who would be interested. </p>\n\n<p>If you guys have any other ideas, I'd love to hear them!</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1386816338, 
      "creation_date": 1378663005, 
      "score": 5, 
      "owner": {
        "user_id": 2537637, 
        "profile_image": "http://i.stack.imgur.com/b9n9Z.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1636, 
        "link": "http://stackoverflow.com/users/2537637/samrap", 
        "accept_rate": 79, 
        "display_name": "samrap"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1386816338, 
      "answer_id": 18686861
    }, 
    {
      "body": "<p>you have got enough answer.</p>\n\n<p>Just want to share another way.</p>\n\n<p>you can write a two small function for reverse and compare the function output with the given string</p>\n\n<p>var = ''</p>\n\n<p>def reverse(data):</p>\n\n<pre><code>for i in data:\n    var = i + var\nreturn var\n</code></pre>\n\n<p>if not var == data :</p>\n\n<p>print \"No palindrome\"</p>\n\n<p>else :</p>\n\n<p>print \"Palindrome\"</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1385621604, 
      "creation_date": 1385621604, 
      "score": 0, 
      "owner": {
        "user_id": 1631778, 
        "profile_image": "https://www.gravatar.com/avatar/25fcc8269211d2a060974cefcf90ffdc?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 44, 
        "link": "http://stackoverflow.com/users/1631778/rajeshes", 
        "accept_rate": 38, 
        "display_name": "rajeshes"
      }, 
      "is_accepted": false, 
      "answer_id": 20259538
    }, 
    {
      "body": "<p>Today I was asked this same exercise on pen&amp;paper, so I come up with this function for lists:</p>\n\n<pre><code>def rev(s):\n  l = len(s)\n  for i,j in zip(range(l-1, 0, -1), range(l//2)):\n    s[i], s[j] = s[j], s[i]\n  return s\n</code></pre>\n\n<p>which can be used with strings with <code>\"\".join(rev(list(\"hello\")))</code></p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1385169664, 
      "creation_date": 1385169664, 
      "score": 1, 
      "owner": {
        "user_id": 293735, 
        "profile_image": "https://www.gravatar.com/avatar/6fe5bc171f84a440181f7274c5065443?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 610, 
        "link": "http://stackoverflow.com/users/293735/berdario", 
        "accept_rate": 100, 
        "display_name": "berdario"
      }, 
      "is_accepted": false, 
      "answer_id": 20157341
    }, 
    {
      "body": "<p>This is a very interesting question, I will like to offer a simple one\nliner answer:</p>\n\n<pre><code>&gt;&gt;&gt; S='abcdefg'\n&gt;&gt;&gt; ''.join(item[1] for item in sorted(enumerate(S), reverse=True))\n'gfedcba'\n</code></pre>\n\n<p>Brief explanation:</p>\n\n<p><code>enumerate()</code> returns <code>[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f'), (6, 'g')]</code>. The indices and the values.\nTo reverse the values, just reverse sort it by <code>sorted()</code>.\nFinally, just put it together back to a <code>str</code></p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1379817047, 
      "creation_date": 1379817047, 
      "score": 3, 
      "owner": {
        "user_id": 2487184, 
        "profile_image": "https://www.gravatar.com/avatar/d8cd1dea84cfe8312c532088a0da08e8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 12669, 
        "link": "http://stackoverflow.com/users/2487184/ct-zhu", 
        "accept_rate": 67, 
        "display_name": "CT Zhu"
      }, 
      "is_accepted": false, 
      "answer_id": 18939690
    }, 
    {
      "body": "<p>Inspired by Jon's answer, how about this one</p>\n\n<pre><code>word = 'hello'\nq = deque(word)\n''.join(q.pop() for _ in range(len(word)))\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1378665920, 
      "creation_date": 1378665920, 
      "score": 2, 
      "owner": {
        "user_id": 790387, 
        "profile_image": "https://www.gravatar.com/avatar/450fd2737dd0355700a574bd12842509?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 57015, 
        "link": "http://stackoverflow.com/users/790387/burhan-khalid", 
        "accept_rate": 80, 
        "display_name": "Burhan Khalid"
      }, 
      "is_accepted": false, 
      "answer_id": 18687341
    }, 
    {
      "body": "<p>Just another option:</p>\n\n<pre><code>from collections import deque\ndef reverse(iterable):\n    d = deque()\n    d.extendleft(iterable)\n    return ''.join(d)\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1378663734, 
      "creation_date": 1378663734, 
      "score": 10, 
      "owner": {
        "user_id": 1252759, 
        "profile_image": "http://i.stack.imgur.com/xBOdp.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 53401, 
        "link": "http://stackoverflow.com/users/1252759/jon-clements", 
        "display_name": "Jon Clements"
      }, 
      "is_accepted": false, 
      "answer_id": 18686993
    }, 
    {
      "body": "<p>Use reversed <code>range</code>:</p>\n\n<pre><code>def reverse(strs):\n    for i in xrange(len(strs)-1, -1, -1):\n        yield strs[i]\n...         \n&gt;&gt;&gt; ''.join(reverse('hello'))\n'olleh'\n</code></pre>\n\n<p><code>xrange</code> or  <code>range</code> with -1 step would return items in reversed order, so we need to iterate from <code>len(string)-1</code> to <code>-1</code>(exclusive) and fetch items from the string one by one.</p>\n\n<pre><code>&gt;&gt;&gt; list(xrange(len(strs) -1, -1 , -1))\n[4, 3, 2, 1, 0]  #iterate over these indexes and fetch the items from the string\n</code></pre>\n\n<p>One-liner:</p>\n\n<pre><code>def reverse(strs):\n    return ''.join([strs[i] for i in xrange(len(strs)-1, -1, -1)])\n... \n&gt;&gt;&gt; reverse('hello')\n'olleh'\n</code></pre>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1378663655, 
      "creation_date": 1378663167, 
      "score": 6, 
      "owner": {
        "user_id": 846892, 
        "profile_image": "http://i.stack.imgur.com/E9dZn.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 103377, 
        "link": "http://stackoverflow.com/users/846892/ashwini-chaudhary", 
        "accept_rate": 93, 
        "display_name": "Ashwini Chaudhary"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1378663655, 
      "answer_id": 18686885
    }, 
    {
      "body": "<p>A golfed version: <code>r=lambda x:\"\".join(x[i] for i in range(len(x-1),-1,-1))</code>.</p>\n", 
      "question_id": 18686860, 
      "last_activity_date": 1378663244, 
      "creation_date": 1378663244, 
      "score": 2, 
      "owner": {
        "user_id": 2387370, 
        "profile_image": "https://www.gravatar.com/avatar/9bb96d6fa4258ace9cf1c32bf9f4f083?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3699, 
        "link": "http://stackoverflow.com/users/2387370/sweeneyrod", 
        "accept_rate": 55, 
        "display_name": "sweeneyrod"
      }, 
      "is_accepted": false, 
      "answer_id": 18686902
    }
  ], 
  "60208": [
    {
      "body": "<p>I liked <a href=\"http://stackoverflow.com/a/60215/1766716\">Mark Bies's answer</a>, but I am getting error. So modified it to run in a comprehensible way.</p>\n\n<pre><code>In [1]:  result = {\n    ...:   'a': lambda x: 'A',\n    ...:   'b': lambda x: 'B',\n    ...:   'c': lambda x: 'C'\n    ...: }['a'](x)\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-79-5ce2b3ae3711&gt; in &lt;module&gt;()\n      3   'b': lambda x: 'B',\n      4   'c': lambda x: 'C'\n----&gt; 5 }['a'](x)\n\nNameError: name 'x' is not defined\n</code></pre>\n\n<p><strong>Input 2 works but in a weird way. I have to run with</strong> <code>results[value](value)</code></p>\n\n<pre><code>In [2]: result = {\n    ...:   'a': lambda x: 'A',\n    ...:   'b': lambda x: 'B',\n    ...:   'c': lambda x: 'C'\n    ...: }\n    ...: result['a']('a')\n    ...: \nOut[2]: 'A'\n</code></pre>\n\n<p><strong>Input 3 works in a comprehensible way. I use this with</strong> <code>result[value]()</code></p>\n\n<pre><code>In [3]: result = {\n    ...:   'a': lambda : 'A',\n    ...:   'b': lambda : 'B',\n    ...:   'c': lambda : 'C',\n    ...:   None: lambda : 'Nothing else matters'\n\n    ...: }\n    ...: result['a']()\n    ...: \nOut[3]: 'A'\n</code></pre>\n\n<p><strong>Edit:</strong> I noticed that i can use <code>None</code> type with with dictionaries. So this would emulate <code>switch ; case else</code></p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1420629330, 
      "creation_date": 1417342356, 
      "score": 1, 
      "owner": {
        "user_id": 1766716, 
        "profile_image": "https://www.gravatar.com/avatar/902cdafbb7a8d060933e230fc8e3a488?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 714, 
        "link": "http://stackoverflow.com/users/1766716/guneysus", 
        "accept_rate": 71, 
        "display_name": "guneysus"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420629330, 
      "answer_id": 27212138
    }, 
    {
      "body": "<p>I found that a common switch structure:</p>\n\n<pre><code>switch ...parameter...\ncase p1: v1; break;\ncase p2: v2; break;\ndefault: v3;\n</code></pre>\n\n<p>can be expressed in Python as follows:</p>\n\n<pre><code>lambda x: v1 if p1(x) else v2 if p2(x) else v3\n</code></pre>\n\n<p>or formatted in a clearer way:</p>\n\n<pre><code>lambda x:\n    v1 if p1(x) else\n    v2 if p2(x) else\n    v3\n</code></pre>\n\n<p>The python version is an expression, which evaluates to a value, instead of a statement.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1420222194, 
      "creation_date": 1420221685, 
      "score": 0, 
      "owner": {
        "user_id": 652066, 
        "profile_image": "https://www.gravatar.com/avatar/db603cb103e26403b43849bc073d3dd5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 41, 
        "link": "http://stackoverflow.com/users/652066/leo", 
        "display_name": "leo"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420222194, 
      "answer_id": 27746465
    }, 
    {
      "body": "<p>I've always liked doing it this way</p>\n\n<pre><code>result = {\n  'a': lambda x: x * 5,\n  'b': lambda x: x + 7,\n  'c': lambda x: x - 2\n}[value](x)\n</code></pre>\n\n<p><a href=\"http://blog.simonwillison.net/post/57956755106/switch\">From here</a></p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1392527202, 
      "creation_date": 1221266506, 
      "score": 83, 
      "owner": {
        "user_id": 305, 
        "profile_image": "https://www.gravatar.com/avatar/040ffc7f3327b05f01c54a8bef3ba60a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 46876, 
        "link": "http://stackoverflow.com/users/305/mark-biek", 
        "accept_rate": 94, 
        "display_name": "Mark Biek"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1392527202, 
      "answer_id": 60215
    }, 
    {
      "body": "<p>A true <code>switch/case</code> in Python is going to be more difficult than a dictionary method or <code>if/elif/else</code> methods because the simple versions do not support fall through.</p>\n\n<p>Another downfall of the <code>if/elif/else</code> method is the need for repeated comparisons. </p>\n\n<p>The C implementation of a <code>switch/case</code> has a performance benefit over <code>if/else</code> <code>if/else</code> in that only a single comparison is needed. The result of that comparison is used as an offset into a jump table (in the underlying <code>asm</code> generated). </p>\n\n<p>Mimicking the true functionality in Python would be a pain. Does any one have an implementation that would allow for fall through while only using a single comparison?</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1387567466, 
      "creation_date": 1221942005, 
      "score": 15, 
      "owner": {
        "user_id": 19741, 
        "profile_image": "https://www.gravatar.com/avatar/e45f3417df9a660f87d6e11f21d7f02a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1128, 
        "link": "http://stackoverflow.com/users/19741/daniel", 
        "accept_rate": 73, 
        "display_name": "daniel"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387567466, 
      "answer_id": 109245
    }, 
    {
      "body": "<p>I didn't find the simple answer I was looking for anywhere on Google search. But I figured it out anyway. It's really quite simple. Decided to post it, and maybe prevent a few less scratches on someone else's head. The key is simply \"in\" and tuples. Here is the switch statement behavior with fall-through, including RANDOM fall-through.</p>\n\n<pre><code>l = ['Dog', 'Cat', 'Bird', 'Bigfoot',\n     'Dragonfly', 'Snake', 'Bat', 'Loch Ness Monster']\n\nfor x in l:\n    if x in ('Dog', 'Cat'):\n        x += \" has four legs\"\n    elif x in ('Bat', 'Bird', 'Dragonfly'):\n        x += \" has wings.\"\n    elif x in ('Snake',):\n        x += \" has a forked tongue.\"\n    else:\n        x += \" is a big mystery by default.\"\n    print(x)\n\nprint()\n\nfor x in range(10):\n    if x in (0, 1):\n        x = \"Values 0 and 1 caught here.\"\n    elif x in (2,):\n        x = \"Value 2 caught here.\"\n    elif x in (3, 7, 8):\n        x = \"Values 3, 7, 8 caught here.\"\n    elif x in (4, 6):\n        x = \"Values 4 and 6 caught here\"\n    else:\n        x = \"Values 5 and 9 caught in default.\"\n    print(x)\n</code></pre>\n\n<p>Provides:</p>\n\n<pre><code>Dog has four legs\nCat has four legs\nBird has wings.\nBigfoot is a big mystery by default.\nDragonfly has wings.\nSnake has a forked tongue.\nBat has wings.\nLoch Ness Monster is a big mystery by default.\n\nValues 0 and 1 caught here.\nValues 0 and 1 caught here.\nValue 2 caught here.\nValues 3, 7, 8 caught here.\nValues 4 and 6 caught here\nValues 5 and 9 caught in default.\nValues 4 and 6 caught here\nValues 3, 7, 8 caught here.\nValues 3, 7, 8 caught here.\nValues 5 and 9 caught in default.\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1381603437, 
      "creation_date": 1381590241, 
      "score": 3, 
      "owner": {
        "user_id": 2874221, 
        "profile_image": "http://graph.facebook.com/100006537613340/picture?type=large", 
        "user_type": "registered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/2874221/jd-graham", 
        "display_name": "JD Graham"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1381603437, 
      "answer_id": 19335626
    }, 
    {
      "body": "<p>Defining:</p>\n\n<pre><code>def switch1(value, options):\n  if value in options:\n    options[value]()\n</code></pre>\n\n<p>allows you to use a fairly straightforward syntax, with the cases bundled into a map:</p>\n\n<pre><code>def sample1(x):\n  local = 'betty'\n  switch1(x, {\n    'a': lambda: print(\"hello\"),\n    'b': lambda: (\n      print(\"goodbye,\" + local),\n      print(\"!\")),\n    })\n</code></pre>\n\n<p>I kept trying to redefine switch in a way that would let me get rid of the \"lambda:\", but gave up.  Tweaking the definition:</p>\n\n<pre><code>def switch(value, *maps):\n  options = {}\n  for m in maps:\n    options.update(m)\n  if value in options:\n    options[value]()\n  elif None in options:\n    options[None]()\n</code></pre>\n\n<p>Allowed me to map multiple cases to the same code, and to supply a default option:</p>\n\n<pre><code>def sample(x):\n  switch(x, {\n    _: lambda: print(\"other\") \n    for _ in 'cdef'\n    }, {\n    'a': lambda: print(\"hello\"),\n    'b': lambda: (\n      print(\"goodbye,\"),\n      print(\"!\")),\n    None: lambda: print(\"I dunno\")\n    })\n</code></pre>\n\n<p>Each replicated case has to be in its own dictionary; switch() consolidates the dictionaries before looking up the value.  It's still uglier than I'd like, but it has the basic efficiency of using a hashed lookup on the expression, rather than a loop through all the keys.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1374776613, 
      "creation_date": 1374776613, 
      "score": 1, 
      "owner": {
        "user_id": 2619926, 
        "profile_image": "https://www.gravatar.com/avatar/a7f2e08a712ccdaaea90150d46fd600f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/2619926/user49809", 
        "display_name": "user49809"
      }, 
      "is_accepted": false, 
      "answer_id": 17865871
    }, 
    {
      "body": "<p><a href=\"http://www.activestate.com/ASPN/Python/Cookbook/\">Python Cookbook</a> has several recipes (implementations and corresponding discussions) for switch statement. Please visit the following links:</p>\n\n<ol>\n<li><p><a href=\"http://code.activestate.com/recipes/410692/\">Readable switch construction without lambdas or dictionaries</a></p></li>\n<li><p><a href=\"http://code.activestate.com/recipes/410695/\">Exception-based Switch-Case</a></p></li>\n<li><p><a href=\"http://code.activestate.com/recipes/181064/\">Using a Dictionary in place of a 'switch' statement</a></p></li>\n</ol>\n", 
      "question_id": 60208, 
      "last_activity_date": 1370531229, 
      "creation_date": 1227775981, 
      "score": 236, 
      "owner": {
        "user_id": 30289, 
        "profile_image": "https://www.gravatar.com/avatar/4ae87ee18d6cfa6d1b07ee6622d9b0ac?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 7836, 
        "link": "http://stackoverflow.com/users/30289/bhadra", 
        "accept_rate": 68, 
        "display_name": "bhadra"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1370531229, 
      "answer_id": 323259
    }, 
    {
      "body": "<p>also use the List for store the cases ,and call corresponding function by select-</p>\n\n<pre><code>cases = ['zero()','one()','two()','three()']\n\ndef zero():\n  print \"method for 0 called...\"\ndef one():\n  print \"method for 1 called...\"\ndef two():\n  print \"method for 2 called...\"\ndef three():\n  print \"method for 3 called...\" \n\ni = int(raw_input(\"Enter choice between 0-3 \"))\n\nif(i&lt;=len(cases)):\n exec(cases[i])\nelse:\n print \"wrong choice\"\n</code></pre>\n\n<p>also explained at <a href=\"http://screwdesk.com/python-switch-case-alternative/\" rel=\"nofollow\">screwdesk</a> </p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1370527306, 
      "creation_date": 1370527306, 
      "score": 0, 
      "owner": {
        "user_id": 2392636, 
        "profile_image": "https://www.gravatar.com/avatar/47326a30c6eb7c87bbc44b7a3c653302?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2392636/harry247", 
        "display_name": "Harry247"
      }, 
      "is_accepted": false, 
      "answer_id": 16964129
    }, 
    {
      "body": "<pre><code>class switch(object):\n    value = None\n    def __new__(class_, value):\n        class_.value = value\n        return True\n\ndef case(*args):\n    return any((arg == switch.value for arg in args))\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>while switch(n):\n    if case(0):\n        print \"You typed zero.\"\n        break\n    if case(1, 4, 9):\n        print \"n is a perfect square.\"\n        break\n    if case(2):\n        print \"n is an even number.\"\n    if case(2, 3, 5, 7):\n        print \"n is a prime number.\"\n        break\n    if case(6, 8):\n        print \"n is an even number.\"\n        break\n    print \"Only single-digit numbers are allowed.\"\n    break\n</code></pre>\n\n<p>Tests:</p>\n\n<pre><code>n = 2\n#Result:\n#n is an even number.\n#n is a prime number.\nn = 11\n#Result:\n#Only single-digit numbers are allowed.\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1370010292, 
      "creation_date": 1310018949, 
      "score": 37, 
      "owner": {
        "user_id": 832936, 
        "profile_image": "https://www.gravatar.com/avatar/98d2d8adbf10b2677ddc1cb931c7e0e3?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 371, 
        "link": "http://stackoverflow.com/users/832936/adamh", 
        "display_name": "adamh"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1370010292, 
      "answer_id": 6606504
    }, 
    {
      "body": "<p>Just mapping some a key to some code is not really and issue as most people have shown using the dict. The real trick is trying to emulate the whole drop through and break thing. I don't think I've ever written a case statement where I used that \"feature\". Here's a go at drop through. </p>\n\n<pre><code>def case(list): reduce(lambda b, f: (b | f[0], {False:(lambda:None),True:f[1]}[b | f[0]]())[0], list, False)\n\ncase([\n    (False, lambda:print(5)),\n    (True, lambda:print(4))\n])\n</code></pre>\n\n<p>I was really imagining it as a single statement. I hope you'll pardon the silly formatting.</p>\n\n<pre><code>reduce(\n    initializer=False,\n    function=(lambda b, f:\n        ( b | f[0]\n        , { False: (lambda:None)\n          , True : f[1]\n          }[b | f[0]]()\n        )[0]\n    ),\n    iterable=[\n        (False, lambda:print(5)),\n        (True, lambda:print(4))\n    ]\n)\n</code></pre>\n\n<p>I hope that's valid python. It should give you drop through. of course the boolean checks could be expressions and if you wanted them to be evaluated lazily you could wrap them all in a lambda. I wouldn't be to hard to make it accept after executing some of the items in the list either. Just make the tuple (bool, bool, function) where the second bool indicates whether or not to break or drop through.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1359997555, 
      "creation_date": 1359987706, 
      "score": 0, 
      "owner": {
        "user_id": 585278, 
        "profile_image": "https://www.gravatar.com/avatar/29c50b52bcd7ffb9e5e03b608ea5586e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 139, 
        "link": "http://stackoverflow.com/users/585278/alden", 
        "accept_rate": 0, 
        "display_name": "Alden"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1359997555, 
      "answer_id": 14688688
    }, 
    {
      "body": "<pre><code>def f(x):\n     return 1 if x == 'a' else\\\n            2 if x in 'bcd' else\\\n            0 #default\n</code></pre>\n\n<p>Short and easy to read, has a default value and supports expressions in both conditions and return values.</p>\n\n<p>However, it is less efficient than the solution with a dictionary. For example, Python has to scan through all the conditions before returning the default value.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1352145912, 
      "creation_date": 1352145912, 
      "score": 1, 
      "owner": {
        "user_id": 797845, 
        "profile_image": "https://www.gravatar.com/avatar/d8377d3c1b378e20d4f6cd6f24a5b246?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 468, 
        "link": "http://stackoverflow.com/users/797845/emu", 
        "display_name": "emu"
      }, 
      "is_accepted": false, 
      "answer_id": 13239503
    }, 
    {
      "body": "<p>If you have a complicated case block you can consider using a function dictionary lookup table... </p>\n\n<p>If you haven't done this before its a good idea to step into your debugger and view exactly how the dictionary looks up each function.  </p>\n\n<p>NOTE: Do <em>not</em> use \"()\" inside the case/dictionary lookup or it will call each of your functions as the dictionary / case block is created.  Remember this because you only want to call each function once using a hash style lookup.</p>\n\n<pre><code>def first_case():\n    print \"first\"\n\ndef second_case():\n    print \"second\"\n\ndef third_case():\n    print \"third\"\n\nmycase = {\n'first': first_case, #do not use ()\n'second': second_case, #do not use ()\n'third': third_case #do not use ()\n}\nmyfunc = mycase['first']\nmyfunc()\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1350510765, 
      "creation_date": 1335130983, 
      "score": 5, 
      "owner": {
        "user_id": 1164146, 
        "profile_image": "https://www.gravatar.com/avatar/2432dfef787fd81e1d3eaaba00126cb7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 437, 
        "link": "http://stackoverflow.com/users/1164146/asher", 
        "accept_rate": 64, 
        "display_name": "Asher"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1350510765, 
      "answer_id": 10272369
    }, 
    {
      "body": "<p>Greg's solutions will not work for unhashable entries. For example when indexing <code>lists</code>.</p>\n\n<pre><code># doesn't work\ndef give_me_array(key)\n  return {\n      [1, 0]: \"hello\"\n    }[key]\n</code></pre>\n\n<p>Luckily though <code>tuples</code> are hashable.</p>\n\n<pre><code># works\ndef give_me_array(key)\n  return {\n      (1, 0): \"hello\"\n    }[tuple(key)]\n</code></pre>\n\n<p>Similarly there probably are immutable (thus probably hashable) versions of dictionaries or sets too.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1348844411, 
      "creation_date": 1348844411, 
      "score": 0, 
      "owner": {
        "user_id": 621449, 
        "profile_image": "https://www.gravatar.com/avatar/719bfd78d112dcab5e54bd2f3beb5fe8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3044, 
        "link": "http://stackoverflow.com/users/621449/tarrasch", 
        "accept_rate": 89, 
        "display_name": "Tarrasch"
      }, 
      "is_accepted": false, 
      "answer_id": 12642509
    }, 
    {
      "body": "<p>The solutions I use: </p>\n\n<p>A combination of 2 of the solutions posted here, which is relatively easy to read and supports defaults.</p>\n\n<pre><code>result = {\n  'a': lambda x: x * 5,\n  'b': lambda x: x + 7,\n  'c': lambda x: x - 2\n}.get(whatToUse, lambda x: x - 22)(value)\n</code></pre>\n\n<p>where</p>\n\n<pre><code>.get('c', lambda x: x - 22)(23)\n</code></pre>\n\n<p>looks up <code>\"lambda x: x - 2\"</code> in the dict and uses it with <code>x=23</code> </p>\n\n<pre><code>.get('xxx', lambda x: x - 22)(44)\n</code></pre>\n\n<p>doesn't find it in the dict and uses the default <code>\"lambda x: x - 22\"</code> with <code>x=44</code>.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1330014468, 
      "creation_date": 1277688753, 
      "score": 3, 
      "owner": {
        "user_id": 377671, 
        "profile_image": "https://www.gravatar.com/avatar/c38c70953cf59e8f67d6543e49de33ad?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 520, 
        "link": "http://stackoverflow.com/users/377671/thomasf1", 
        "accept_rate": 45, 
        "display_name": "thomasf1"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1330014468, 
      "answer_id": 3129619
    }, 
    {
      "body": "<p>If you're searching extra-statement, as \"switch\", I built a python module that extends Python. It's called <a href=\"http://elp.chronocv.fr/?lng=en\">ESPY</a> as \"Enhanced Structure for Python\" and it's available for both Python 2.x and Python 3.x.</p>\n\n<p>For example, in this case, a switch statement could be performed by the following code:</p>\n\n<pre><code>macro switch(arg1):\n    while True:\n        cont=False\n        val=%arg1%\n        socket case(arg2):\n            if val==%arg2% or cont:\n                cont=True\n                socket\n        socket else:\n            socket\n        break\n</code></pre>\n\n<p>that can be used like this:</p>\n\n<pre><code>a=3\nswitch(a):\n    case(0):\n        print(\"Zero\")\n    case(1):\n        print(\"Smaller than 2\"):\n        break\n    else:\n        print (\"greater than 1\")\n</code></pre>\n\n<p>so espy translate it in Python as:</p>\n\n<pre><code>a=3\nwhile True:\n    cont=False\n    if a==0 or cont:\n        cont=True\n        print (\"Zero\")\n    if a==1 or cont:\n        cont=True\n        print (\"Smaller than 2\")\n        break\n    print (\"greater than 1\")\n    break\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1320747917, 
      "creation_date": 1291648092, 
      "score": 7, 
      "owner": {
        "user_id": 532453, 
        "profile_image": "https://www.gravatar.com/avatar/cfc6d27a016391fe6339cd559b58cd7e?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 71, 
        "link": "http://stackoverflow.com/users/532453/elp", 
        "display_name": "elp"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1320747917, 
      "answer_id": 4367749
    }, 
    {
      "body": "<p>My favorite one is a really nice <a href=\"http://code.activestate.com/recipes/410692/\">recipe</a>. You'll really like it. It's the closest one I've seen to actual switch case statements, especially in features.</p>\n\n<p>Here's an example:</p>\n\n<pre><code># The following example is pretty much the exact use-case of a dictionary,\n# but is included for its simplicity. Note that you can include statements\n# in each suite.\nv = 'ten'\nfor case in switch(v):\n    if case('one'):\n        print 1\n        break\n    if case('two'):\n        print 2\n        break\n    if case('ten'):\n        print 10\n        break\n    if case('eleven'):\n        print 11\n        break\n    if case(): # default, could also just omit condition or 'if True'\n        print \"something else!\"\n        # No need to break here, it'll stop anyway\n\n# break is used here to look as much like the real thing as possible, but\n# elif is generally just as good and more concise.\n\n# Empty suites are considered syntax errors, so intentional fall-throughs\n# should contain 'pass'\nc = 'z'\nfor case in switch(c):\n    if case('a'): pass # only necessary if the rest of the suite is empty\n    if case('b'): pass\n    # ...\n    if case('y'): pass\n    if case('z'):\n        print \"c is lowercase!\"\n        break\n    if case('A'): pass\n    # ...\n    if case('Z'):\n        print \"c is uppercase!\"\n        break\n    if case(): # default\n        print \"I dunno what c was!\"\n\n# As suggested by Pierre Quentel, you can even expand upon the\n# functionality of the classic 'case' statement by matching multiple\n# cases in a single shot. This greatly benefits operations such as the\n# uppercase/lowercase example above:\nimport string\nc = 'A'\nfor case in switch(c):\n    if case(*string.lowercase): # note the * for unpacking as arguments\n        print \"c is lowercase!\"\n        break\n    if case(*string.uppercase):\n        print \"c is uppercase!\"\n        break\n    if case('!', '?', '.'): # normal argument passing style also applies\n        print \"c is a sentence terminator!\"\n        break\n    if case(): # default\n        print \"I dunno what c was!\"\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1310019167, 
      "creation_date": 1310019167, 
      "score": 20, 
      "owner": {
        "user_id": 832391, 
        "profile_image": "https://www.gravatar.com/avatar/d312a0b7fcf2eaa8acab006c2c2f407d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1790, 
        "link": "http://stackoverflow.com/users/832391/john-doe", 
        "display_name": "John Doe"
      }, 
      "is_accepted": false, 
      "answer_id": 6606540
    }, 
    {
      "body": "<p>Let's say you don't want to just return a value, but want to use methods that change something on an object. Using the approach stated here would be:</p>\n\n<pre><code>result = {\n  'a': obj.increment(x),\n  'b': obj.decrement(x)\n}.get(value, obj.default(x))\n</code></pre>\n\n<p>What happens here is that python evaluates all methods in the dictionary.\nSo even if your value is 'a', the object will get incremented <strong>and</strong> decremented by x.</p>\n\n<p>Solution:</p>\n\n<pre><code>func, args = {\n  'a' : (obj.increment, (x,)),\n  'b' : (obj.decrement, (x,)),\n}.get(value, (obj.default, (x,)))\n\nresult = func(*args)\n</code></pre>\n\n<p>So you get a list containing a function and its arguments. This way, only the function pointer and the argument list get returned, <em>not</em> evaluated. 'result' then evaluates the returned function call.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1285835515, 
      "creation_date": 1285835515, 
      "score": 11, 
      "owner": {
        "user_id": 190001, 
        "profile_image": "https://www.gravatar.com/avatar/fe497c28efb01545c16cd7e25a3dedaa?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 312, 
        "link": "http://stackoverflow.com/users/190001/geef", 
        "accept_rate": 100, 
        "display_name": "GeeF"
      }, 
      "is_accepted": false, 
      "answer_id": 3828986
    }, 
    {
      "body": "<p>I have made a (relatively) flexible and re-usable solution for this. It can be found at GitHub as <a href=\"http://gist.github.com/raw/23036/fd1fb6f05d4c654ff136a9f2545b9f83e9273fcc/switch.py\" rel=\"nofollow\">this gist</a>. If the result of the switch function is callable, it is automatically called.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1244211652, 
      "creation_date": 1244211652, 
      "score": 2, 
      "owner": {
        "user_type": "does_not_exist"
      }, 
      "is_accepted": false, 
      "answer_id": 956115
    }, 
    {
      "body": "<p>In addition to the dictionary methods (which I really like, BTW), you can also use if-elif-else to obtain the switch/case/default functionality:</p>\n\n<pre><code>if x=='a':\n    # Do the thing\nelif x=='b':\n    # Do the other thing\nelse:\n    # Do the default\n</code></pre>\n\n<p>This of course is not identical to switch/case - you cannot have fall-through as easily as leaving off the break; statement, but you can have a more complicated test.  It's formatting is nicer than a series of nested ifs, even though functionally that's what it is closer to.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1230551359, 
      "creation_date": 1221268258, 
      "score": 57, 
      "owner": {
        "user_id": 188, 
        "profile_image": "https://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 17314, 
        "link": "http://stackoverflow.com/users/188/matthew-schinckel", 
        "accept_rate": 100, 
        "display_name": "Matthew Schinckel"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1230551359, 
      "answer_id": 60236
    }, 
    {
      "body": "<pre><code>def f(x):    \n  return {'a': 1,'b': 2,}.get(x) or \"Default\"\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1227759876, 
      "creation_date": 1227759876, 
      "score": -2, 
      "owner": {
        "user_id": 40948, 
        "profile_image": "https://www.gravatar.com/avatar/0330177f470344c64aa0a82c4302088d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1580, 
        "link": "http://stackoverflow.com/users/40948/m-utku-altinkaya", 
        "accept_rate": 90, 
        "display_name": "M. Utku ALTINKAYA"
      }, 
      "is_accepted": false, 
      "answer_id": 322922
    }, 
    {
      "body": "<p>If you'd like defaults you could use the dictionary \"get\" method:</p>\n\n<pre><code>def f(x):\n    return {\n        'a': 1,\n        'b': 2,\n        }.get(x, 9)    # 9 is default if x not found\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221839115, 
      "creation_date": 1221839115, 
      "score": 393, 
      "owner": {
        "user_id": 3233, 
        "profile_image": "http://i.stack.imgur.com/X6T2J.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 8296, 
        "link": "http://stackoverflow.com/users/3233/nick", 
        "accept_rate": 54, 
        "display_name": "Nick"
      }, 
      "is_accepted": false, 
      "answer_id": 103081
    }, 
    {
      "body": "<p>expanding on the \"dict as switch\" idea. if you want to use a default value for your switch:</p>\n\n<pre><code>def f(x):\n    try:\n        return {\n            'a': 1,\n            'b': 2,\n        }[x]\n    except KeyError:\n        return 'default'\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221838635, 
      "creation_date": 1221838635, 
      "score": 4, 
      "owner": {
        "user_id": 18866, 
        "profile_image": "https://www.gravatar.com/avatar/0b887c77a19c495b68a6772972c23a23?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 8635, 
        "link": "http://stackoverflow.com/users/18866/jeremy-cantrell", 
        "accept_rate": 74, 
        "display_name": "Jeremy Cantrell"
      }, 
      "is_accepted": false, 
      "answer_id": 102990
    }, 
    {
      "body": "<p>I would just use if/elif/else statements. I think that it's good enough to replace the switch statement.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221516013, 
      "creation_date": 1221516013, 
      "score": 3, 
      "owner": {
        "user_id": 293, 
        "profile_image": "http://i.stack.imgur.com/CBDju.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 558, 
        "link": "http://stackoverflow.com/users/293/miya", 
        "accept_rate": 50, 
        "display_name": "miya"
      }, 
      "is_accepted": false, 
      "answer_id": 67450
    }, 
    {
      "body": "<p>The switch statement is just syntactical sugar which is probably why Python doesn't have it. You can use if else statements for this functionality easily.</p>\n\n<p>Like Matthew Schinckel said, you can use if and elif and else.</p>\n\n<p>It is also a simple matter to have \"fall-through\" capabilities like most switch statements. All you have to do is not  use elif.</p>\n\n<pre><code>if x == 1:\n    # 1\nif x == 2:\n    # fall-through\nelif x == 3:\n    # not fall-through\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221498386, 
      "creation_date": 1221498386, 
      "score": -1, 
      "owner": {
        "display_name": "lorph", 
        "user_type": "does_not_exist"
      }, 
      "is_accepted": false, 
      "answer_id": 64756
    }, 
    {
      "body": "<p>There's a pattern that I learned from Twisted Python code.</p>\n\n<pre><code>class SMTP:\n    def lookupMethod(self, command):\n        return getattr(self, 'do_' + command.upper(), None)\n    def do_HELO(self, rest):\n        return 'Howdy ' + rest\n    def do_QUIT(self, rest):\n        return 'Bye'\n\nSMTP().lookupMethod('HELO')('foo.bar.com') # =&gt; 'Howdy foo.bar.com'\nSMTP().lookupMethod('QUIT')('') # =&gt; 'Bye'\n</code></pre>\n\n<p>You can use it any time you need to dispatch on a token and execute extended piece of code. In a state machine you would have <code> state_ </code> methods, and dispatch on <code>self.state</code>. This switch can be cleanly extended by inheriting from base class and defining your own <code> do_ </code> methods. Often times you won't even have <code> do_ </code> methods in the base class.</p>\n\n<p><em>Edit: how exactly is that used</em></p>\n\n<p>In case of SMTP you will receive <code>HELO</code> from the wire. The relevant code (from <code>twisted/mail/smtp.py</code>, modified for our case) looks like this</p>\n\n<pre><code>class SMTP:\n    # ...\n\n    def do_UNKNOWN(self, rest):\n        raise NotImplementedError, 'received unknown command'\n\n    def state_COMMAND(self, line):\n        line = line.strip()\n        parts = line.split(None, 1)\n        if parts:\n            method = self.lookupMethod(parts[0]) or self.do_UNKNOWN\n            if len(parts) == 2:\n                return method(parts[1])\n            else:\n                return method('')\n        else:\n            raise SyntaxError, 'bad syntax'\n\nSMTP().state_COMMAND('   HELO   foo.bar.com  ') # =&gt; Howdy foo.bar.com\n</code></pre>\n\n<p>You'll receive <code>'  HELO   foo.bar.com '</code> (or you might get <code>'QUIT'</code> or <code>'RCPT TO: foo'</code>). This is tokenized into <code>parts</code> as <code>['HELO', 'foo.bar.com']</code>. The actual method lookup name is taken from <code>parts[0]</code>.</p>\n\n<p>(The original method is also called <code>state_COMMAND</code>, because it uses the same pattern to implement a state machine, i.e. <code>getattr(self, 'state_' + self.mode)</code>)</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221327723, 
      "creation_date": 1221269186, 
      "score": 22, 
      "owner": {
        "display_name": "user6205", 
        "user_type": "does_not_exist"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1221327723, 
      "answer_id": 60243
    }, 
    {
      "body": "<p>If you are really just returning a predetermined, fixed value, you could create a dictionary with all possible input indexes as the keys, along with their corresponding values. Also, you might not really want a function to do this - unless you're computing the return value somehow.</p>\n\n<p>Oh, and if you feel like doing something switch-like, see <a href=\"http://www.mustap.com/pythonzone_post_224_python-switch-statement\" rel=\"nofollow\">here</a>.</p>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221267419, 
      "creation_date": 1221266629, 
      "score": 1, 
      "owner": {
        "user_id": 1155, 
        "profile_image": "https://www.gravatar.com/avatar/b8d0d4c51bbc0c12dde02d5568863ff9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 367, 
        "link": "http://stackoverflow.com/users/1155/eugene", 
        "display_name": "Eugene"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1221267419, 
      "answer_id": 60216
    }, 
    {
      "body": "<p>You could use a dictionary:</p>\n\n<pre><code>def f(x):\n    return {\n        'a': 1,\n        'b': 2,\n    }[x]\n</code></pre>\n", 
      "question_id": 60208, 
      "last_activity_date": 1221266304, 
      "creation_date": 1221266304, 
      "score": 317, 
      "owner": {
        "user_id": 893, 
        "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 391262, 
        "link": "http://stackoverflow.com/users/893/greg-hewgill", 
        "accept_rate": 87, 
        "display_name": "Greg Hewgill"
      }, 
      "is_accepted": true, 
      "answer_id": 60211
    }
  ], 
  "546321": [
    {
      "body": "<pre><code>datetime.datetime.now()  + datetime.timedelta(days=1)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1419498256, 
      "creation_date": 1419498256, 
      "score": 0, 
      "owner": {
        "user_id": 272933, 
        "profile_image": "https://www.gravatar.com/avatar/a75ed3d4afc5cb9e71649149f8ed660e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 23, 
        "link": "http://stackoverflow.com/users/272933/user272933", 
        "display_name": "user272933"
      }, 
      "is_accepted": false, 
      "answer_id": 27645766
    }, 
    {
      "body": "<p>Yet another solution - hope someone will like it:</p>\n\n<pre><code>def add_months(d, months):\n    return d.replace(year=d.year+months//12).replace(month=(d.month+months)%12)\n</code></pre>\n\n<p>This solution doesn't work for days 29,30,31 for all cases, so more robust solution is needed (which is not so nice anymore :) ):</p>\n\n<pre><code>def add_months(d, months):\n    for i in range(4):\n        day = d.day - i\n        try:\n            return d.replace(day=day).replace(year=d.year+int(months)//12).replace(month=(d.month+int(months))%12)\n        except:\n            pass\n    raise Exception(\"should not happen\")\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1390262284, 
      "creation_date": 1383123069, 
      "score": 1, 
      "owner": {
        "user_id": 565525, 
        "profile_image": "https://www.gravatar.com/avatar/bbbf35b74643a7a5527fff70a73bcb30?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3479, 
        "link": "http://stackoverflow.com/users/565525/robert-lujo", 
        "display_name": "Robert Lujo"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1390262284, 
      "answer_id": 19677636
    }, 
    {
      "body": "<pre><code>    def addDay(date, number):\n        for i in range(number)\n            #try to add a day\n            try:\n                date = date.replace(day = date.day + 1)\n            #in case it's impossible ex:january 32nd add a month and restart at day 1\n            except:\n                #add month part\n                try:\n                    date = date.replace(month = date.month +1, day = 1)\n                except:\n                    date = date.replace(year = date.year +1, month = 1, day = 1)\n</code></pre>\n\n<p>For everyone still reading this post. I think this code is way clearer, especially compared to code using modulo(%).</p>\n\n<p>Sorry for any grammatical error, english is so not my main language</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1381313855, 
      "creation_date": 1381313855, 
      "score": 0, 
      "owner": {
        "user_id": 2862303, 
        "profile_image": "https://www.gravatar.com/avatar/e487d95bc0226b548c45a1ce24625d57?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2862303/user2862303", 
        "display_name": "user2862303"
      }, 
      "is_accepted": false, 
      "answer_id": 19269236
    }, 
    {
      "body": "<p>This solution works correctly for December, which most of the answers on this page do not.\nYou need to first shift the months from base 1 (ie Jan = 1) to base 0 (ie Jan = 0) before using modulus ( % ) or integer division ( // ), otherwise November (11) plus 1 month gives you 12, which when finding the remainder ( 12 % 12 ) gives 0.</p>\n\n<p>(And dont suggest \"(month % 12) + 1\" or Oct + 1 = december!)</p>\n\n<pre><code>def AddMonths(d,x):\n    newmonth = ((( d.month - 1) + x ) % 12 ) + 1\n    newyear  = d.year + ((( d.month - 1) + x ) / 12 ) \n    return datetime.date( newyear, newmonth, d.day)\n</code></pre>\n\n<p>However ... This doesnt account for problem like Jan 31 + one month. So we go back to the OP - what do you mean by adding a month? One soln is to backtrack until you get to a valid day, given that most people would presume the last day of jan, plus one month, equals the last day of Feb.\nThis will work on negative numbers of months too.\nProof:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),1)\ndatetime.date(2010, 9, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),4)\ndatetime.date(2010, 12, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),5)\ndatetime.date(2011, 1, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),13)\ndatetime.date(2011, 9, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),24)\ndatetime.date(2012, 8, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-1)\ndatetime.date(2010, 7, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),0)\ndatetime.date(2010, 8, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-12)\ndatetime.date(2009, 8, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-8)\ndatetime.date(2009, 12, 25)\n&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-7)\ndatetime.date(2010, 1, 25)&gt;&gt;&gt; \n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1371837100, 
      "creation_date": 1281565109, 
      "score": 8, 
      "owner": {
        "user_id": 417751, 
        "profile_image": "https://www.gravatar.com/avatar/721fc707b9a068e488babe0a1a379f24?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 81, 
        "link": "http://stackoverflow.com/users/417751/user417751", 
        "display_name": "user417751"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1371837100, 
      "answer_id": 3463303
    }, 
    {
      "body": "<p>We probably should use dateutil.relativedelta</p>\n\n<p>however for academic interest I will just add that before I discovered it I was goint to use this:</p>\n\n<p>try:<br>\n&nbsp;&nbsp;&nbsp;vexpDt = K.today.replace(K.today.year + (K.today.month+6)//12, (K.today.month+5)%12+1, K.today.day)<br>\nexcept:<br>\n&nbsp;&nbsp;&nbsp;vexpDt = K.today.replace(K.today.year + (K.today.month+6)//12, (K.today.month+6)%12+1, 1) - timedelta(days = 1)<br></p>\n\n<p>it seems quite simple but still catches all the issues like 29,30,31</p>\n\n<p>it also works for - 6 mths by doing -timedelta</p>\n\n<p>nb - don't be confused by K.today its just a variable in my program</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1369750538, 
      "creation_date": 1369745639, 
      "score": 0, 
      "owner": {
        "user_id": 2405624, 
        "profile_image": "http://i.stack.imgur.com/iK0Tz.gif?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/2405624/frosty-snowman", 
        "display_name": "Frosty Snowman"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1369750538, 
      "answer_id": 16792632
    }, 
    {
      "body": "<p>I found this solution to be good.  (This uses the python-dateutil extension, <a href=\"http://labix.org/python-dateutil\">http://labix.org/python-dateutil</a> )</p>\n\n<pre><code>from datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nsix_months = date.today() + relativedelta( months = +6 )\n</code></pre>\n\n<p>The advantage of this approach is that it takes care of issues with 28,30,31 days etc. This becomes very useful in handling business rules and scenarios (say invoice generation etc.)</p>\n\n<pre><code>$ date(2010,12,31)+relativedelta(months=+1)\n  datetime.date(2011, 1, 31)\n\n$ date(2010,12,31)+relativedelta(months=+2)\n  datetime.date(2011, 2, 28)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1344027584, 
      "creation_date": 1291962156, 
      "score": 256, 
      "owner": {
        "user_id": 415112, 
        "profile_image": "https://www.gravatar.com/avatar/d448a194160d971a56a7cce0121a23c0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2709, 
        "link": "http://stackoverflow.com/users/415112/mahendra", 
        "display_name": "Mahendra"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1344027584, 
      "answer_id": 4406260
    }, 
    {
      "body": "<p>In this function, n can be positive or negative.</p>\n\n<pre><code>def addmonth(d, n):\n    n += 1\n    dd = datetime.date(d.year + n/12, d.month + n%12, 1)-datetime.timedelta(1)\n    return datetime.date(dd.year, dd.month, min(d.day, dd.day))\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1337934118, 
      "creation_date": 1337933720, 
      "score": 0, 
      "owner": {
        "user_id": 1416890, 
        "profile_image": "https://www.gravatar.com/avatar/83d3ed98efd922899b3322e3c1f20318?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 9, 
        "link": "http://stackoverflow.com/users/1416890/newby", 
        "display_name": "newby"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1337934118, 
      "answer_id": 10750881
    }, 
    {
      "community_owned_date": 1263607324, 
      "body": "<p>Modified Johannes Wei's answer in the case 1new_month = 121.  This works perfectly for me.  The months could be positive or negative.</p>\n\n<pre><code>def addMonth(d,months=1):\n    year, month, day = d.timetuple()[:3]\n    new_month = month + months\n    return datetime.date(year + ((new_month-1) / 12), (new_month-1) % 12 +1, day)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1328716923, 
      "creation_date": 1263607324, 
      "score": 0, 
      "owner": {
        "user_id": 251992, 
        "profile_image": "https://www.gravatar.com/avatar/f5dd3f00219a72ed04a7bd70475439b2?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/251992/xinhui-tang", 
        "display_name": "Xinhui Tang"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1328716923, 
      "answer_id": 2075926
    }, 
    {
      "body": "<p>I know this was for 6 months, however the answer shows in google for \"adding months in python\" if you are adding one month:</p>\n\n<pre><code>import calendar\n\ndate = datetime.date.today()    //Or your date\n\ndatetime.timedelta(days=calendar.monthrange(date.year,date.month)[1])\n</code></pre>\n\n<p>this would count the days in the current month and add them to the current date, using 365/12 would ad 1/12 of a year can causes issues for short / long months if your iterating over the date.</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1326407969, 
      "creation_date": 1302656047, 
      "score": 5, 
      "owner": {
        "user_id": 539598, 
        "profile_image": "https://www.gravatar.com/avatar/da6e1867dedaa43a9e1759e60dd3c654?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 143, 
        "link": "http://stackoverflow.com/users/539598/mike-davies", 
        "display_name": "Mike Davies"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1326407969, 
      "answer_id": 5643283
    }, 
    {
      "body": "<p>Rework of an earlier answer by user417751. Maybe not so pythonic way, but it takes care of different month lengths and leap years. In this case 31 January 2012 + 1 month = 29 February 2012. </p>\n\n<pre><code>import datetime\nimport calendar\n\ndef add_mths(d, x):\n    newday = d.day\n    newmonth = (((d.month - 1) + x) % 12) + 1\n    newyear  = d.year + (((d.month - 1) + x) // 12)\n    if newday &gt; calendar.mdays[newmonth]:\n        newday = calendar.mdays[newmonth]\n        if newyear % 4 == 0 and newmonth == 2:\n            newday += 1\n    return datetime.date(newyear, newmonth, newday)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1325355056, 
      "creation_date": 1325355056, 
      "score": 0, 
      "owner": {
        "user_id": 1104663, 
        "profile_image": "https://www.gravatar.com/avatar/9306d2aa908445d5f6c329c65d8e8bd5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 38, 
        "link": "http://stackoverflow.com/users/1104663/ireneusz", 
        "display_name": "Ireneusz"
      }, 
      "is_accepted": false, 
      "answer_id": 8689734
    }, 
    {
      "body": "<pre><code>import time\n\ndef add_month(start_time, months):  \n\n        ret = time.strptime(start_time, '%Y-%m-%d')\n        t = list(ret)\n\n        t[1] += months\n\n        if t[1] &gt; 12:\n            t[0] += 1 + int(months / 12)\n\n            t[1] %= 12\n\n        return int(time.mktime(tuple(t)))\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1323980506, 
      "creation_date": 1313029702, 
      "score": 2, 
      "owner": {
        "user_id": 889094, 
        "profile_image": "https://www.gravatar.com/avatar/f85e5bdf6e658d0ee9c3954e38a699f5?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/889094/ares", 
        "display_name": "ares"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1323980506, 
      "answer_id": 7020175
    }, 
    {
      "body": "<p>Modified the AddMonths() for use in Zope and handling invalid day numbers:</p>\n\n<pre><code>def AddMonths(d,x):\n    days_of_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    newmonth = ((( d.month() - 1) + x ) % 12 ) + 1\n    newyear  = d.year() + ((( d.month() - 1) + x ) // 12 ) \n    if d.day() &gt; days_of_month[newmonth-1]:\n      newday = days_of_month[newmonth-1]\n    else:\n      newday = d.day() \n    return DateTime( newyear, newmonth, newday)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1307363122, 
      "creation_date": 1307363122, 
      "score": 1, 
      "owner": {
        "user_id": 785884, 
        "profile_image": "https://www.gravatar.com/avatar/490f8fa6f8fc0411da7ee5adc63a90ad?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/785884/jost", 
        "display_name": "Jost"
      }, 
      "is_accepted": false, 
      "answer_id": 6251949
    }, 
    {
      "body": "<p>I have a better way to solve the 'February 31st' problem:</p>\n\n<pre><code>def add_months(start_date, months):\n    import calendar\n\n    year = start_date.year + (months / 12)\n    month = start_date.month + (months % 12)\n    day = start_date.day\n\n    if month &gt; 12:\n        month = month % 12\n        year = year + 1\n\n    days_next = calendar.monthrange(year, month)[1]\n    if day &gt; days_next:\n        day = days_next\n\n    return start_date.replace(year, month, day)\n</code></pre>\n\n<p>I think that it also works with negative numbers (to subtract months), but I haven't tested this very much.</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1306327473, 
      "creation_date": 1306321203, 
      "score": 1, 
      "owner": {
        "user_id": 769422, 
        "profile_image": "https://www.gravatar.com/avatar/a5149bc3fc0872c691ff45f3237c27db?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/769422/amoyafoss", 
        "display_name": "amoyafoss"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1306327473, 
      "answer_id": 6123390
    }, 
    {
      "body": "<p>my modification to tony diep's answer, possibly marginally more elegant:</p>\n\n<pre><code>def add_months(date, months):\n    month = date.month + months - 1\n    year = date.year + (month / 12)\n    month = (month % 12) + 1\n    day = date.day\n    while (day &gt; 0):\n        try:\n            new_date = date.replace(year=year, month=month, day=day)\n            break\n        except:\n            day = day - 1    \n    return new_date\n</code></pre>\n\n<p>adds months according to a business needs interpretation</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1305066754, 
      "creation_date": 1305052406, 
      "score": 0, 
      "owner": {
        "user_id": 437948, 
        "profile_image": "https://www.gravatar.com/avatar/deae38267559403e7028a1212224b72b?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 433, 
        "link": "http://stackoverflow.com/users/437948/mark", 
        "display_name": "Mark"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1305066754, 
      "answer_id": 5954712
    }, 
    {
      "body": "<pre><code>import datetime\n\n\n'''\nCreated on 2011-03-09\n\n@author: tonydiep\n'''\n\ndef add_business_months(start_date, months_to_add):\n    \"\"\"\n    Add months in the way business people think of months. \n    Jan 31, 2011 + 1 month = Feb 28, 2011 to business people\n    Method: Add the number of months, roll back the date until it becomes a valid date\n    \"\"\"\n    # determine year\n    years_change = months_to_add / 12\n\n    # determine if there is carryover from adding months\n    if (start_date.month + (months_to_add % 12) &gt; 12 ):\n        years_change = years_change + 1\n\n    new_year = start_date.year + years_change\n\n    # determine month\n    work = months_to_add % 12\n    if 0 == work:\n        new_month = start_date.month\n    else:\n        new_month = (start_date.month + (work % 12)) % 12\n\n    if 0 == new_month:\n        new_month = 12 \n\n    # determine day of the month\n    new_day = start_date.day\n    if(new_day in [31, 30, 29, 28]):\n        #user means end of the month\n        new_day = 31\n\n\n    new_date = None\n    while (None == new_date and 27 &lt; new_day):\n        try:\n            new_date = start_date.replace(year=new_year, month=new_month, day=new_day)\n        except:\n            new_day = new_day - 1   #wind down until we get to a valid date\n\n    return new_date\n\n\nif __name__ == '__main__':\n    #tests\n    dates = [datetime.date(2011, 1, 31),\n             datetime.date(2011, 2, 28),\n             datetime.date(2011, 3, 28),\n             datetime.date(2011, 4, 28),\n             datetime.date(2011, 5, 28),\n             datetime.date(2011, 6, 28),\n             datetime.date(2011, 7, 28),\n             datetime.date(2011, 8, 28),\n             datetime.date(2011, 9, 28),\n             datetime.date(2011, 10, 28),\n             datetime.date(2011, 11, 28),\n             datetime.date(2011, 12, 28),\n             ]\n    months = range(1, 24)\n    for start_date in dates:\n        for m in months:\n            end_date = add_business_months(start_date, m)\n            print(\"%s\\t%s\\t%s\" %(start_date, end_date, m))\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1299726419, 
      "creation_date": 1299716972, 
      "score": 1, 
      "owner": {
        "user_id": 652667, 
        "profile_image": "https://www.gravatar.com/avatar/9c0b987a70b35af4ec988e02566f9e1a?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/652667/tony-diep", 
        "display_name": "tony diep"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1299726419, 
      "answer_id": 5254091
    }, 
    {
      "body": "<p>I solved this problem like this:</p>\n\n<pre><code>import calendar\nfrom datetime import datetime\nmoths2add = 6\nnow = datetime.now()\ncurrent_year = now.year\ncurrent_month = now.month\n#count days in months you want to add using calendar module\ndays = sum(\n  [calendar.monthrange(current_year, elem)[1] for elem in range(current_month, current_month + moths)]\n    )\nprint now + days\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1296657884, 
      "creation_date": 1296657884, 
      "score": 1, 
      "owner": {
        "user_id": 600153, 
        "profile_image": "https://www.gravatar.com/avatar/bb8074f4ed3e4d3817cf165c758c3047?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/600153/babysnake", 
        "display_name": "BabySnake"
      }, 
      "is_accepted": false, 
      "answer_id": 4875773
    }, 
    {
      "body": "<p>I think it would be safer to do something like this instead of manually adding days:</p>\n\n<pre><code>import datetime\ntoday = datetime.date.today()\n\ndef addMonths(dt, months = 0):\n    new_month = months + dt.month\n    year_inc = 0\n    if new_month&gt;12:\n        year_inc +=1\n        new_month -=12\n    return dt.replace(month = new_month, year = dt.year+year_inc)\n\nnewdate = addMonths(today, 6)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1296643533, 
      "creation_date": 1296643533, 
      "score": 0, 
      "owner": {
        "user_id": 113678, 
        "profile_image": "http://i.stack.imgur.com/oTPdQ.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1952, 
        "link": "http://stackoverflow.com/users/113678/datagreed", 
        "accept_rate": 86, 
        "display_name": "DataGreed"
      }, 
      "is_accepted": false, 
      "answer_id": 4873454
    }, 
    {
      "community_owned_date": 1278525572, 
      "body": "<p>So, here is an example of the <code>dateutil.relativedelta</code> which I found useful for iterating through the past year, skipping a month each time to the present date:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from dateutil.relativedelta import relativedelta\n&gt;&gt;&gt; today = datetime.datetime.today()\n&gt;&gt;&gt; month_count = 0\n&gt;&gt;&gt; while month_count &lt; 12:\n...  day = today - relativedelta(months=month_count)\n...  print day\n...  month_count += 1\n... \n2010-07-07 10:51:45.187968\n2010-06-07 10:51:45.187968\n2010-05-07 10:51:45.187968\n2010-04-07 10:51:45.187968\n2010-03-07 10:51:45.187968\n2010-02-07 10:51:45.187968\n2010-01-07 10:51:45.187968\n2009-12-07 10:51:45.187968\n2009-11-07 10:51:45.187968\n2009-10-07 10:51:45.187968\n2009-09-07 10:51:45.187968\n2009-08-07 10:51:45.187968\n</code></pre>\n\n<p>As with the other answers, you have to figure out what you actually mean by \"6 months from now.\"  If you mean \"today's day of the month in the month six years in the future\" then this would do:</p>\n\n<pre><code>datetime.datetime.now() + relativedelta(months=6)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1278525572, 
      "creation_date": 1278525572, 
      "score": 2, 
      "owner": {
        "user_id": 178711, 
        "profile_image": "https://www.gravatar.com/avatar/0acdaf9e3b86c151cd7186d90bd17586?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 69, 
        "link": "http://stackoverflow.com/users/178711/dannyman", 
        "display_name": "dannyman"
      }, 
      "is_accepted": false, 
      "answer_id": 3197505
    }, 
    {
      "body": "<p>I use this function to change year and month but keep day:</p>\n\n<pre><code>def replace_month_year(date1, year2, month2):\n    try:\n        date2 = date1.replace(month = month2, year = year2)\n    except:\n        date2 = datetime.date(year2, month2 + 1, 1) - datetime.timedelta(days=1)\n    return date2\n</code></pre>\n\n<p>You should write:</p>\n\n<pre><code>new_year = my_date.year + (my_date.month + 6) / 12\nnew_month = (my_date.month + 6) % 12\nnew_date = replace_month_year(my_date, new_year, new_month)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1270130151, 
      "creation_date": 1270130151, 
      "score": 0, 
      "owner": {
        "user_id": 177667, 
        "profile_image": "https://www.gravatar.com/avatar/0b05a016352fc1ab0bee326897896cc1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 36, 
        "link": "http://stackoverflow.com/users/177667/gt-rocker", 
        "display_name": "gt_rocker"
      }, 
      "is_accepted": false, 
      "answer_id": 2560837
    }, 
    {
      "body": "<p>This is what I came up with. It moves the correct number of months and years but ignores days (which was what I needed in my situation).</p>\n\n<pre><code>import datetime\n\nmonth_dt = 4\ntoday = datetime.date.today()\ny,m = today.year, today.month\nm += month_dt-1\nyear_dt = m//12\nnew_month = m%12\nnew_date = datetime.date(y+year_dt, new_month+1, 1)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1268507428, 
      "creation_date": 1267563965, 
      "score": 0, 
      "owner": {
        "user_id": 159283, 
        "profile_image": "https://www.gravatar.com/avatar/f43468989da44acf580f4c53ae7939a7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 72, 
        "link": "http://stackoverflow.com/users/159283/marshallpenguin", 
        "accept_rate": 43, 
        "display_name": "marshallpenguin"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1268507428, 
      "answer_id": 2366759
    }, 
    {
      "body": "<p>The QDate class of PyQt4 has an addmonths function.</p>\n\n<pre><code>&gt;&gt;&gt;from PyQt4.QtCore import QDate  \n&gt;&gt;&gt;dt = QDate(2009,12,31)  \n&gt;&gt;&gt;required = dt.addMonths(6) \n\n&gt;&gt;&gt;required\nPyQt4.QtCore.QDate(2010, 6, 30)\n\n&gt;&gt;&gt;required.toPyDate()\ndatetime.date(2010, 6, 30)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1258475836, 
      "creation_date": 1258475836, 
      "score": 2, 
      "owner": {
        "user_id": 213043, 
        "profile_image": "https://www.gravatar.com/avatar/a865b3f544f4230edeb8fe4d57d5976c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 43, 
        "link": "http://stackoverflow.com/users/213043/user213043", 
        "display_name": "user213043"
      }, 
      "is_accepted": false, 
      "answer_id": 1750124
    }, 
    {
      "body": "<p>What do you mean by '6 months'. Is 2009-02-13 + 6 months == 2009-08-13 or is it 2009-02-13 + 6*30 days?</p>\n\n<pre><code>import mx.DateTime as dt\n\n#6 Months\ndt.now()+dt.RelativeDateTime(months=6)\n#result is '2009-08-13 16:28:00.84'\n\n#6*30 days\ndt.now()+dt.RelativeDateTime(days=30*6)\n#result is '2009-08-12 16:30:03.35'\n</code></pre>\n\n<p>More info about <a href=\"http://www.egenix.com/products/python/mxBase/mxDateTime/\" rel=\"nofollow\">mx.DateTime</a></p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234539044, 
      "creation_date": 1234538467, 
      "score": 8, 
      "owner": {
        "user_id": 55925, 
        "profile_image": "https://www.gravatar.com/avatar/4d4fbbf7cbb15f7076a5bc273f7fa039?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 20558, 
        "link": "http://stackoverflow.com/users/55925/johannes-wei%c3%9f", 
        "accept_rate": 86, 
        "display_name": "Johannes Wei&#223;"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1234539044, 
      "answer_id": 546332
    }, 
    {
      "body": "<pre><code>import datetime\nprint (datetime.date.today() + datetime.timedelta(6*365/12)).isoformat()\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234538986, 
      "creation_date": 1234538986, 
      "score": 48, 
      "owner": {
        "user_id": 50902, 
        "profile_image": "https://www.gravatar.com/avatar/2a425ef5e66e681301b99a9eb2127d35?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 10761, 
        "link": "http://stackoverflow.com/users/50902/kmkaplan", 
        "accept_rate": 100, 
        "display_name": "kmkaplan"
      }, 
      "is_accepted": true, 
      "answer_id": 546356
    }, 
    {
      "body": "<p>Well, that depends what you mean by 6 months from the current date.</p>\n\n<p>1) natural months, </p>\n\n<pre><code>   (day,month,year) = (day,(month+6)%12,year+(month+6)/12)\n</code></pre>\n\n<p>2) bankers definition, 6*30</p>\n\n<pre><code>   date += datetime.timedelta(6*30)\n</code></pre>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234538964, 
      "creation_date": 1234538964, 
      "score": 34, 
      "owner": {
        "user_id": 60711, 
        "profile_image": "https://www.gravatar.com/avatar/0b4fa970be41e2286c39f5b0167e6d9d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 57312, 
        "link": "http://stackoverflow.com/users/60711/vartec", 
        "accept_rate": 78, 
        "display_name": "vartec"
      }, 
      "is_accepted": false, 
      "answer_id": 546354
    }, 
    {
      "body": "<p>There's no direct way to do it with Python's datetime.</p>\n\n<p>Check out the relativedelta type at <a href=\"http://labix.org/python-dateutil#head-ba5ffd4df8111d1b83fc194b97ebecf837add454\" rel=\"nofollow\">python-dateutil</a>. It allows you to specify a  time delta in months.</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234538945, 
      "creation_date": 1234538945, 
      "score": 5, 
      "owner": {
        "user_id": 39540, 
        "profile_image": "https://www.gravatar.com/avatar/f8fff8172919e84f742e82cfdd40fba0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2083, 
        "link": "http://stackoverflow.com/users/39540/akbar-ibrahim", 
        "accept_rate": 83, 
        "display_name": "Akbar ibrahim"
      }, 
      "is_accepted": false, 
      "answer_id": 546353
    }, 
    {
      "body": "<p><a href=\"http://labix.org/python-dateutil\" rel=\"nofollow\">Dateutil package</a> has implementation of such functionality. But be aware, that this will be <em>naive</em>, as others pointed already.</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234538765, 
      "creation_date": 1234538765, 
      "score": 6, 
      "owner": {
        "user_id": 12138, 
        "profile_image": "https://www.gravatar.com/avatar/86482989331f6a3a226d1991c20fce9a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 8889, 
        "link": "http://stackoverflow.com/users/12138/zgoda", 
        "accept_rate": 100, 
        "display_name": "zgoda"
      }, 
      "is_accepted": false, 
      "answer_id": 546347
    }, 
    {
      "body": "<p>Just use the <em>timetuple</em> method to extract the months, add your months and build a new dateobject. If there is a already existing method for this I do not know it.</p>\n\n<pre><code>import datetime\n\ndef in_the_future(months=1):\n    year, month, day = datetime.date.today().timetuple()[:3]\n    new_month = month + months\n    return datetime.date(year + (new_month / 12), new_month % 12, day)\n</code></pre>\n\n<p>The API is a bit clumsy, but works as an example. Will also obviously not work on corner-cases like 2008-01-31 + 1 month. :)</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234538622, 
      "creation_date": 1234538622, 
      "score": 6, 
      "owner": {
        "user_id": 15274, 
        "profile_image": "https://www.gravatar.com/avatar/2d6ef152f55ad02f221278801069a854?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6594, 
        "link": "http://stackoverflow.com/users/15274/pi", 
        "accept_rate": 67, 
        "display_name": "pi."
      }, 
      "is_accepted": false, 
      "answer_id": 546339
    }, 
    {
      "body": "<p>Use the python datetime module to add a timedelta of six months to datetime.today() .</p>\n\n<p><a href=\"http://docs.python.org/library/datetime.html\" rel=\"nofollow\">http://docs.python.org/library/datetime.html</a></p>\n\n<p>You will of course have to solve the issue raised by Johannes Wei\u00df-- what <em>do</em> you mean by 6 months?</p>\n", 
      "question_id": 546321, 
      "last_activity_date": 1234538595, 
      "creation_date": 1234538459, 
      "score": 0, 
      "owner": {
        "user_id": 18515, 
        "profile_image": "https://www.gravatar.com/avatar/f9375b447dd668a10c19891379b9db2a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 25615, 
        "link": "http://stackoverflow.com/users/18515/devin-jeanpierre", 
        "accept_rate": 54, 
        "display_name": "Devin Jeanpierre"
      }, 
      "is_accepted": false, 
      "answer_id": 546331
    }
  ], 
  "89178": [
    {
      "body": "<pre><code>x = [] # Your list  of items that includes Duplicates\n\n# Assuming that your list contains items of only immutable data types\n\ndict_x = {} \n\ndict_x = {item : item for i, item in enumerate(x) if item not in dict_x.keys()}\n# Average t.c. = O(n)* O(1) ; furthermore the dict comphrehension and generator like behaviour of enumerate adds a certain efficiency and pythonic feel to it.\n\nx = dict_x.keys() # if you want your output in list format \n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1411300883, 
      "creation_date": 1411298813, 
      "score": 0, 
      "owner": {
        "user_id": 4063267, 
        "profile_image": "https://lh4.googleusercontent.com/-H7V1XoucSM0/AAAAAAAAAAI/AAAAAAAACaw/gRPXziJacS4/photo.jpg?sz=128", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/4063267/bigdataguy", 
        "display_name": "BigDataGuy"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1411300883, 
      "answer_id": 25958705
    }, 
    {
      "body": "<p>This is the fastest one, comparing all the stuff from this <a href=\"http://www.peterbe.com/plog/uniqifiers-benchmark\" rel=\"nofollow\">lengthy discussion</a> and the other answers given here, refering to this <a href=\"http://www.peterbe.com/plog/uniqifiers-benchmark/uniqifiers_benchmark.py\" rel=\"nofollow\">benchmark</a>. It's another 25% faster than the fastest function from the discussion, <code>f8</code>. Thanks to David Kirby for the idea.</p>\n\n<pre><code>def uniquify(seq):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if x not in seen and not seen_add(x)]\n</code></pre>\n\n<p>Some time comparison:</p>\n\n<pre><code>$ python uniqifiers_benchmark.py \n* f8_original 3.76\n* uniquify 3.0\n* terhorst 5.44\n* terhorst_localref 4.08\n* del_dups 4.76\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1388130871, 
      "creation_date": 1388072330, 
      "score": 0, 
      "owner": {
        "user_id": 715042, 
        "profile_image": "http://i.stack.imgur.com/0w3Ib.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1555, 
        "link": "http://stackoverflow.com/users/715042/michael", 
        "accept_rate": 89, 
        "display_name": "Michael"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1388130871, 
      "answer_id": 20787336
    }, 
    {
      "body": "<p>This may be the simplest way (not the fastest):</p>\n\n<pre><code>list(OrderedDict.fromkeys(iterable))\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1319159405, 
      "creation_date": 1319159405, 
      "score": 5, 
      "owner": {
        "user_id": 1001643, 
        "profile_image": "https://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 55656, 
        "link": "http://stackoverflow.com/users/1001643/raymond-hettinger", 
        "accept_rate": 75, 
        "display_name": "Raymond Hettinger"
      }, 
      "is_accepted": false, 
      "answer_id": 7844011
    }, 
    {
      "body": "<p>Here are two recipes from the <em>itertools</em> documentation:</p>\n\n<pre><code>def unique_everseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember all elements ever seen.\"\n    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D\n    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in ifilterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\ndef unique_justseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember only the element just seen.\"\n    # unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --&gt; A B C A D\n    return imap(next, imap(itemgetter(1), groupby(iterable, key)))\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1319159231, 
      "creation_date": 1319159231, 
      "score": 1, 
      "owner": {
        "user_id": 1001643, 
        "profile_image": "https://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 55656, 
        "link": "http://stackoverflow.com/users/1001643/raymond-hettinger", 
        "accept_rate": 75, 
        "display_name": "Raymond Hettinger"
      }, 
      "is_accepted": false, 
      "answer_id": 7843997
    }, 
    {
      "body": "<p>Remove duplicates and preserve order:</p>\n\n<p>This is a fast 2-liner that leverages built-in functionality of list comprehensions and dicts.</p>\n\n<pre><code>x = [1, 1, 2, 'a', 'a', 3]\n\ntmpUniq = {} # temp variable used below \nresults = [tmpUniq.setdefault(i,i) for i in x if i not in tmpUniq]\n\nprint results\n[1, 2, 'a', 3]\n</code></pre>\n\n<p>The dict.setdefaults() function returns the value as well as adding it to the temp dict directly in the list comprehension.  Using the built-in functions and the hashes of the dict will work to maximize efficiency for the process.</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1293642711, 
      "creation_date": 1293642711, 
      "score": 1, 
      "owner": {
        "user_id": 557383, 
        "profile_image": "https://www.gravatar.com/avatar/1e8a43e3a4b709690ac04974af0aa267?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/557383/scot", 
        "display_name": "Scot"
      }, 
      "is_accepted": false, 
      "answer_id": 4556143
    }, 
    {
      "body": "<p>An in-place one-liner for this:</p>\n\n<pre><code>&gt;&gt;&gt; x = [1, 1, 2, 'a', 'a', 3]\n&gt;&gt;&gt; [ item for pos,item in enumerate(x) if x.index(item)==pos ]\n[1, 2, 'a', 3]\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1270818708, 
      "creation_date": 1270818708, 
      "score": 4, 
      "owner": {
        "user_id": 2185854, 
        "profile_image": "https://www.gravatar.com/avatar/9a70492412d82e5afdbc3ab8e67cc574?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 414, 
        "link": "http://stackoverflow.com/users/2185854/mario-ruggier", 
        "display_name": "Mario Ruggier"
      }, 
      "is_accepted": false, 
      "answer_id": 2607669
    }, 
    {
      "body": "<p>I haven't done any tests, but one possible algorithm might be to create a second list, and iterate through the first list.  If an item is not in the second list, add it to the second list.</p>\n\n<pre><code>x = [1, 1, 2, 'a', 'a', 3]\ny = []\nfor each in x:\n    if each not in y:\n        y.append(each)\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1227666659, 
      "creation_date": 1221701351, 
      "score": -1, 
      "owner": {
        "user_id": 188, 
        "profile_image": "https://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 17314, 
        "link": "http://stackoverflow.com/users/188/matthew-schinckel", 
        "accept_rate": 100, 
        "display_name": "Matthew Schinckel"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1227666659, 
      "answer_id": 89198
    }, 
    {
      "body": "<p>Here is the fastest solution so far (for the following input):</p>\n\n<pre><code>def del_dups(seq):\n    seen = {}\n    pos = 0\n    for item in seq:\n        if item not in seen:\n            seen[item] = True\n            seq[pos] = item\n            pos += 1\n    del seq[pos:]\n\nlst = [8, 8, 9, 9, 7, 15, 15, 2, 20, 13, 2, 24, 6, 11, 7, 12, 4, 10, 18, \n       13, 23, 11, 3, 11, 12, 10, 4, 5, 4, 22, 6, 3, 19, 14, 21, 11, 1, \n       5, 14, 8, 0, 1, 16, 5, 10, 13, 17, 1, 16, 17, 12, 6, 10, 0, 3, 9, \n       9, 3, 7, 7, 6, 6, 7, 5, 14, 18, 12, 19, 2, 8, 9, 0, 8, 4, 5]\ndel_dups(lst)\nprint(lst)\n# -&gt; [8, 9, 7, 15, 2, 20, 13, 24, 6, 11, 12, 4, 10, 18, 23, 3, 5, 22, 19, 14, \n#     21, 1, 0, 16, 17]\n</code></pre>\n\n<p>Dictionary lookup is slightly faster then the set's one in Python 3.</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1226448262, 
      "creation_date": 1226448262, 
      "score": 14, 
      "owner": {
        "user_id": 4279, 
        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 116334, 
        "link": "http://stackoverflow.com/users/4279/j-f-sebastian", 
        "accept_rate": 92, 
        "display_name": "J.F. Sebastian"
      }, 
      "is_accepted": false, 
      "answer_id": 282589
    }, 
    {
      "body": "<p>a=[1,2,3,4,5,7,7,8,8,9,9,3,45]</p>\n\n<p>def unique(l):</p>\n\n<pre><code>ids={}\nfor item in l:\n\tif not ids.has_key(item):\n\t\tids[item]=item\nreturn  ids.keys()\n</code></pre>\n\n<p>print a</p>\n\n<p>print unique(a)</p>\n\n<h1>----------------------------</h1>\n\n<p>Inserting elements will take theta(n)\nretrieving if element is exiting or not will take constant time\ntesting all the items will take also theta(n)\nso we can see that this solution will take theta(n)\nBear in Mind that dictionary in python implemented by hash table</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1226363538, 
      "creation_date": 1226363538, 
      "score": -2, 
      "owner": {
        "user_id": 35062, 
        "profile_image": "https://www.gravatar.com/avatar/a4a5a96e9c857f44d43456579cddc51a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3072, 
        "link": "http://stackoverflow.com/users/35062/abosamoor", 
        "display_name": "aboSamoor"
      }, 
      "is_accepted": false, 
      "answer_id": 279674
    }, 
    {
      "body": "<p>There are some great, efficient solutions here.  However, for anyone not concerned with the absolute most efficient <code>O(n)</code> solution, I'd go with the simple one-liner <code>O(n^2*log(n))</code> solution:</p>\n\n<pre><code>def unique(xs):\n    return sorted(set(xs), key=lambda x: xs.index(x))\n</code></pre>\n\n<p>or the more efficient two-liner <code>O(n*log(n))</code> solution:</p>\n\n<pre><code>def unique(xs):\n    positions = dict((e,pos) for pos,e in reversed(list(enumerate(xs))))\n    return sorted(set(xs), key=lambda x: positions[x])\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1226354165, 
      "creation_date": 1221744185, 
      "score": 1, 
      "owner": {
        "user_id": 1694, 
        "profile_image": "https://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 58644, 
        "link": "http://stackoverflow.com/users/1694/eli-courtwright", 
        "accept_rate": 94, 
        "display_name": "Eli Courtwright"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1226354165, 
      "answer_id": 92486
    }, 
    {
      "body": "<p>Obligatory generator-based variation:</p>\n\n<pre><code>def unique(seq):\n  seen = set()\n  for x in seq:\n    if x not in seen:\n      seen.add(x)\n      yield x\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1222530843, 
      "creation_date": 1222530843, 
      "score": 7, 
      "owner": {
        "user_id": 20310, 
        "profile_image": "https://www.gravatar.com/avatar/03347db2fae30fa50f1571d280b1eca3?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 13126, 
        "link": "http://stackoverflow.com/users/20310/constantin", 
        "accept_rate": 52, 
        "display_name": "Constantin"
      }, 
      "is_accepted": false, 
      "answer_id": 143883
    }, 
    {
      "body": "<p>If you take out the empty list from the call to set() in Terhost's answer, you get a little speed boost.</p>\n\n<p>Change:\n    found = set([])<br />\nto:\n    found = set()</p>\n\n<p>However, you don't need the set at all.</p>\n\n<pre><code>def unique(items):\n    keep = []\n\n    for item in items:\n        if item not in keep:\n            keep.append(item)\n\n    return keep\n</code></pre>\n\n<p>Using timeit I got these results:</p>\n\n<p>with set([]) -- 4.97210427363<br />\nwith set() -- 4.65712377445<br />\nwith no set -- 3.44865284975</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221817340, 
      "creation_date": 1221817340, 
      "score": 0, 
      "owner": {
        "user_id": 18695, 
        "profile_image": "https://www.gravatar.com/avatar/09cc62e1582009bcfc0371f6a7a9dac1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 215, 
        "link": "http://stackoverflow.com/users/18695/user18695", 
        "display_name": "user18695"
      }, 
      "is_accepted": false, 
      "answer_id": 100784
    }, 
    {
      "body": "<p>This is the fastest in-place method I've found (assuming a large proportion of duplicates):</p>\n\n<pre><code>def unique(l):\n    s = set(); n = 0\n    for x in l:\n        if x not in s: s.add(x); l[n] = x; n += 1\n    del l[n:]\n</code></pre>\n\n<p>This is 10% faster than Allen's implementation, on which it is based (timed with timeit.repeat, JIT compiled by psyco). It keeps the first instance of any duplicate.</p>\n\n<p>repton-infinity: I'd be interested if you could confirm my timings.</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221733064, 
      "creation_date": 1221733064, 
      "score": 8, 
      "owner": {
        "user_id": 11828, 
        "profile_image": "https://www.gravatar.com/avatar/30460bd73df70a706409737e596a2ed9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 8657, 
        "link": "http://stackoverflow.com/users/11828/james-hopkin", 
        "accept_rate": 100, 
        "display_name": "James Hopkin"
      }, 
      "is_accepted": false, 
      "answer_id": 91430
    }, 
    {
      "body": "<p>I don't know if this one is fast or not, but at least it is simple.</p>\n\n<p>Simply, convert it first to a set and then again to a list</p>\n\n<pre><code>def unique(container):\n  return list(set(container))\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221727892, 
      "creation_date": 1221727892, 
      "score": -1, 
      "owner": {
        "user_id": 16070, 
        "profile_image": "https://www.gravatar.com/avatar/a44bad9878fe366a1b286aecdadc9eb9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 966, 
        "link": "http://stackoverflow.com/users/16070/franck-mesirard", 
        "accept_rate": 75, 
        "display_name": "Franck Mesirard"
      }, 
      "is_accepted": false, 
      "answer_id": 91028
    }, 
    {
      "body": "<p>Using:</p>\n\n<pre><code>lst = [8, 8, 9, 9, 7, 15, 15, 2, 20, 13, 2, 24, 6, 11, 7, 12, 4, 10, 18, 13, 23, 11, 3, 11, 12, 10, 4, 5, 4, 22, 6, 3, 19, 14, 21, 11, 1, 5, 14, 8, 0, 1, 16, 5, 10, 13, 17, 1, 16, 17, 12, 6, 10, 0, 3, 9, 9, 3, 7, 7, 6, 6, 7, 5, 14, 18, 12, 19, 2, 8, 9, 0, 8, 4, 5]\n</code></pre>\n\n<p>And using the timeit module:</p>\n\n<pre><code>$ python -m timeit -s 'import uniquetest' 'uniquetest.etchasketch(uniquetest.lst)'\n</code></pre>\n\n<p>(and so on for the various other functions -- which I named after their posters), I have the following results (on my first generation Intel MacBook Pro):</p>\n\n<ul>\n<li>Allen: 14.6 usec per loop [1]</li>\n<li>Terhorst: 26.6 usec per loop</li>\n<li>Tarle: 44.7 usec per loop</li>\n<li>ctcherry: 44.8 usec per loop</li>\n<li>Etchasketch 1 (the short one): 64.6 usec per loop</li>\n<li>Schinckel: 65 usec per loop</li>\n<li>Etchasketch 2: 71.6 usec per loop</li>\n<li>Little: 89.4 usec per loop</li>\n<li>Tyler: 179 usec per loop</li>\n</ul>\n\n<p>[1] Note that Allen modifies the list in place \u2013 I believe this has skewed the time, in that the timeit module runs the code 100000 times and 99999 of them are with the dupe-less list.</p>\n\n<p>Summary: Straight-forward implementation with sets wins over confusing one-liners :-)</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221714859, 
      "creation_date": 1221714859, 
      "score": 15, 
      "owner": {
        "user_id": 15154, 
        "profile_image": "https://www.gravatar.com/avatar/cdca0dc45085388c1b753104ce4c8648?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 16102, 
        "link": "http://stackoverflow.com/users/15154/john-fouhy", 
        "accept_rate": 88, 
        "display_name": "John Fouhy"
      }, 
      "is_accepted": false, 
      "answer_id": 90225
    }, 
    {
      "body": "<p>One pass.</p>\n\n<pre><code>a = [1,1,'a','b','c','c']\n\nnew_list = []\nprev = None\n\nwhile 1:\n    try:\n        i = a.pop(0)\n        if i != prev:\n            new_list.append(i)\n        prev = i\n    except IndexError:\n        break\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221714493, 
      "creation_date": 1221714493, 
      "score": -2, 
      "owner": {
        "user_id": 15958, 
        "profile_image": "https://www.gravatar.com/avatar/7fff733ad25bb65da8f0db1c1a2d556e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1453, 
        "link": "http://stackoverflow.com/users/15958/sergey-stolyarov", 
        "accept_rate": 58, 
        "display_name": "Sergey Stolyarov"
      }, 
      "is_accepted": false, 
      "answer_id": 90191
    }, 
    {
      "body": "<p>has_key in python is O(1). Insertion and retrieval from a hash is also O(1). Loops through n items twice, so O(n).</p>\n\n<pre><code>def unique(list):\n  s = {}\n  output = []\n  for x in list:\n    count = 1\n    if(s.has_key(x)):\n      count = s[x] + 1\n\n    s[x] = count\n  for x in list:\n    count = s[x]\n    if(count &gt; 0):\n      s[x] = 0\n      output.append(x)\n  return output\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221712122, 
      "creation_date": 1221710841, 
      "score": 1, 
      "owner": {
        "user_id": 14640, 
        "profile_image": "https://www.gravatar.com/avatar/10cdc7471e7c72513212f0fe89cb6c67?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 386, 
        "link": "http://stackoverflow.com/users/14640/etchasketch", 
        "display_name": "etchasketch"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1221712122, 
      "answer_id": 89917
    }, 
    {
      "body": "<p>You can actually do something really cool in Python to solve this.  You can create a list comprehension that would reference itself as it is being built.  As follows:</p>\n\n<pre><code>   # remove duplicates...\n   def unique(my_list):\n       return [x for x in my_list if x not in locals()['_[1]'].__self__]\n</code></pre>\n\n<p>Edit: <strong>I removed the \"self\", and it works on Mac OS X, Python 2.5.1.</strong></p>\n\n<p>The _[1] is Python's \"secret\" reference to the new list.  The above, of course, is a little messy, but you could adapt it fit your needs as necessary.  For example, you can actually write a function that returns a reference to the comprehension; it would look more like:</p>\n\n<pre><code>return [x for x in my_list if x not in this_list()]\n</code></pre>\n\n<p><hr /></p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221705218, 
      "creation_date": 1221702183, 
      "score": 3, 
      "owner": {
        "user_id": 10675, 
        "profile_image": "https://www.gravatar.com/avatar/60ec02712bff98ec228a2faf7a97c579?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4202, 
        "link": "http://stackoverflow.com/users/10675/jake", 
        "accept_rate": 80, 
        "display_name": "Jake"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1221705218, 
      "answer_id": 89260
    }, 
    {
      "body": "<p>O(n) if dict is hash, O(nlogn) if dict is tree, and simple, fixed.  Thanks to Matthew for the suggestion.  Sorry I don't know the underlying types.</p>\n\n<pre><code>def unique(x):    \n  output = []\n  y = {}\n  for item in x:\n    y[item] = \"\"\n\n  for item in x:\n    if item in y:\n      output.append(item)\n\n  return output\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221704196, 
      "creation_date": 1221701733, 
      "score": 1, 
      "owner": {
        "user_id": 17057, 
        "profile_image": "https://www.gravatar.com/avatar/be4a6389cc571751f2b25828a9749000?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 526, 
        "link": "http://stackoverflow.com/users/17057/wesley-tarle", 
        "display_name": "Wesley Tarle"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1221704196, 
      "answer_id": 89230
    }, 
    {
      "body": "<p>Do the duplicates necessarily need to be in the list in the first place?  There's no overhead as far as looking the elements up, but there is a little bit more overhead in adding elements (though the overhead should be O(1) ).</p>\n\n<pre><code>&gt;&gt;&gt; x  = []\n&gt;&gt;&gt; y = set()\n&gt;&gt;&gt; def add_to_x(val):\n...     if val not in y:\n...             x.append(val)\n...             y.add(val)\n...     print x\n...     print y\n... \n&gt;&gt;&gt; add_to_x(1)\n[1]\nset([1])\n&gt;&gt;&gt; add_to_x(1)\n[1]\nset([1])\n&gt;&gt;&gt; add_to_x(1)\n[1]\nset([1])\n&gt;&gt;&gt;\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221703600, 
      "creation_date": 1221703600, 
      "score": 2, 
      "owner": {
        "user_id": 2147, 
        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 60987, 
        "link": "http://stackoverflow.com/users/2147/jason-baker", 
        "accept_rate": 86, 
        "display_name": "Jason Baker"
      }, 
      "is_accepted": false, 
      "answer_id": 89373
    }, 
    {
      "body": "<p>One-liner:</p>\n\n<pre><code>new_list = reduce(lambda x,y: x+[y][:1-int(y in x)], my_list, [])\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221703145, 
      "creation_date": 1221703145, 
      "score": 4, 
      "owner": {
        "user_id": 3561, 
        "profile_image": "https://www.gravatar.com/avatar/f065a9004736028c47a25b6101b64b7b?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 17796, 
        "link": "http://stackoverflow.com/users/3561/tyler", 
        "accept_rate": 96, 
        "display_name": "Tyler"
      }, 
      "is_accepted": false, 
      "answer_id": 89331
    }, 
    {
      "body": "<pre><code>&gt;&gt;&gt; x=[1,1,2,'a','a',3]\n&gt;&gt;&gt; y = [ _x for _x in x if not _x in locals()['_[1]'] ]\n&gt;&gt;&gt; y\n[1, 2, 'a', 3]\n</code></pre>\n\n<p><br>\n\"locals()['_[1]']\" is the \"secret name\" of the list being created.</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221702880, 
      "creation_date": 1221702880, 
      "score": -1, 
      "owner": {
        "user_id": 14028, 
        "profile_image": "https://www.gravatar.com/avatar/66c0b0464838d75ad39c0baeaa01bf4c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5841, 
        "link": "http://stackoverflow.com/users/14028/kevin-little", 
        "accept_rate": 78, 
        "display_name": "Kevin Little"
      }, 
      "is_accepted": false, 
      "answer_id": 89308
    }, 
    {
      "body": "<pre><code>def unique(items):\n    found = set([])\n    keep = []\n\n    for item in items:\n        if item not in found:\n            found.add(item)\n            keep.append(item)\n\n    return keep\n\nprint unique([1, 1, 2, 'a', 'a', 3])\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221702078, 
      "creation_date": 1221702078, 
      "score": 28, 
      "owner": {
        "user_id": 8062, 
        "profile_image": "https://www.gravatar.com/avatar/354891a4cafe0f79f3754ba8998ba208?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 957, 
        "link": "http://stackoverflow.com/users/8062/terhorst", 
        "display_name": "Terhorst"
      }, 
      "is_accepted": false, 
      "answer_id": 89250
    }, 
    {
      "body": "<p>What's going to be fastest depends on what percentage of your list is duplicates. If it's nearly all duplicates, with few unique items, creating a new list will probably be faster. If it's mostly unique items, removing them from the original list (or a copy) will be faster.</p>\n\n<p>Here's one for modifying the list in place:</p>\n\n<pre><code>def unique(items):\n  seen = set()\n  for i in xrange(len(items)-1, -1, -1):\n    it = items[i]\n    if it in seen:\n      del items[i]\n    else:\n      seen.add(it)\n</code></pre>\n\n<p>Iterating backwards over the indices ensures that removing items doesn't affect the iteration.</p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221701624, 
      "creation_date": 1221701624, 
      "score": 13, 
      "owner": {
        "user_id": 6043, 
        "profile_image": "https://www.gravatar.com/avatar/7b19b7049d7a3b14bd0c5623ad08f124?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3618, 
        "link": "http://stackoverflow.com/users/6043/allen", 
        "display_name": "Allen"
      }, 
      "is_accepted": false, 
      "answer_id": 89218
    }, 
    {
      "body": "<pre><code>&gt;&gt;&gt; def unique(list):\n...   y = []\n...   for x in list:\n...     if x not in y:\n...       y.append(x)\n...   return y\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221701567, 
      "creation_date": 1221701567, 
      "score": 0, 
      "owner": {
        "user_id": 14640, 
        "profile_image": "https://www.gravatar.com/avatar/10cdc7471e7c72513212f0fe89cb6c67?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 386, 
        "link": "http://stackoverflow.com/users/14640/etchasketch", 
        "display_name": "etchasketch"
      }, 
      "is_accepted": false, 
      "answer_id": 89208
    }, 
    {
      "body": "<p>Taken from <a href=\"http://www.peterbe.com/plog/uniqifiers-benchmark\" rel=\"nofollow\">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>\n\n<pre><code>def f5(seq, idfun=None):  \n    # order preserving \n    if idfun is None: \n        def idfun(x): return x \n    seen = {} \n    result = [] \n    for item in seq: \n        marker = idfun(item) \n        # in old Python versions: \n        # if seen.has_key(marker) \n        # but in new ones: \n        if marker in seen: continue \n        seen[marker] = 1 \n        result.append(item) \n    return result\n</code></pre>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221701450, 
      "creation_date": 1221701450, 
      "score": 4, 
      "owner": {
        "user_id": 10322, 
        "profile_image": "https://www.gravatar.com/avatar/fa46a3814b72439b1d2efa8f7c9162c2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 16121, 
        "link": "http://stackoverflow.com/users/10322/ctcherry", 
        "display_name": "ctcherry"
      }, 
      "is_accepted": false, 
      "answer_id": 89202
    }, 
    {
      "body": "<p>I have no experience with python, but an algorithm would be to sort the list, then remove duplicates (by comparing to previous items in the list), and finally find the position in the new list by comparing with the old list.</p>\n\n<p>Longer answer: <a href=\"http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560\" rel=\"nofollow\">http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560</a></p>\n", 
      "question_id": 89178, 
      "last_activity_date": 1221701346, 
      "creation_date": 1221701346, 
      "score": 0, 
      "owner": {
        "user_id": 13852, 
        "profile_image": "https://www.gravatar.com/avatar/3d33ed13f68dddb499bd198d313183bf?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 530, 
        "link": "http://stackoverflow.com/users/13852/solinent", 
        "accept_rate": 85, 
        "display_name": "solinent"
      }, 
      "is_accepted": false, 
      "answer_id": 89197
    }
  ], 
  "312443": [
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Not exactly the same but still nice</p>\n\n<pre><code>def chunks(l, chunks):\n    return zip(*[iter(l)]*chunks)\n\nl = range(1, 1000)\nprint chunks(l, 10) -&gt; [ ( 1..10 ), ( 11..20 ), .., ( 991..999 ) ]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1421153937, 
      "creation_date": 1370545311, 
      "score": 1, 
      "owner": {
        "user_id": 200898, 
        "profile_image": "https://www.gravatar.com/avatar/da3b244fd1909532a905c83b89e286e2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4053, 
        "link": "http://stackoverflow.com/users/200898/moss", 
        "display_name": "Moss"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1421153937, 
      "answer_id": 16970117
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Directly from the (old) Python documentation (recipes for itertools):</p>\n\n<pre><code>from itertools import izip, chain, repeat\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip(*[chain(iterable, repeat(padvalue, n-1))]*n)\n</code></pre>\n\n<p>The current version, as suggested by J.F.Sebastian:</p>\n\n<pre><code>from itertools import izip_longest # for Python 2.x\n#from itertools import zip_longest # for Python 3.x\n#from six.moves import zip_longest # for both (uses the six compat library)\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip_longest(*[iter(iterable)]*n, fillvalue=padvalue)\n</code></pre>\n\n<p>I guess Guido's time machine works\u2014worked\u2014will work\u2014will have worked\u2014was working again.</p>\n\n<p>These solutions work because <code>[iter(iterable)]*n</code> (or the equivalent in the earlier version) creates <em>one</em> iterator, repeated <code>n</code> times in the list. <code>izip_longest</code> then effectively performs a round-robin of \"each\" iterator; because this is the same iterator, it is advanced by each such call, resulting in each such zip-roundrobin generating one tuple of <code>n</code> items.</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1418711423, 
      "creation_date": 1227455333, 
      "score": 161, 
      "owner": {
        "user_id": 6899, 
        "profile_image": "https://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 34885, 
        "link": "http://stackoverflow.com/users/6899/tzot", 
        "accept_rate": 90, 
        "display_name": "tzot"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1418711423, 
      "answer_id": 312644
    }, 
    {
      "community_owned_date": 1418097289, 
      "body": "<p>letting r be the chunk size  and L be the initial list, you can do. </p>\n\n<pre><code>chunkL = [ [i for i in L[r*k:r*(k+1)] ] for k in range(len(L)/r)] \n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1418097289, 
      "creation_date": 1418097289, 
      "score": 0, 
      "owner": {
        "user_id": 4278306, 
        "profile_image": "http://graph.facebook.com/1797820019/picture?type=large", 
        "user_type": "registered", 
        "reputation": 55, 
        "link": "http://stackoverflow.com/users/4278306/be-wake-pandey", 
        "display_name": "Be Wake Pandey"
      }, 
      "is_accepted": false, 
      "answer_id": 27371167
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>See <a href=\"http://docs.python.org/3.3/library/functions.html?highlight=zip#zip\" rel=\"nofollow\">this reference</a></p>\n\n<pre><code>&gt;&gt;&gt; orange = range(1, 1001)\n&gt;&gt;&gt; otuples = list( zip(*[iter(orange)]*10))\n&gt;&gt;&gt; print(otuples)\n[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), ... (991, 992, 993, 994, 995, 996, 997, 998, 999, 1000)]\n&gt;&gt;&gt; olist = [list(i) for i in otuples]\n&gt;&gt;&gt; print(olist)\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ..., [991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]]\n&gt;&gt;&gt; \n</code></pre>\n\n<p>Python3</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1415958522, 
      "creation_date": 1361194311, 
      "score": 2, 
      "owner": {
        "user_id": 506038, 
        "profile_image": "https://www.gravatar.com/avatar/d39e8309f56b8d6289ca642b15ddd13e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 479, 
        "link": "http://stackoverflow.com/users/506038/macm", 
        "display_name": "macm"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1415958522, 
      "answer_id": 14937534
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>using List Comprehensions of python</p>\n\n<pre><code>[range(t,t+10) for t in range(1,1000,10)]\n\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],....\n ....[981, 982, 983, 984, 985, 986, 987, 988, 989, 990],\n [991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]]\n</code></pre>\n\n<p>visit <a href=\"http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow\">this link</a> to know about List Comprehensions</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1415958448, 
      "creation_date": 1369581522, 
      "score": 0, 
      "owner": {
        "user_id": 2064658, 
        "profile_image": "https://www.gravatar.com/avatar/d2c61723090b7202a05273e627cd55f7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2064658/uday-kumar", 
        "display_name": "Uday Kumar"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1415958448, 
      "answer_id": 16760646
    }, 
    {
      "community_owned_date": 1409766195, 
      "body": "<p>Like @AaronHall I got here looking for roughly evenly sized chunks. There are different interpretations of that. In my case, if the desired size is N, I would like each group to be of size>=N.\nThus, the orphans which are created in most of the above should be redistributed to other groups.</p>\n\n<p>This can be done using:</p>\n\n<pre><code>def nChunks(l, n):\n    \"\"\" Yield n successive chunks from l.\n    Works for lists,  pandas dataframes, etc\n    \"\"\"\n    newn = int(1.0 * len(l) / n + 0.5)\n    for i in xrange(0, n-1):\n        yield l[i*newn:i*newn+newn]\n    yield l[n*newn-newn:]\n</code></pre>\n\n<p>(from <a href=\"http://stackoverflow.com/questions/2130016/splitting-a-list-of-arbitrary-size-into-only-roughly-n-equal-parts\">splitting a list of arbitrary size into only roughly N-equal parts</a>) by simply calling it as nChunks(l,l/n)  or nChunks(l,floor(l/n))</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1409766195, 
      "creation_date": 1409766195, 
      "score": 1, 
      "owner": {
        "user_id": 1159005, 
        "profile_image": "https://www.gravatar.com/avatar/bb448ac1128c4eeccc21d0ed4338c8d5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 406, 
        "link": "http://stackoverflow.com/users/1159005/cpbl", 
        "accept_rate": 56, 
        "display_name": "CPBL"
      }, 
      "is_accepted": false, 
      "answer_id": 25650543
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>If you want something super simple:</p>\n\n<pre><code>def chunks(l, n):\n    if n &lt; 1:\n        n = 1\n    return [l[i:i + n] for i in range(0, len(l), n)]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1402561094, 
      "creation_date": 1258489036, 
      "score": 318, 
      "owner": {
        "user_id": 213231, 
        "profile_image": "https://www.gravatar.com/avatar/0abbaad38ae50fdaa8281e3ed39eabae?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2684, 
        "link": "http://stackoverflow.com/users/213231/oremj", 
        "display_name": "oremj"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1402561094, 
      "answer_id": 1751478
    }, 
    {
      "community_owned_date": 1393821024, 
      "body": "<p>I wrote a small library expressly for this purpose, available <a href=\"https://github.com/rectangletangle/iterlib\" rel=\"nofollow\">here</a>. The library's <code>chunked</code> function is particularly efficient because it's implemented as a <a href=\"https://wiki.python.org/moin/Generators\" rel=\"nofollow\">generator</a>, so a substantial amount of memory can be saved in certain situations. It also doesn't rely on the slice notation, so any arbitrary iterator can be used.</p>\n\n<pre><code>import iterlib\n\nprint list(iterlib.chunked(xrange(1, 1000), 10))\n# prints [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), ...]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1393821024, 
      "creation_date": 1393821024, 
      "score": 1, 
      "owner": {
        "user_id": 433417, 
        "profile_image": "https://www.gravatar.com/avatar/20416c585ab7b81d4d4eb9a1765a0d07?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5380, 
        "link": "http://stackoverflow.com/users/433417/rectangletangle", 
        "accept_rate": 90, 
        "display_name": "rectangletangle"
      }, 
      "is_accepted": false, 
      "answer_id": 22138685
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<h2>Critique of other answers here:</h2>\n\n<p>None of these answers are evenly sized chunks, they all leave a runt chunk at the end, so they're not completely balanced. If you were using these functions to distribute work, you've built-in the prospect of one likely finishing well before the others, so it would sit around doing nothing while the others continued working hard.</p>\n\n<p>For example, the current top answer ends with:</p>\n\n<pre><code>[60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n[70, 71, 72, 73, 74]]\n</code></pre>\n\n<p>I just hate that runt at the end!</p>\n\n<p>Others, like <code>list(grouper(3, xrange(7)))</code>, and <code>chunk(xrange(7), 3)</code> both return: <code>[(0, 1, 2), (3, 4, 5), (6, None, None)]</code>. The <code>None</code>'s are just padding, and rather inelegant in my opinion. They are NOT evenly chunking the iterables.</p>\n\n<p>Why can't we divide these better?</p>\n\n<h2>My Solution(s)</h2>\n\n<p>Here's a balanced solution, adapted from a function I've used in production (Note in Python 3 to replace <code>xrange</code> with <code>range</code>):</p>\n\n<pre><code>def baskets_from(items, maxbaskets=25):\n    baskets = [[] for _ in xrange(maxbaskets)] # in Python 3 use range\n    for i, item in enumerate(items):\n        baskets[i % maxbaskets].append(item)\n    return filter(None, baskets) \n</code></pre>\n\n<p>And I created a generator that does the same if you put it into a list:</p>\n\n<pre><code>def iter_baskets_from(items, maxbaskets=3):\n    '''generates evenly balanced baskets from indexable iterable'''\n    item_count = len(items)\n    baskets = min(item_count, maxbaskets)\n    for x_i in xrange(baskets):\n        yield [items[y_i] for y_i in xrange(x_i, item_count, baskets)]\n</code></pre>\n\n<p>And finally, since I see that all of the above functions return elements in a contiguous order (as they were given):</p>\n\n<pre><code>def iter_baskets_contiguous(items, maxbaskets=3, item_count=None):\n    '''\n    generates balanced baskets from iterable, contiguous contents\n    provide item_count if providing a iterator that doesn't support len()\n    '''\n    item_count = item_count or len(items)\n    baskets = min(item_count, maxbaskets)\n    items = iter(items)\n    floor = item_count // baskets \n    ceiling = floor + 1\n    stepdown = item_count % baskets\n    for x_i in xrange(baskets):\n        length = ceiling if x_i &lt; stepdown else floor\n        yield [items.next() for _ in xrange(length)]\n</code></pre>\n\n<h2>Output</h2>\n\n<p>To test them out:</p>\n\n<pre><code>print(baskets_from(xrange(6), 8))\nprint(list(iter_baskets_from(xrange(6), 8)))\nprint(list(iter_baskets_contiguous(xrange(6), 8)))\nprint(baskets_from(xrange(22), 8))\nprint(list(iter_baskets_from(xrange(22), 8)))\nprint(list(iter_baskets_contiguous(xrange(22), 8)))\nprint(baskets_from('ABCDEFG', 3))\nprint(list(iter_baskets_from('ABCDEFG', 3)))\nprint(list(iter_baskets_contiguous('ABCDEFG', 3)))\nprint(baskets_from(xrange(26), 5))\nprint(list(iter_baskets_from(xrange(26), 5)))\nprint(list(iter_baskets_contiguous(xrange(26), 5)))\n</code></pre>\n\n<p>Which prints out:</p>\n\n<pre><code>[[0], [1], [2], [3], [4], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]\n[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19], [20, 21]]\n[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]\n[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]\n[['A', 'B', 'C'], ['D', 'E'], ['F', 'G']]\n[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]\n[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]\n[[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n</code></pre>\n\n<p>Notice that the contiguous generator provide chunks in the same length patterns as the other two, but the items are all in order, and they are as evenly divided as one may divide a list of discrete elements.</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1393431060, 
      "creation_date": 1392332837, 
      "score": 4, 
      "owner": {
        "user_id": 541136, 
        "profile_image": "https://www.gravatar.com/avatar/603b9362bc65bbc728c269f7f467e9e4?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 10997, 
        "link": "http://stackoverflow.com/users/541136/aaron-hall", 
        "accept_rate": 82, 
        "display_name": "Aaron Hall"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1393431060, 
      "answer_id": 21767522
    }, 
    {
      "community_owned_date": 1393426920, 
      "body": "<p>I'm surprised nobody has thought of using <code>iter</code>'s <a href=\"http://docs.python.org/2/library/functions.html#iter\">two-argument form</a>:</p>\n\n<pre><code>from itertools import islice\n\ndef chunk(it, size):\n    it = iter(it)\n    return iter(lambda: tuple(islice(it, size)), ())\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunk(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]\n</code></pre>\n\n<p>This works with any iterable and produces output lazily. It returns tuples rather than iterators, but I think it has a certain elegance nonetheless. It also doesn't pad; if you want padding, a simple variation on the above will suffice:</p>\n\n<pre><code>from itertools import islice, chain, repeat\n\ndef chunk_pad(it, size, padval=None):\n    it = chain(iter(it), repeat(padval))\n    return iter(lambda: tuple(islice(it, size)), (padval,) * size)\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunk_pad(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]\n&gt;&gt;&gt; list(chunk_pad(range(14), 3, 'a'))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]\n</code></pre>\n\n<p>Like the <code>izip_longest</code>-based solutions, the above <em>always</em> pads. As far as I know, there's no one- or two-line itertools recipe for a function that <em>optionally</em> pads. By combining the above two approaches, this one comes pretty close:</p>\n\n<pre><code>_no_padding = object()\n\ndef chunk(it, size, padval=_no_padding):\n    if padval == _no_padding:\n        it = iter(it)\n        sentinel = ()\n    else:\n        it = chain(iter(it), repeat(padval))\n        sentinel = (padval,) * size\n    return iter(lambda: tuple(islice(it, size)), sentinel)\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; list(chunk(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]\n&gt;&gt;&gt; list(chunk(range(14), 3, None))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]\n&gt;&gt;&gt; list(chunk(range(14), 3, 'a'))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]\n</code></pre>\n\n<p>I believe this is the shortest chunker proposed that offers optional padding. </p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1393427417, 
      "creation_date": 1393426920, 
      "score": 6, 
      "owner": {
        "user_id": 577088, 
        "profile_image": "https://www.gravatar.com/avatar/40e5d405e2c0e480e792dd171fd2467d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 45443, 
        "link": "http://stackoverflow.com/users/577088/senderle", 
        "display_name": "senderle"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1393427417, 
      "answer_id": 22045226
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Without calling len() which is good for large lists:</p>\n\n<pre><code>def splitter(l, n):\n    i = 0\n    chunk = l[:n]\n    while chunk:\n        yield chunk\n        i += n\n        chunk = l[i:i+n]\n</code></pre>\n\n<p>And this is for iterables:</p>\n\n<pre><code>def isplitter(l, n):\n    l = iter(l)\n    chunk = list(islice(l, n))\n    while chunk:\n        yield chunk\n        chunk = list(islice(l, n))\n</code></pre>\n\n<p>The functional flavour of the above:</p>\n\n<pre><code>def isplitter2(l, n):\n    return takewhile(bool,\n                     (tuple(islice(start, n))\n                            for start in repeat(iter(l))))\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1393238433, 
      "creation_date": 1266299387, 
      "score": 1, 
      "owner": {
        "user_id": 274094, 
        "profile_image": "https://www.gravatar.com/avatar/273e129b8008e7da6711909ef003895e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 9, 
        "link": "http://stackoverflow.com/users/274094/mars", 
        "display_name": "Mars"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1393238433, 
      "answer_id": 2270932
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Yes, it is an old question, but I had to post this one, because it is even a little shorter than the similar ones.\nYes, the result looks scrambled, but if it is just about even length...</p>\n\n<pre><code>&gt;&gt;&gt; n = 3 # number of groups\n&gt;&gt;&gt; biglist = range(30)\n&gt;&gt;&gt;\n&gt;&gt;&gt; [ biglist[i::n] for i in xrange(n) ]\n[[0, 3, 6, 9, 12, 15, 18, 21, 24, 27],\n [1, 4, 7, 10, 13, 16, 19, 22, 25, 28],\n [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1385503083, 
      "creation_date": 1385503083, 
      "score": -1, 
      "owner": {
        "user_id": 2964777, 
        "profile_image": "https://www.gravatar.com/avatar/57d4b12be63bb040043f526170517daa?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 532, 
        "link": "http://stackoverflow.com/users/2964777/koffein", 
        "display_name": "koffein"
      }, 
      "is_accepted": false, 
      "answer_id": 20228836
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>this will work, its sort of a reverse zip():</p>\n\n<pre><code>list1 = []\nlist2 = []\nmark = True\nfor item in list:\n    if mark = True:\n        list1.append(item)\n    else:\n        list2.append(item)\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1385090021, 
      "creation_date": 1385090021, 
      "score": -4, 
      "owner": {
        "user_id": 3002116, 
        "profile_image": "http://i.stack.imgur.com/eI6Pr.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1057, 
        "link": "http://stackoverflow.com/users/3002116/someone-or-other", 
        "accept_rate": 100, 
        "display_name": "someone-or-other"
      }, 
      "is_accepted": false, 
      "answer_id": 20136351
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>The <a href=\"https://github.com/pytoolz/toolz\" rel=\"nofollow\">toolz</a> library has the <code>partition</code> function for this:</p>\n\n<pre><code>from toolz.itertoolz.core import partition\n\nlist(partition(2, [1, 2, 3, 4]))\n[(1, 2), (3, 4)]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1384980922, 
      "creation_date": 1384980922, 
      "score": 2, 
      "owner": {
        "user_id": 983191, 
        "profile_image": "https://www.gravatar.com/avatar/e560fcc186a4719ccd501fec19cec6dc?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1878, 
        "link": "http://stackoverflow.com/users/983191/zach", 
        "accept_rate": 100, 
        "display_name": "zach"
      }, 
      "is_accepted": false, 
      "answer_id": 20106816
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>I like the Python doc's version proposed by tzot and J.F.Sebastian a lot,\n but it has two shortcomings:</p>\n\n<ul>\n<li>it is not very explicit</li>\n<li>I usually don't want a fill value in the last chunk</li>\n</ul>\n\n<p>I'm using this one a lot in my code:</p>\n\n<pre><code>from itertools import islice\n\ndef chunks(n, iterable):\n    iterable = iter(iterable)\n    while True:\n        yield tuple(islice(iterable, n)) or iterable.next()\n</code></pre>\n\n<p>UPDATE: A lazy chunks version:</p>\n\n<pre><code>from itertools import chain, islice\n\ndef chunks(n, iterable):\n   iterable = iter(iterable)\n   while True:\n       yield chain([next(iterable)], islice(iterable, n-1))\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1383985283, 
      "creation_date": 1381299449, 
      "score": 7, 
      "owner": {
        "user_id": 1464540, 
        "profile_image": "https://www.gravatar.com/avatar/16209565e8f4fc9be80e60d7d4fa20f9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 51, 
        "link": "http://stackoverflow.com/users/1464540/nikipore", 
        "display_name": "nikipore"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1383985283, 
      "answer_id": 19264525
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>I know this is kind of old but I don't why nobody mentioned <code>numpy.array_split</code>:</p>\n\n<pre><code>lst = range(50)\nIn [26]: np.array_split(b,5)\nOut[26]: \n[array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),\n array([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]),\n array([30, 31, 32, 33, 34, 35, 36, 37, 38, 39]),\n array([40, 41, 42, 43, 44, 45, 46, 47, 48, 49])]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1381484362, 
      "creation_date": 1370422466, 
      "score": 16, 
      "owner": {
        "user_id": 1420757, 
        "profile_image": "https://www.gravatar.com/avatar/82efe7371edc2e634e979c13cb3e757d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 898, 
        "link": "http://stackoverflow.com/users/1420757/moj", 
        "accept_rate": 81, 
        "display_name": "Moj"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1381484362, 
      "answer_id": 16935535
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<pre><code>def chunked(iterable, size):\n    chunk = ()\n\n    for item in iterable:\n        chunk += (item,)\n        if len(chunk) % size == 0:\n            yield chunk\n            chunk = ()\n\n    if chunk:\n        yield chunk\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1379980663, 
      "creation_date": 1379980663, 
      "score": 0, 
      "owner": {
        "user_id": 433417, 
        "profile_image": "https://www.gravatar.com/avatar/20416c585ab7b81d4d4eb9a1765a0d07?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5380, 
        "link": "http://stackoverflow.com/users/433417/rectangletangle", 
        "accept_rate": 90, 
        "display_name": "rectangletangle"
      }, 
      "is_accepted": false, 
      "answer_id": 18970810
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<ul>\n<li>Works with any iterable</li>\n<li>Inner data is generator object (not a list)</li>\n<li>One liner</li>\n</ul>\n\n<pre>\nIn [259]: get_in_chunks = lambda itr,n: ( (v for _,v in g) for _,g in itertools.groupby(enumerate(itr),lambda (ind,_): ind/n))\n\nIn [260]: list(list(x) for x in get_in_chunks(range(30),7))\nOut[260]:\n[[0, 1, 2, 3, 4, 5, 6],\n [7, 8, 9, 10, 11, 12, 13],\n [14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27],\n [28, 29]]\n</pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1379099828, 
      "creation_date": 1379099504, 
      "score": 3, 
      "owner": {
        "user_id": 463758, 
        "profile_image": "https://www.gravatar.com/avatar/78e87615823ef2ad514ccd618fd22f21?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5110, 
        "link": "http://stackoverflow.com/users/463758/balki", 
        "accept_rate": 83, 
        "display_name": "balki"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1379099828, 
      "answer_id": 18793562
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p><a href=\"http://pythonhosted.org/more-itertools/api.html#more_itertools.chunked\">more-itertools has a chunks iterator.</a></p>\n\n<p>It also has a lot more things, including all the recipes in the itertools documentation.</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1367397741, 
      "creation_date": 1367397741, 
      "score": 10, 
      "owner": {
        "user_id": 1011311, 
        "profile_image": "https://www.gravatar.com/avatar/b4cbd1f53efe6c4357e473262f365537?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1199, 
        "link": "http://stackoverflow.com/users/1011311/f%c3%a1bio-santos", 
        "accept_rate": 75, 
        "display_name": "F&#225;bio Santos"
      }, 
      "is_accepted": false, 
      "answer_id": 16315158
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>A generator expression:</p>\n\n<pre><code>def chunks(seq, n):\n    return (seq[i:i+n] for i in xrange(0, len(seq), n))\n</code></pre>\n\n<p>eg.</p>\n\n<pre><code>print list(chunks(range(1, 1000), 10))\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1365974766, 
      "creation_date": 1365974766, 
      "score": 8, 
      "owner": {
        "user_id": 1219006, 
        "profile_image": "http://i.stack.imgur.com/M1ZlR.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 41980, 
        "link": "http://stackoverflow.com/users/1219006/jamylak", 
        "accept_rate": 80, 
        "display_name": "jamylak"
      }, 
      "is_accepted": false, 
      "answer_id": 16004505
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Here's a generator that yields the chunks you want:</p>\n\n<pre><code>def chunks(l, n):\n    \"\"\" Yield successive n-sized chunks from l.\n    \"\"\"\n    for i in xrange(0, len(l), n):\n        yield l[i:i+n]\n</code></pre>\n\n<hr>\n\n<pre><code>import pprint\npprint.pprint(list(chunks(range(10, 75), 10)))\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1365974736, 
      "creation_date": 1227443633, 
      "score": 611, 
      "owner": {
        "user_id": 14343, 
        "profile_image": "https://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 139730, 
        "link": "http://stackoverflow.com/users/14343/ned-batchelder", 
        "accept_rate": 86, 
        "display_name": "Ned Batchelder"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1365974736, 
      "answer_id": 312464
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>No one use tee() function under itertools ?</p>\n\n<p><a href=\"http://docs.python.org/2/library/itertools.html#itertools.tee\" rel=\"nofollow\">http://docs.python.org/2/library/itertools.html#itertools.tee</a></p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; itertools.tee([1,2,3,4,5,6],3)\n(&lt;itertools.tee object at 0x02932DF0&gt;, &lt;itertools.tee object at 0x02932EB8&gt;, &lt;itertools.tee object at 0x02932EE0&gt;)\n</code></pre>\n\n<p>This will split list to 3 iterator , loop the iterator will get the sublist with equal length</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1354850211, 
      "creation_date": 1354850211, 
      "score": -1, 
      "owner": {
        "user_id": 943713, 
        "profile_image": "https://www.gravatar.com/avatar/7386886485d6b91dab39609563f1689f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 614, 
        "link": "http://stackoverflow.com/users/943713/shawn-zhang", 
        "accept_rate": 83, 
        "display_name": "Shawn Zhang"
      }, 
      "is_accepted": false, 
      "answer_id": 13756402
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>If you know list size:</p>\n\n<pre><code>def SplitList(list, chunk_size):\n    return [list[offs:offs+chunk_size] for offs in range(0, len(list), chunk_size)]\n</code></pre>\n\n<p>If you don't (an iterator):</p>\n\n<pre><code>def IterChunks(sequence, chunk_size):\n    res = []\n    for item in sequence:\n        res.append(item)\n        if len(res) &gt;= chunk_size:\n            yield res\n            res = []\n    if res:\n        yield res  # yield the last, incomplete, portion\n</code></pre>\n\n<p>In the latter case, it can be rephrased in a more beautiful way if you can be sure that the sequence always contains a whole number of chunks of given size (i.e. there is no incomplete last chunk).</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1347916985, 
      "creation_date": 1227444039, 
      "score": 4, 
      "owner": {
        "user_id": 23252, 
        "profile_image": "https://www.gravatar.com/avatar/92406a1d4e99aabd6c41951d027172cd?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 7614, 
        "link": "http://stackoverflow.com/users/23252/atzz", 
        "display_name": "atzz"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1347916985, 
      "answer_id": 312466
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<pre><code>def chunk(input, size):\n    return map(None, *([iter(input)] * size))\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1347916945, 
      "creation_date": 1277579407, 
      "score": 31, 
      "owner": {
        "user_id": 377095, 
        "profile_image": "https://www.gravatar.com/avatar/cc30327ca43cfe13689fcc74e4dd6098?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4604, 
        "link": "http://stackoverflow.com/users/377095/tomasz-wysocki", 
        "accept_rate": 92, 
        "display_name": "Tomasz Wysocki"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1347916945, 
      "answer_id": 3125186
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Here is a generator that work on arbitrary iterables:</p>\n\n<pre><code>def split_seq(iterable, size):\n    it = iter(iterable)\n    item = list(itertools.islice(it, size))\n    while item:\n        yield item\n        item = list(itertools.islice(it, size))\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint(list(split_seq(xrange(75), 10)))\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1347916923, 
      "creation_date": 1227444097, 
      "score": 37, 
      "owner": {
        "user_id": 22364, 
        "profile_image": "https://www.gravatar.com/avatar/e4b5d57c78e74d4f5ee9773e2926c01d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 37485, 
        "link": "http://stackoverflow.com/users/22364/markus-jarderot", 
        "accept_rate": 100, 
        "display_name": "Markus Jarderot"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1347916923, 
      "answer_id": 312467
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>I realise this question is old (stumbled over it on Google), but surely something like the following is far simpler and clearer than any of the huge complex suggestions and only uses slicing:</p>\n\n<pre><code>def chunker(iterable, chunksize):\n    for i,c in enumerate(iterable[::chunksize]):\n        yield iterable[i*chunksize:(i+1)*chunksize]\n\n&gt;&gt;&gt; for chunk in chunker(range(0,100), 10):\n...     print list(chunk)\n... \n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n... etc ...\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1346108285, 
      "creation_date": 1346108285, 
      "score": 3, 
      "owner": {
        "user_id": 1628890, 
        "profile_image": "https://www.gravatar.com/avatar/05211b9d04d0243899048a752c03b4f4?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/1628890/meeb", 
        "display_name": "meeb"
      }, 
      "is_accepted": false, 
      "answer_id": 12150728
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<pre><code>def chunk(lst):\n    out = []\n    for x in xrange(2, len(lst) + 1):\n        if not len(lst) % x:\n            factor = len(lst) / x\n            break\n    while lst:\n        out.append([lst.pop(0) for x in xrange(factor)])\n    return out\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1340464772, 
      "creation_date": 1227684289, 
      "score": 2, 
      "owner": {
        "user_id": 39851, 
        "profile_image": "https://www.gravatar.com/avatar/c3e5c8545c47a2f6e706df36dd1e4c6f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 483, 
        "link": "http://stackoverflow.com/users/39851/j-t-hurley", 
        "display_name": "J.T. Hurley"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1340464772, 
      "answer_id": 319970
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Consider using <a href=\"http://matplotlib.sourceforge.net/\">matplotlib.cbook</a> pieces</p>\n\n<p>for example:</p>\n\n<pre><code>import matplotlib.cbook as cbook\nsegments = cbook.pieces(np.arange(20), 3)\nfor s in segments:\n     print s\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1331231235, 
      "creation_date": 1304440057, 
      "score": 6, 
      "owner": {
        "user_id": 736526, 
        "profile_image": "https://www.gravatar.com/avatar/8cd133c181825339e7932995853318b7?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 59, 
        "link": "http://stackoverflow.com/users/736526/schwater", 
        "display_name": "schwater"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1331231235, 
      "answer_id": 5872632
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<pre><code>def chunks(iterable,n):\n    \"\"\"assumes n is an integer&gt;0\n    \"\"\"\n    iterable=iter(iterable)\n    while True:\n        result=[]\n        for i in range(n):\n            try:\n                a=next(iterable)\n            except StopIteration:\n                break\n            else:\n                result.append(a)\n        if result:\n            yield result\n        else:\n            break\n\ng1=(i*i for i in range(10))\ng2=chunks(g1,3)\nprint g2\n'&lt;generator object chunks at 0x0337B9B8&gt;'\nprint list(g2)\n'[[0, 1, 4], [9, 16, 25], [36, 49, 64], [81]]'\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1329108638, 
      "creation_date": 1329108638, 
      "score": 2, 
      "owner": {
        "user_id": 632088, 
        "profile_image": "https://www.gravatar.com/avatar/4b02313659bcb668d49a0075c2de0bc1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5574, 
        "link": "http://stackoverflow.com/users/632088/robert-king", 
        "accept_rate": 93, 
        "display_name": "robert king"
      }, 
      "is_accepted": false, 
      "answer_id": 9255750
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>If you had a chunk size of 3 for example, you could do:</p>\n\n<pre><code>zip(*[iterable[i::3] for i in range(3)]) \n</code></pre>\n\n<p>source:\n<a href=\"http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/\">http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/</a></p>\n\n<p>I would use this when my chunk size is fixed number I can type, e.g. '3', and would never change.</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1303190839, 
      "creation_date": 1303190839, 
      "score": 8, 
      "owner": {
        "user_id": 711085, 
        "profile_image": "https://www.gravatar.com/avatar/fabf3436107ffee76255957a7732d0f1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 28230, 
        "link": "http://stackoverflow.com/users/711085/ninjagecko", 
        "display_name": "ninjagecko"
      }, 
      "is_accepted": false, 
      "answer_id": 5711993
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>Simple yet elegant</p>\n\n<pre><code>l = range(1, 1000)\nprint [l[x:x+10] for x in xrange(1, len(l), 10)]\n</code></pre>\n\n<p>or if you prefer:</p>\n\n<pre><code>chunks = lambda l, n: [l[x: x+n] for x in xrange(0, len(l), n)]\nchunks(l, 10)\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1278921523, 
      "creation_date": 1278921523, 
      "score": 11, 
      "owner": {
        "user_id": 389280, 
        "profile_image": "https://www.gravatar.com/avatar/39dbd1122adb7f31f91c747086ccadae?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 101, 
        "link": "http://stackoverflow.com/users/389280/lebenf", 
        "display_name": "lebenf"
      }, 
      "is_accepted": false, 
      "answer_id": 3226719
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<pre><code>&gt;&gt;&gt; f = lambda x, n, acc=[]: f(x[n:], n, acc+[(x[:n])]) if x else acc\n&gt;&gt;&gt; f(\"Hallo Welt\", 3)\n['Hal', 'lo ', 'Wel', 't']\n&gt;&gt;&gt;\n</code></pre>\n\n<p>If you are into brackets - I picked up a book on Erlang :)</p>\n", 
      "question_id": 312443, 
      "last_activity_date": 1257268208, 
      "creation_date": 1257266731, 
      "score": 4, 
      "owner": {
        "user_id": 149268, 
        "profile_image": "https://www.gravatar.com/avatar/abef26583e8bf39b506ff3986c88850e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 452, 
        "link": "http://stackoverflow.com/users/149268/hcvst", 
        "accept_rate": 86, 
        "display_name": "hcvst"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1257268208, 
      "answer_id": 1668586
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<pre><code>def split_seq(seq, num_pieces):\n    start = 0\n    for i in xrange(num_pieces):\n        stop = start + len(seq[i::num_pieces])\n        yield seq[start:stop]\n        start = stop\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor seq in split_seq(seq, 3):\n    print seq\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1227545817, 
      "creation_date": 1227545817, 
      "score": 4, 
      "owner": {
        "user_id": 16148, 
        "profile_image": "https://www.gravatar.com/avatar/0a7bb11b0b414ca9b12250fd73150c94?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 17543, 
        "link": "http://stackoverflow.com/users/16148/corey-goldberg", 
        "accept_rate": 73, 
        "display_name": "Corey Goldberg"
      }, 
      "is_accepted": false, 
      "answer_id": 314771
    }, 
    {
      "community_owned_date": 1392332837, 
      "body": "<p>heh, one line version</p>\n\n<pre><code>In [48]: chunk = lambda ulist, step:  map(lambda i: ulist[i:i+step],  xrange(0, len(ulist), step))\n\nIn [49]: chunk(range(1,100), 10)\nOut[49]: \n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],\n [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],\n [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],\n [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],\n [91, 92, 93, 94, 95, 96, 97, 98, 99]]\n</code></pre>\n", 
      "question_id": 312443, 
      "last_activity_date": 1227444676, 
      "creation_date": 1227444676, 
      "score": 3, 
      "owner": {
        "user_id": 2201031, 
        "profile_image": "https://www.gravatar.com/avatar/e456dfa49e98100f1b73175047edaed1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1139, 
        "link": "http://stackoverflow.com/users/2201031/slav0nic", 
        "display_name": "slav0nic"
      }, 
      "is_accepted": false, 
      "answer_id": 312472
    }
  ], 
  "1305532": [
    {
      "body": "<p>This little class never gives me any problem, just extend it and use the copy() method:</p>\n\n<pre><code>  import simplejson as json\n\n  class BlindCopy(object):\n\n    def copy(self, json_str):\n        dic = json.loads(json_str)\n        for k, v in dic.iteritems():\n            if hasattr(self, k):\n                setattr(self, k, v);\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1415375486, 
      "creation_date": 1415375486, 
      "score": 0, 
      "owner": {
        "user_id": 774307, 
        "profile_image": "http://i.stack.imgur.com/6JBVN.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 101, 
        "link": "http://stackoverflow.com/users/774307/thiago-marini", 
        "display_name": "thiago marini"
      }, 
      "is_accepted": false, 
      "answer_id": 26805003
    }, 
    {
      "body": "<p>Surprisingly no one has mentioned <a href=\"https://github.com/dsc/bunch\">Bunch</a>. This library is exclusively meant to provide attribute style access to dict objects and does exactly what the OP wants. A demonstration:</p>\n\n<pre><code>&gt;&gt;&gt; from bunch import bunchify\n&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n&gt;&gt;&gt; x = bunchify(d)\n&gt;&gt;&gt; x.a\n1\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1405873831, 
      "creation_date": 1405873831, 
      "score": 10, 
      "owner": {
        "user_id": 1025068, 
        "profile_image": "https://www.gravatar.com/avatar/8f3a8de34c274e81ce3f81a4e9d93f98?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4983, 
        "link": "http://stackoverflow.com/users/1025068/kontinuity", 
        "display_name": "kontinuity"
      }, 
      "is_accepted": false, 
      "answer_id": 24852544
    }, 
    {
      "body": "<p>Building off my answer to \"<a href=\"http://stackoverflow.com/questions/1325673/python-how-to-add-property-to-a-class-dynamically/1333275#1333275\" title=\"python-how-to-add-property-to-a-class-dynamically\">python: How to add property to a class dynamically?</a>\":</p>\n\n<pre><code>class data(object):\n    def __init__(self,*args,**argd):\n        self.__dict__.update(dict(*args,**argd))\n\ndef makedata(d):\n    d2 = {}\n    for n in d:\n        d2[n] = trydata(d[n])\n    return data(d2)\n\ndef trydata(o):\n    if isinstance(o,dict):\n        return makedata(o)\n    elif isinstance(o,list):\n        return [trydata(i) for i in o]\n    else:\n        return o\n</code></pre>\n\n<p>You call <code>makedata</code> on the dictionary you want converted, or maybe <code>trydata</code> depending on what you expect as input, and it spits out a data object.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>You can add elifs to <code>trydata</code> if you need more functionality.</li>\n<li>Obviously this won't work if you want <code>x.a = {}</code> or similar.</li>\n<li>If you want a readonly version, use the class data from <a href=\"http://stackoverflow.com/questions/1325673/python-how-to-add-property-to-a-class-dynamically/1333275#1333275\" title=\"python-how-to-add-property-to-a-class-dynamically\">the original answer</a>.</li>\n</ul>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1387541713, 
      "creation_date": 1251294487, 
      "score": 1, 
      "owner": {
        "user_id": 163349, 
        "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1554, 
        "link": "http://stackoverflow.com/users/163349/david-x", 
        "accept_rate": 89, 
        "display_name": "David X"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387541713, 
      "answer_id": 1334816
    }, 
    {
      "body": "<p>If you want to access dict keys as an object (or as a dict for difficult keys), do it recursively, and also be able to update the original dict, you could do:</p>\n\n<pre><code>class Dictate(object):\n    \"\"\"Object view of a dict, updating the passed in dict when values are set\n    or deleted. \"Dictate\" the contents of a dict...: \"\"\"\n\n    def __init__(self, d):\n        # since __setattr__ is overridden, self.__dict = d doesn't work\n        object.__setattr__(self, '_Dictate__dict', d)\n\n    # Dictionary-like access / updates\n    def __getitem__(self, name):\n        value = self.__dict[name]\n        if isinstance(value, dict):  # recursively view sub-dicts as objects\n            value = Dictate(value)\n        return value\n\n    def __setitem__(self, name, value):\n        self.__dict[name] = value\n    def __delitem__(self, name):\n        del self.__dict[name]\n\n    # Object-like access / updates\n    def __getattr__(self, name):\n        return self[name]\n\n    def __setattr__(self, name, value):\n        self[name] = value\n    def __delattr__(self, name):\n        del self[name]\n\n    def __repr__(self):\n        return \"%s(%r)\" % (type(self).__name__, self.__dict)\n    def __str__(self):\n        return str(self.__dict)\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>d = {'a': 'b', 1: 2}\ndd = Dictate(d)\nassert dd.a == 'b'  # Access like an object\nassert dd[1] == 2  # Access like a dict\n# Updates affect d\ndd.c = 'd'\nassert d['c'] == 'd'\ndel dd.a\ndel dd[1]\n# Inner dicts are mapped\ndd.e = {}\ndd.e.f = 'g'\nassert dd['e'].f == 'g'\nassert d == {'c': 'd', 'e': {'f': 'g'}}\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1387541331, 
      "creation_date": 1364056908, 
      "score": 5, 
      "owner": {
        "user_id": 1783597, 
        "profile_image": "https://www.gravatar.com/avatar/3cf938107ba83ab838789250e8e62751?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 51, 
        "link": "http://stackoverflow.com/users/1783597/user1783597", 
        "display_name": "user1783597"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387541331, 
      "answer_id": 15589291
    }, 
    {
      "body": "<p>I think a dict consists of number, string and dict is enough most time.\nSo I ignore the situation that tuples, lists and other types not appearing in the final dimension of a dict. </p>\n\n<p>Considering inheritance, combined with recursion, it solves the print problem conveniently and also provides two ways to query a data,one way to edit a data.</p>\n\n<p>See the example below, a dict that describes some information about students:</p>\n\n<pre><code>group=[\"class1\",\"class2\",\"class3\",\"class4\",]\nrank=[\"rank1\",\"rank2\",\"rank3\",\"rank4\",\"rank5\",]\ndata=[\"name\",\"sex\",\"height\",\"weight\",\"score\"]\n\n#build a dict based on the lists above\nstudent_dic=dict([(g,dict([(r,dict([(d,'') for d in data])) for r in rank ]))for g in group])\n\n#this is the solution\nclass dic2class(dict):\n    def __init__(self, dic):\n        for key,val in dic.items():\n            self.__dict__[key]=self[key]=dic2class(val) if isinstance(val,dict) else val\n\n\nstudent_class=dic2class(student_dic)\n\n#one way to edit:\nstudent_class.class1.rank1['sex']='male'\nstudent_class.class1.rank1['name']='Nan Xiang'\n\n#two ways to query:\nprint student_class.class1.rank1\nprint student_class.class1['rank1']\nprint '-'*50\nfor rank in student_class.class1:\n    print getattr(student_class.class1,rank)\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>{'score': '', 'sex': 'male', 'name': 'Nan Xiang', 'weight': '', 'height': ''}\n{'score': '', 'sex': 'male', 'name': 'Nan Xiang', 'weight': '', 'height': ''}\n--------------------------------------------------\n{'score': '', 'sex': '', 'name': '', 'weight': '', 'height': ''}\n{'score': '', 'sex': '', 'name': '', 'weight': '', 'height': ''}\n{'score': '', 'sex': 'male', 'name': 'Nan Xiang', 'weight': '', 'height': ''}\n{'score': '', 'sex': '', 'name': '', 'weight': '', 'height': ''}\n{'score': '', 'sex': '', 'name': '', 'weight': '', 'height': ''}\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1387541278, 
      "creation_date": 1381128442, 
      "score": 2, 
      "owner": {
        "user_id": 2803340, 
        "profile_image": "http://i.stack.imgur.com/b6FxJ.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 528, 
        "link": "http://stackoverflow.com/users/2803340/pythoner", 
        "accept_rate": 76, 
        "display_name": "Pythoner"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387541278, 
      "answer_id": 19218587
    }, 
    {
      "body": "<p>This is another, alternative, way to convert a list of dictionaries to an object:</p>\n\n<pre><code>def dict2object(in_dict):\n    class Struct(object):\n        def __init__(self, in_dict):\n            for key, value in in_dict.items():\n                if isinstance(value, (list, tuple)):\n                    setattr(\n                        self, key,\n                        [Struct(sub_dict) if isinstance(sub_dict, dict)\n                         else sub_dict for sub_dict in value])\n                else:\n                    setattr(\n                        self, key,\n                        Struct(value) if isinstance(value, dict)\n                        else value)\n    return [Struct(sub_dict) for sub_dict in in_dict] \\\n        if isinstance(in_dict, list) else Struct(in_dict)\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1387540962, 
      "creation_date": 1382425607, 
      "score": 0, 
      "owner": {
        "user_id": 2853408, 
        "profile_image": "https://www.gravatar.com/avatar/dc51ae082a066e27990d6e519909d7eb?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 1, 
        "link": "http://stackoverflow.com/users/2853408/%c4%b0brahim-g%c3%bcnd%c3%bcz", 
        "display_name": "\u0130brahim G&#252;nd&#252;z"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387540962, 
      "answer_id": 19511263
    }, 
    {
      "body": "<p><strong>Update:</strong> In Python 2.6 and onwards, consider whether the <code>namedtuple</code> data structure suits your needs:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; MyStruct = namedtuple('MyStruct', 'a b d')\n&gt;&gt;&gt; s = MyStruct(a=1, b={'c': 2}, d=['hi'])\n&gt;&gt;&gt; s\nMyStruct(a=1, b={'c': 2}, d=['hi'])\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n{'c': 2}\n&gt;&gt;&gt; s.c\n&gt;&gt;&gt; s.d\n['hi']\n</code></pre>\n\n<p>The alternative (original answer contents) is:</p>\n\n<pre><code>class Struct:\n    def __init__(self, **entries): \n        self.__dict__.update(entries)\n</code></pre>\n\n<p>Then, you can use:</p>\n\n<pre><code>&gt;&gt;&gt; args = {'a': 1, 'b': 2}\n&gt;&gt;&gt; s = Struct(**args)\n&gt;&gt;&gt; s\n&lt;__main__.Struct instance at 0x01D6A738&gt;\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n2\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1387540897, 
      "creation_date": 1250769339, 
      "score": 375, 
      "owner": {
        "user_id": 8206, 
        "profile_image": "https://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 90088, 
        "link": "http://stackoverflow.com/users/8206/eli-bendersky", 
        "accept_rate": 94, 
        "display_name": "Eli Bendersky"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1387540897, 
      "answer_id": 1305663
    }, 
    {
      "body": "<pre><code>from mock import Mock\nd = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\nmy_data = Mock(**d)\n\n# We got\n# my_data.a == 1\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1377087322, 
      "creation_date": 1377087322, 
      "score": 0, 
      "owner": {
        "user_id": 1788882, 
        "profile_image": "https://www.gravatar.com/avatar/d2f14b0e6c255f6ffcc3215e999c4d84?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 46, 
        "link": "http://stackoverflow.com/users/1788882/forward", 
        "display_name": "forward"
      }, 
      "is_accepted": false, 
      "answer_id": 18357162
    }, 
    {
      "body": "<p>How about this:</p>\n\n<pre><code>from functools import partial\nd2o=partial(type, \"d2o\", ())\n</code></pre>\n\n<p>This can then be used like this:</p>\n\n<pre><code>&gt;&gt;&gt; o=d2o({\"a\" : 5, \"b\" : 3})\n&gt;&gt;&gt; print o.a\n5\n&gt;&gt;&gt; print o.b\n3\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1367657919, 
      "creation_date": 1367657919, 
      "score": 1, 
      "owner": {
        "user_id": 1492468, 
        "profile_image": "https://www.gravatar.com/avatar/8cc7f78de5d3187119aeae58ba275c71?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 11, 
        "link": "http://stackoverflow.com/users/1492468/onno", 
        "display_name": "onno"
      }, 
      "is_accepted": false, 
      "answer_id": 16372505
    }, 
    {
      "body": "<p>For anyone who happens to stumble upon this question nowadays. In Python 2.6+ there's a \ncollection helper called <a href=\"http://docs.python.org/library/collections.html?highlight=collections#namedtuple-factory-function-for-tuples-with-named-fields\"><code>namedtuple</code></a>, that can do this for you: </p>\n\n<pre><code>from collections import namedtuple\n\nd_named = namedtuple('Struct', d.keys())(*d.values())\n\nIn [7]: d_named\nOut[7]: Struct(a=1, b={'c': 2}, d=['hi', {'foo': 'bar'}])\n\nIn [8]: d_named.a\nOut[8]: 1\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1367246654, 
      "creation_date": 1330000996, 
      "score": 24, 
      "owner": {
        "user_id": 194040, 
        "profile_image": "https://www.gravatar.com/avatar/76a944e55ba3103579f9a3e85f775389?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 466, 
        "link": "http://stackoverflow.com/users/194040/umbrae", 
        "display_name": "umbrae"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1367246654, 
      "answer_id": 9413295
    }, 
    {
      "body": "<p>If your dict is coming from <code>json.loads()</code>, you can turn it into an object instead (rather than a dict) in one line:</p>\n\n<pre><code>import json\nfrom collections import namedtuple\n\njson.loads(data, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\n</code></pre>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object/15882054#15882054\">How to convert JSON data into a Python object</a>.</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1365432826, 
      "creation_date": 1365432826, 
      "score": 7, 
      "owner": {
        "user_id": 328565, 
        "profile_image": "https://www.gravatar.com/avatar/1da915c61230d9a2935b08df3e4e6fc6?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4052, 
        "link": "http://stackoverflow.com/users/328565/ds", 
        "display_name": "DS."
      }, 
      "is_accepted": false, 
      "answer_id": 15882327
    }, 
    {
      "body": "<pre><code>class Struct(dict):\n    def __getattr__(self, name):\n        try:\n            return self[name]\n        except KeyError:\n            raise AttributeError(name)\n\n    def __setattr__(self, name, value):\n        self[name] = value\n\n    def copy(self):\n        return Struct(dict.copy(self))\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>points = Struct(x=1, y=2)\n# Changing\npoints['x'] = 2\npoints.y = 1\n# Accessing\npoints['x'], points.x, points.get('x') # 2 2 2\npoints['y'], points.y, points.get('y') # 1 1 1\n# Accessing inexistent keys/attrs \npoints['z'] # KeyError: z\npoints.z # AttributeError: z\n# Copying\npoints_copy = points.copy()\npoints.x = 2\npoints_copy.x # 1\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1360320296, 
      "creation_date": 1340058365, 
      "score": 1, 
      "owner": {
        "user_id": 222758, 
        "profile_image": "http://i.stack.imgur.com/1veLD.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 3264, 
        "link": "http://stackoverflow.com/users/222758/paulo-freitas", 
        "accept_rate": 77, 
        "display_name": "Paulo Freitas"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1360320296, 
      "answer_id": 11091977
    }, 
    {
      "body": "<p>My dictionary is of this format:</p>\n\n<pre><code>addr_bk = {\n    'person': [\n        {'name': 'Andrew', 'id': 123, 'email': 'andrew@mailserver.com',\n         'phone': [{'type': 2, 'number': '633311122'},\n                   {'type': 0, 'number': '97788665'}]\n        },\n        {'name': 'Tom', 'id': 456,\n         'phone': [{'type': 0, 'number': '91122334'}]}, \n        {'name': 'Jack', 'id': 7788, 'email': 'jack@gmail.com'}\n    ]\n}\n</code></pre>\n\n<p>As can be seen, I have <strong>nested dictionaries</strong> and <strong>list of dicts</strong>.\nThis is because the addr_bk was decoded from protocol buffer data that converted to a python dict using lwpb.codec. There are optional field (e.g. email => where key may be unavailable) and repeated field (e.g. phone => converted to list of dict).</p>\n\n<p>I tried all the above proposed solutions. Some doesn't handle the nested dictionaries well. Others cannot print the object details easily.</p>\n\n<p>Only the solution, dict2obj(dict) by Dawie Strauss, works best.</p>\n\n<p>I have enhanced it a little to handle when the key cannot be found:</p>\n\n<pre><code># Work the best, with nested dictionaries &amp; lists! :)\n# Able to print out all items.\nclass dict2obj_new(dict):\n    def __init__(self, dict_):\n        super(dict2obj_new, self).__init__(dict_)\n        for key in self:\n            item = self[key]\n            if isinstance(item, list):\n                for idx, it in enumerate(item):\n                    if isinstance(it, dict):\n                        item[idx] = dict2obj_new(it)\n            elif isinstance(item, dict):\n                self[key] = dict2obj_new(item)\n\n    def __getattr__(self, key):\n        # Enhanced to handle key not found.\n        if self.has_key(key):\n            return self[key]\n        else:\n            return None\n</code></pre>\n\n<p>Then, I tested it with:</p>\n\n<pre><code># Testing...\nab = dict2obj_new(addr_bk)\n\nfor person in ab.person:\n  print \"Person ID:\", person.id\n  print \"  Name:\", person.name\n  # Check if optional field is available before printing.\n  if person.email:\n    print \"  E-mail address:\", person.email\n\n  # Check if optional field is available before printing.\n  if person.phone:\n    for phone_number in person.phone:\n      if phone_number.type == codec.enums.PhoneType.MOBILE:\n        print \"  Mobile phone #:\",\n      elif phone_number.type == codec.enums.PhoneType.HOME:\n        print \"  Home phone #:\",\n      else:\n        print \"  Work phone #:\",\n      print phone_number.number\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1357624108, 
      "creation_date": 1357623602, 
      "score": 0, 
      "owner": {
        "user_id": 1679789, 
        "profile_image": "https://www.gravatar.com/avatar/3effef3c28632e57889ebc58919336cb?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 16, 
        "link": "http://stackoverflow.com/users/1679789/whospal", 
        "display_name": "Whospal"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1357624108, 
      "answer_id": 14208842
    }, 
    {
      "body": "<p>I had some problems with <code>__getattr__</code> not being called so I constructed a new style class version:</p>\n\n<pre><code>class Struct(object):\n    '''The recursive class for building and representing objects with.'''\n    class NoneStruct(object):\n        def __getattribute__(*args):\n            return Struct.NoneStruct()\n\n        def __eq__(self, obj):\n            return obj == None\n\n    def __init__(self, obj):\n        for k, v in obj.iteritems():\n            if isinstance(v, dict):\n                setattr(self, k, Struct(v))\n            else:\n                setattr(self, k, v)\n\n    def __getattribute__(*args):\n        try:\n            return object.__getattribute__(*args)\n        except:            \n            return Struct.NoneStruct()\n\n    def __repr__(self):\n        return '{%s}' % str(', '.join('%s : %s' % (k, repr(v)) for \n(k, v) in self.__dict__.iteritems()))\n</code></pre>\n\n<p>This version also has the addition of <code>NoneStruct</code> that is returned when an attribute is called that is not set. This allows for None testing to see if an attribute is present. Very usefull when the exact dict input is not known (settings etc.).</p>\n\n<pre><code>bla = Struct({'a':{'b':1}})\nprint(bla.a.b)\n&gt;&gt; 1\nprint(bla.a.c == None)\n&gt;&gt; True\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1345646669, 
      "creation_date": 1345646669, 
      "score": 0, 
      "owner": {
        "user_id": 248922, 
        "profile_image": "https://www.gravatar.com/avatar/b55c30cff18b13e2176c1359654ebf1c?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 3700, 
        "link": "http://stackoverflow.com/users/248922/rickya", 
        "accept_rate": 91, 
        "display_name": "RickyA"
      }, 
      "is_accepted": false, 
      "answer_id": 12075692
    }, 
    {
      "body": "<p>Wanted to upload my version of this little paradigm.</p>\n\n<pre><code>class Struct(dict):\n  def __init__(self,data):\n    for key, value in data.items():\n      if isinstance(value, dict):\n        setattr(self, key, Struct(value))\n      else:   \n        setattr(self, key, type(value).__init__(value))\n\n      dict.__init__(self,data)\n</code></pre>\n\n<p>It preserves the attributes for the type that's imported into the class. My only concern would be overwriting methods from within the dictionary your parsing. But otherwise seems solid!</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1344983886, 
      "creation_date": 1344983886, 
      "score": 3, 
      "owner": {
        "user_id": 1599343, 
        "profile_image": "https://www.gravatar.com/avatar/f8a5c801228272e08ae635389f77c25a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/1599343/erik", 
        "display_name": "Erik"
      }, 
      "is_accepted": false, 
      "answer_id": 11961837
    }, 
    {
      "body": "<p>Old Q&amp;A, but I get something more to talk. Seems no one talk about recursive dict. This is my code:</p>\n\n<pre><code>#!/usr/bin/env python\n\nclass Object( dict ):\n    def __init__( self, data = None ):\n        super( Object, self ).__init__()\n        if data:\n            self.__update( data, {} )\n\n    def __update( self, data, did ):\n        dataid = id(data)\n        did[ dataid ] = self\n\n        for k in data:\n            dkid = id(data[k])\n            if did.has_key(dkid):\n                self[k] = did[dkid]\n            elif isinstance( data[k], Object ):\n                self[k] = data[k]\n            elif isinstance( data[k], dict ):\n                obj = Object()\n                obj.__update( data[k], did )\n                self[k] = obj\n                obj = None\n            else:\n                self[k] = data[k]\n\n    def __getattr__( self, key ):\n        return self.get( key, None )\n\n    def __setattr__( self, key, value ):\n        if isinstance(value,dict):\n            self[key] = Object( value )\n        else:\n            self[key] = value\n\n    def update( self, *args ):\n        for obj in args:\n            for k in obj:\n                if isinstance(obj[k],dict):\n                    self[k] = Object( obj[k] )\n                else:\n                    self[k] = obj[k]\n        return self\n\n    def merge( self, *args ):\n        for obj in args:\n            for k in obj:\n                if self.has_key(k):\n                    if isinstance(self[k],list) and isinstance(obj[k],list):\n                        self[k] += obj[k]\n                    elif isinstance(self[k],list):\n                        self[k].append( obj[k] )\n                    elif isinstance(obj[k],list):\n                        self[k] = [self[k]] + obj[k]\n                    elif isinstance(self[k],Object) and isinstance(obj[k],Object):\n                        self[k].merge( obj[k] )\n                    elif isinstance(self[k],Object) and isinstance(obj[k],dict):\n                        self[k].merge( obj[k] )\n                    else:\n                        self[k] = [ self[k], obj[k] ]\n                else:\n                    if isinstance(obj[k],dict):\n                        self[k] = Object( obj[k] )\n                    else:\n                        self[k] = obj[k]\n        return self\n\ndef test01():\n    class UObject( Object ):\n        pass\n    obj = Object({1:2})\n    d = {}\n    d.update({\n        \"a\": 1,\n        \"b\": {\n            \"c\": 2,\n            \"d\": [ 3, 4, 5 ],\n            \"e\": [ [6,7], (8,9) ],\n            \"self\": d,\n        },\n        1: 10,\n        \"1\": 11,\n        \"obj\": obj,\n    })\n    x = UObject(d)\n\n\n    assert x.a == x[\"a\"] == 1\n    assert x.b.c == x[\"b\"][\"c\"] == 2\n    assert x.b.d[0] == 3\n    assert x.b.d[1] == 4\n    assert x.b.e[0][0] == 6\n    assert x.b.e[1][0] == 8\n    assert x[1] == 10\n    assert x[\"1\"] == 11\n    assert x[1] != x[\"1\"]\n    assert id(x) == id(x.b.self.b.self) == id(x.b.self)\n    assert x.b.self.a == x.b.self.b.self.a == 1\n\n    x.x = 12\n    assert x.x == x[\"x\"] == 12\n    x.y = {\"a\":13,\"b\":[14,15]}\n    assert x.y.a == 13\n    assert x.y.b[0] == 14\n\ndef test02():\n    x = Object({\n        \"a\": {\n            \"b\": 1,\n            \"c\": [ 2, 3 ]\n        },\n        1: 6,\n        2: [ 8, 9 ],\n        3: 11,\n    })\n    y = Object({\n        \"a\": {\n            \"b\": 4,\n            \"c\": [ 5 ]\n        },\n        1: 7,\n        2: 10,\n        3: [ 12 , 13 ],\n    })\n    z = {\n        3: 14,\n        2: 15,\n        \"a\": {\n            \"b\": 16,\n            \"c\": 17,\n        }\n    }\n    x.merge( y, z )\n    assert 2 in x.a.c\n    assert 3 in x.a.c\n    assert 5 in x.a.c\n    assert 1 in x.a.b\n    assert 4 in x.a.b\n    assert 8 in x[2]\n    assert 9 in x[2]\n    assert 10 in x[2]\n    assert 11 in x[3]\n    assert 12 in x[3]\n    assert 13 in x[3]\n    assert 14 in x[3]\n    assert 15 in x[2]\n    assert 16 in x.a.b\n    assert 17 in x.a.c\n\nif __name__ == '__main__':\n    test01()\n    test02()\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1339565524, 
      "creation_date": 1339554187, 
      "score": 2, 
      "owner": {
        "user_id": 501639, 
        "profile_image": "https://www.gravatar.com/avatar/a2c96b9dc7285b007a7858780360cee2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 363, 
        "link": "http://stackoverflow.com/users/501639/truease-com", 
        "accept_rate": 50, 
        "display_name": "truease.com"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1339565524, 
      "answer_id": 11007429
    }, 
    {
      "body": "<pre><code>class Struct(object):\n    \"\"\"Comment removed\"\"\"\n    def __init__(self, data):\n        for name, value in data.iteritems():\n            setattr(self, name, self._wrap(value))\n\n    def _wrap(self, value):\n        if isinstance(value, (tuple, list, set, frozenset)): \n            return type(value)([self._wrap(v) for v in value])\n        else:\n            return Struct(value) if isinstance(value, dict) else value\n</code></pre>\n\n<p>Can be used with any sequence/dict/value structure of any depth.</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1312880307, 
      "creation_date": 1312880307, 
      "score": 9, 
      "owner": {
        "user_id": 885564, 
        "profile_image": "https://www.gravatar.com/avatar/97c0da4880b96f90e2c77a0fec2db1ba?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 91, 
        "link": "http://stackoverflow.com/users/885564/xeye", 
        "display_name": "XEye"
      }, 
      "is_accepted": false, 
      "answer_id": 6993694
    }, 
    {
      "body": "<p>Taking what I feel are the best aspects of the previous examples, here's what I came up with:</p>\n\n<pre><code>class Struct:\n  '''The recursive class for building and representing objects with.'''\n  def __init__(self, obj):\n    for k, v in obj.iteritems():\n      if isinstance(v, dict):\n        setattr(self, k, Struct(v))\n      else:\n        setattr(self, k, v)\n  def __getitem__(self, val):\n    return self.__dict__[val]\n  def __repr__(self):\n    return '{%s}' % str(', '.join('%s : %s' % (k, repr(v)) for\n      (k, v) in self.__dict__.iteritems()))\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1309795922, 
      "creation_date": 1309795922, 
      "score": 25, 
      "owner": {
        "user_id": 807865, 
        "profile_image": "https://www.gravatar.com/avatar/aac38d409f529e329d16e6f30e9ddd60?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 401, 
        "link": "http://stackoverflow.com/users/807865/andyvanee", 
        "display_name": "andyvanee"
      }, 
      "is_accepted": false, 
      "answer_id": 6573827
    }, 
    {
      "body": "<p>I stumbled upon the case I needed to recursively convert a list of dicts to list of objects, so based on Roberto's snippet here what did the work for me:</p>\n\n<pre><code>def dict2obj(d):\n    if isinstance(d, dict):\n        n = {}\n        for item in d:\n            if isinstance(d[item], dict):\n                n[item] = dict2obj(d[item])\n            elif isinstance(d[item], (list, tuple)):\n                n[item] = [dict2obj(elem) for elem in d[item]]\n            else:\n                n[item] = d[item]\n        return type('obj_from_dict', (object,), n)\n    elif isinstance(d, (list, tuple,)):\n        l = []\n        for item in d:\n            l.append(dict2obj(item))\n        return l\n    else:\n        return d\n</code></pre>\n\n<p>Note that any tuple will be converted to its list equivalent, for obvious reasons. </p>\n\n<p>Hope this helps someone as much as all your answers did for me, guys.</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1303663314, 
      "creation_date": 1303663314, 
      "score": 3, 
      "owner": {
        "user_id": 330911, 
        "profile_image": "https://www.gravatar.com/avatar/c0240424425f5ca75071b478c0dc29b9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5573, 
        "link": "http://stackoverflow.com/users/330911/niko", 
        "accept_rate": 90, 
        "display_name": "NiKo"
      }, 
      "is_accepted": false, 
      "answer_id": 5771818
    }, 
    {
      "body": "<pre><code>x = type('new_dict', (object,), d)\n</code></pre>\n\n<p>then add recursion to this and you're done.</p>\n\n<p><strong>edit</strong> this is how I'd implement it:</p>\n\n<pre><code>&gt;&gt;&gt; d\n{'a': 1, 'b': {'c': 2}, 'd': ['hi', {'foo': 'bar'}]}\n&gt;&gt;&gt; def obj_dic(d):\n    top = type('new', (object,), d)\n    seqs = tuple, list, set, frozenset\n    for i, j in d.items():\n    \tif isinstance(j, dict):\n    \t    setattr(top, i, obj_dic(j))\n    \telif isinstance(j, seqs):\n    \t    setattr(top, i, \n    \t\t    type(j)(obj_dic(sj) if isinstance(sj, dict) else sj for sj in j))\n    \telse:\n    \t    setattr(top, i, j)\n    return top\n\n&gt;&gt;&gt; x = obj_dic(d)\n&gt;&gt;&gt; x.a\n1\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1254255242, 
      "creation_date": 1250767894, 
      "score": 35, 
      "owner": {
        "user_id": 12855, 
        "profile_image": "https://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 87347, 
        "link": "http://stackoverflow.com/users/12855/silentghost", 
        "accept_rate": 86, 
        "display_name": "SilentGhost"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1254255242, 
      "answer_id": 1305547
    }, 
    {
      "body": "<p>Here's another implementation:</p>\n\n<pre><code>class DictObj(object):\n    def __init__(self, d):\n        self.__dict__ = d\n\ndef dict_to_obj(d):\n    if isinstance(d, (list, tuple)): return map(dict_to_obj, d)\n    elif not isinstance(d, dict): return d\n    return DictObj(dict((k, dict_to_obj(v)) for (k,v) in d.iteritems()))\n</code></pre>\n\n<p>[Edit] Missed bit about also handling dicts within lists, not just other dicts.  Added fix.</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250782153, 
      "creation_date": 1250775206, 
      "score": 2, 
      "owner": {
        "user_id": 9493, 
        "profile_image": "https://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 52083, 
        "link": "http://stackoverflow.com/users/9493/brian", 
        "display_name": "Brian"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1250782153, 
      "answer_id": 1306221
    }, 
    {
      "body": "<p>Let me explain a solution I <strong>almost</strong> used some time ago. But first, the reason I did not is illustrated by the fact that the following code:</p>\n\n<pre><code>d = {'from': 1}\nx = dict2obj(d)\n\nprint x.from\n</code></pre>\n\n<p>gives this error:</p>\n\n<pre><code>  File \"test.py\", line 20\n    print x.from == 1\n                ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>Because \"from\" is a Python keyword there are certain dictionary keys you cannot allow.</p>\n\n<p><hr /></p>\n\n<p>Now my solution allows access to the dictionary items by using their names directly. But it also allows you to use \"dictionary semantics\". Here is the code with example usage:</p>\n\n<pre><code>class dict2obj(dict):\n    def __init__(self, dict_):\n        super(dict2obj, self).__init__(dict_)\n        for key in self:\n            item = self[key]\n            if isinstance(item, list):\n                for idx, it in enumerate(item):\n                    if isinstance(it, dict):\n                        item[idx] = dict2obj(it)\n            elif isinstance(item, dict):\n                self[key] = dict2obj(item)\n\n    def __getattr__(self, key):\n        return self[key]\n\nd = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n\nx = dict2obj(d)\n\nassert x.a == x['a'] == 1\nassert x.b.c == x['b']['c'] == 2\nassert x.d[1].foo == x['d'][1]['foo'] == \"bar\"\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250779915, 
      "creation_date": 1250769154, 
      "score": 1, 
      "owner": {
        "user_id": 4211, 
        "profile_image": "https://www.gravatar.com/avatar/d7026af22e84a7365bd47ddae1fb0c3c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1716, 
        "link": "http://stackoverflow.com/users/4211/dawie-strauss", 
        "display_name": "Dawie Strauss"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1250779915, 
      "answer_id": 1305651
    }, 
    {
      "body": "<p>Here is another way to implement SilentGhost's original suggestion:</p>\n\n<pre><code>def dict2obj(d):\n  if isinstance(d, dict):\n    n = {}\n    for item in d:\n      if isinstance(d[item], dict):\n        n[item] = dict2obj(d[item])\n      elif isinstance(d[item], (list, tuple)):\n        n[item] = [dict2obj(elem) for elem in d[item]]\n      else:\n        n[item] = d[item]\n    return type('obj_from_dict', (object,), n)\n  else:\n    return d\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250777923, 
      "creation_date": 1250777923, 
      "score": 2, 
      "owner": {
        "user_id": 43927, 
        "profile_image": "https://www.gravatar.com/avatar/77e50566e38e16c08091d86fb5646ca9?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 16379, 
        "link": "http://stackoverflow.com/users/43927/roberto-liffredo", 
        "display_name": "Roberto Liffredo"
      }, 
      "is_accepted": false, 
      "answer_id": 1306518
    }, 
    {
      "body": "<pre><code>class obj(object):\n    def __init__(self, d):\n        for a, b in d.items():\n            if isinstance(b, (list, tuple)):\n               setattr(self, a, [obj(x) if isinstance(x, dict) else x for x in b])\n            else:\n               setattr(self, a, obj(b) if isinstance(b, dict) else b)\n\n\n&gt;&gt;&gt; x = obj(d)\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250769516, 
      "creation_date": 1250769516, 
      "score": 44, 
      "owner": {
        "user_id": 97828, 
        "profile_image": "https://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 43207, 
        "link": "http://stackoverflow.com/users/97828/nadia-alramli", 
        "display_name": "Nadia Alramli"
      }, 
      "is_accepted": false, 
      "answer_id": 1305682
    }, 
    {
      "body": "<pre><code>&gt;&gt;&gt; def dict2obj(d):\n        if isinstance(d, list):\n    \t    d = [dict2obj(x) for x in d]\n        if not isinstance(d, dict):\n            return d\n        class C(object):\n    \t    pass\n        o = C()\n        for k in d:\n            o.__dict__[k] = dict2obj(d[k])\n        return o\n\n\n&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n&gt;&gt;&gt; x = dict2obj(d)\n&gt;&gt;&gt; x.a\n1\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code></pre>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250769056, 
      "creation_date": 1250769056, 
      "score": 8, 
      "owner": {
        "user_id": 108445, 
        "profile_image": "https://www.gravatar.com/avatar/63a945d1f94938561b0ff25c61468050?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 3718, 
        "link": "http://stackoverflow.com/users/108445/anon", 
        "display_name": "Anon"
      }, 
      "is_accepted": false, 
      "answer_id": 1305643
    }, 
    {
      "body": "<p>This should get your started:</p>\n\n<pre><code>class dict2obj(object):\n    def __init__(self, d):\n        self.__dict__['d'] = d\n\n    def __getattr__(self, key):\n        value = self.__dict__['d'][key]\n        if type(value) == type({}):\n            return dict2obj(value)\n\n        return value\n\nd = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n\nx = dict2obj(d)\nprint x.a\nprint x.b.c\nprint x.d[1].foo\n</code></pre>\n\n<p>It doesn't work for lists, yet. You'll have to wrap the lists in a UserList and overload <code>__getitem__</code> to wrap dicts.</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250768082, 
      "creation_date": 1250768082, 
      "score": 6, 
      "owner": {
        "user_id": 34088, 
        "profile_image": "https://www.gravatar.com/avatar/8a4d6f03a8879432d8563aefbf48e787?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 160124, 
        "link": "http://stackoverflow.com/users/34088/aaron-digulla", 
        "accept_rate": 78, 
        "display_name": "Aaron Digulla"
      }, 
      "is_accepted": false, 
      "answer_id": 1305561
    }, 
    {
      "body": "<p><code>x.__dict__.update(d)</code> should do fine.</p>\n", 
      "question_id": 1305532, 
      "last_activity_date": 1250767919, 
      "creation_date": 1250767919, 
      "score": 6, 
      "owner": {
        "user_id": 148281, 
        "profile_image": "https://www.gravatar.com/avatar/d396104b8612b492d9269fbef0758991?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 763, 
        "link": "http://stackoverflow.com/users/148281/alex-rodrigues", 
        "display_name": "Alex Rodrigues"
      }, 
      "is_accepted": false, 
      "answer_id": 1305548
    }
  ], 
  "1916218": [
    {
      "body": "<p>It's a matter of taste, but this is a simple javascript version:\nIt sorts the array, and then looks just at the first and last items.</p>\n\n<pre><code>function sharedStart(array){\n    var A= array.slice(0).sort(), \n    word1= A[0], word2= A[A.length-1], \n    L= word1.length, i= 0;\n    while(i&lt;L &amp;&amp; word1.charAt(i)=== word2.charAt(i)) i++;\n    return word1.substring(0, i);\n}\n</code></pre>\n\n<p><strong>DEMOS</strong></p>\n\n<pre><code>sharedStart(['interspecies', 'interstelar', 'interstate'])  //=&gt; 'inters'\nsharedStart(['throne', 'throne'])                           //=&gt; 'throne'\nsharedStart(['throne', 'dungeon'])                          //=&gt; ''\nsharedStart(['cheese'])                                     //=&gt; 'cheese'\nsharedStart([])                                             //=&gt; ''\nsharedStart(['prefix', 'suffix'])                           //=&gt; ''\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1398866116, 
      "creation_date": 1260991572, 
      "score": 44, 
      "owner": {
        "user_id": 80860, 
        "profile_image": "https://www.gravatar.com/avatar/55d0212780e6a7e7effb852b9ea69055?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 38868, 
        "link": "http://stackoverflow.com/users/80860/kennebec", 
        "display_name": "kennebec"
      }, 
      "is_accepted": true, 
      "last_edit_date": 1398866116, 
      "answer_id": 1917041
    }, 
    {
      "body": "<p>Fun alternative Ruby solution:</p>\n\n<pre><code>def common_prefix(*strings)\n  chars  = strings.map(&amp;:chars)\n  length = chars.first.zip( *chars[1..-1] ).index{ |a| a.uniq.length&gt;1 }\n  strings.first[0,length]\nend\n\np common_prefix( 'foon', 'foost', 'forlorn' ) #=&gt; \"fo\"\np common_prefix( 'foost', 'foobar', 'foon'  ) #=&gt; \"foo\"\np common_prefix( 'a','b'  )                   #=&gt; \"\"\n</code></pre>\n\n<p>It might help speed if you used <code>chars = strings.sort_by(&amp;:length).map(&amp;:chars)</code>, since the shorter the first string, the shorter the arrays created by <code>zip</code>. However, if you cared about speed, you probably shouldn't use this solution anyhow. :)</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1392394087, 
      "creation_date": 1392393784, 
      "score": 1, 
      "owner": {
        "user_id": 405017, 
        "profile_image": "https://www.gravatar.com/avatar/2024054e404233ed97b7d9287aff103d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 123929, 
        "link": "http://stackoverflow.com/users/405017/phrogz", 
        "accept_rate": 86, 
        "display_name": "Phrogz"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1392394087, 
      "answer_id": 21783937
    }, 
    {
      "body": "<p>Here's an efficient solution in ruby. I based the idea of the strategy for a hi/lo guessing game where you iteratively zero in on the longest prefix.</p>\n\n<p>Someone correct me if I'm wrong, but I think the complexity is O(n log n), where n is the length of the shortest string and the number of strings is considered a constant.</p>\n\n<pre><code>def common(strings)\n  lo = 0\n  hi = strings.map(&amp;:length).min - 1\n  return '' if hi &lt; lo\n\n  guess, last_guess = lo, hi\n\n  while guess != last_guess\n    last_guess = guess\n    guess = lo + ((hi - lo) / 2.0).ceil\n\n    if strings.map { |s| s[0..guess] }.uniq.length == 1\n      lo = guess\n    else\n      hi = guess\n    end\n  end\n\n  strings.map { |s| s[0...guess] }.uniq.length == 1 ? strings.first[0...guess] : ''\nend\n</code></pre>\n\n<p>And some checks that it works:</p>\n\n<pre><code>&gt;&gt; common %w{ interspecies interstelar interstate }\n=&gt; \"inters\"\n\n&gt;&gt; common %w{ dog dalmation }\n=&gt; \"d\"\n\n&gt;&gt; common %w{ asdf qwerty }\n=&gt; \"\"\n\n&gt;&gt; common ['', 'asdf']\n=&gt; \"\"\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1387318039, 
      "creation_date": 1387317097, 
      "score": 0, 
      "owner": {
        "user_id": 480943, 
        "profile_image": "https://www.gravatar.com/avatar/2a3cdbb4d1b3f2d07ee2f6a6559c7963?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 27322, 
        "link": "http://stackoverflow.com/users/480943/ben-lee", 
        "accept_rate": 86, 
        "display_name": "Ben Lee"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1387318039, 
      "answer_id": 20645435
    }, 
    {
      "body": "<p>Golfed JS solution just for fun:</p>\n\n<pre><code>w=[\"hello\", \"hell\", \"helen\"];\nc=w.reduce(function(p,c){\n    for(r=\"\",i=0;p[i]==c[i];r+=p[i],i++){}\n    return r;\n});\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1376001388, 
      "creation_date": 1376001388, 
      "score": 1, 
      "owner": {
        "user_id": 1088797, 
        "profile_image": "http://i.stack.imgur.com/bltA9.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 1985, 
        "link": "http://stackoverflow.com/users/1088797/dan-prince", 
        "accept_rate": 95, 
        "display_name": "Dan Prince"
      }, 
      "is_accepted": false, 
      "answer_id": 18137384
    }, 
    {
      "body": "<p>The <a href=\"http://stackoverflow.com/questions/1916218/find-the-longest-common-starting-substring-in-a-set-of-strings#1917041\">accepted solution</a> is broken (for example, it returns <code>a</code> for strings like <code>['a', 'ba']</code>). The fix is very simple, you literally have to change only 3 characters (from <code>indexOf(tem1) == -1</code> to <code>indexOf(tem1) != 0</code>) and the function would work as expected.</p>\n\n<p>Unfortunately, when I tried to edit the answer to fix the typo, SO told me that \"edits must be at least 6 characters\". I <em>could</em> change more then those 3 chars, by improving naming and readability but that feels like a little bit too much.</p>\n\n<p>So, below is a fixed and improved (at least from my point of view) version of the kennebec's solution:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function commonPrefix(words) {\n  max_word = words.reduce(function(a, b) { return a &gt; b ? a : b });\n  prefix   = words.reduce(function(a, b) { return a &gt; b ? b : a }); // min word\n\n  while(max_word.indexOf(prefix) != 0) {\n    prefix = prefix.slice(0, -1);\n  }\n\n  return prefix;\n}\n</code></pre>\n\n<p>(on <a href=\"http://jsfiddle.net/alexisowl/ZUAG7/\" rel=\"nofollow\">jsFiddle</a>)</p>\n\n<p>Note, that it uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow\">reduce</a> method (JavaScript 1.8) in order to find alphanumeric max / min instead of sorting the array and then fetching the first and the last elements of it.</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1374741638, 
      "creation_date": 1374622403, 
      "score": 2, 
      "owner": {
        "user_id": 786948, 
        "profile_image": "https://www.gravatar.com/avatar/7a2bdd5e9a72a6dae9e0ec404b7d56ce?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1255, 
        "link": "http://stackoverflow.com/users/786948/alexis", 
        "accept_rate": 100, 
        "display_name": "Alexis"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1374741638, 
      "answer_id": 17822752
    }, 
    {
      "body": "<p>My solution in Java:</p>\n\n<pre><code>public static String compute(Collection&lt;String&gt; strings) {\n    if(strings.isEmpty()) return \"\";\n    Set&lt;Character&gt; v = new HashSet&lt;Character&gt;();\n    int i = 0;\n    try {\n        while(true) {\n            for(String s : strings) v.add(s.charAt(i));\n            if(v.size() &gt; 1) break;\n            v.clear();\n            i++;\n        }\n    } catch(StringIndexOutOfBoundsException ex) {}\n    return strings.iterator().next().substring(0, i);\n}\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1370553917, 
      "creation_date": 1370553917, 
      "score": 0, 
      "owner": {
        "user_id": 1044117, 
        "profile_image": "http://i.stack.imgur.com/2K7QG.jpg?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 92, 
        "link": "http://stackoverflow.com/users/1044117/mescalinum", 
        "accept_rate": 80, 
        "display_name": "mescalinum"
      }, 
      "is_accepted": false, 
      "answer_id": 16972453
    }, 
    {
      "body": "<p>Yet another way to do it: use regex greed.</p>\n\n<pre><code>words = %w(interspecies interstelar interstate)\nj = '='\nstr = ['', *words].join(j)\nre = \"[^#{j}]*\"\n\nstr =~ /\\A\n    (?: #{j} ( #{re} ) #{re} )\n    (?: #{j}    \\1     #{re} )*\n\\z/x\n\np $1\n</code></pre>\n\n<p><strong>And the one-liner, courtesy of mislav (50 characters):</strong></p>\n\n<pre><code>p ARGV.join(' ').match(/^(\\w*)\\w*(?: \\1\\w*)*$/)[1]\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1342830238, 
      "creation_date": 1261060034, 
      "score": 5, 
      "owner": {
        "user_id": 55857, 
        "profile_image": "https://www.gravatar.com/avatar/9cc59902c5433de334920d378626b9d8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 23258, 
        "link": "http://stackoverflow.com/users/55857/fmc", 
        "accept_rate": 88, 
        "display_name": "FMc"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1342830238, 
      "answer_id": 1922153
    }, 
    {
      "body": "<p>Oftentimes it's more elegant to use a mature open source library instead of rolling your own. Then, if it doesn't completely suit your needs, you can extend it or modify it to improve it, and let the community decide if that belongs in the library.</p>\n\n<p><a href=\"http://rubygems.org/gems/diff-lcs\" rel=\"nofollow\">diff-lcs</a> is a good Ruby gem for least common substring.</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1327289487, 
      "creation_date": 1327289487, 
      "score": 0, 
      "owner": {
        "user_id": 6304, 
        "profile_image": "https://www.gravatar.com/avatar/602f1b8ccf99dc47c43da83d53b4ffd5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2511, 
        "link": "http://stackoverflow.com/users/6304/nertzy", 
        "display_name": "nertzy"
      }, 
      "is_accepted": false, 
      "answer_id": 8966908
    }, 
    {
      "body": "<p>Combining answers by <strong>kennebec</strong>, <strong>Florian F</strong> and <strong>jberryman</strong> yields the following Haskell one-liner:</p>\n\n<pre><code>commonPrefix l = map fst . takeWhile (uncurry (==)) $ zip (minimum l) (maximum l)\n</code></pre>\n\n<p>With <code>Control.Arrow</code> one can get a point-free form:</p>\n\n<pre><code>commonPrefix = map fst . takeWhile (uncurry (==)) . uncurry zip . (minimum &amp;&amp;&amp; maximum)\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1322956887, 
      "creation_date": 1322956887, 
      "score": 3, 
      "owner": {
        "user_id": 320226, 
        "profile_image": "https://www.gravatar.com/avatar/69d3ff431a55a0b2443d7b6dc4233da7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6041, 
        "link": "http://stackoverflow.com/users/320226/bolo", 
        "accept_rate": 100, 
        "display_name": "Bolo"
      }, 
      "is_accepted": false, 
      "answer_id": 8372088
    }, 
    {
      "body": "<p>Instead of sorting, you could just get the min and max of the strings.</p>\n\n<p>To me, elegance in a computer program is a balance of speed and simplicity.\nIt should not do unnecessary computation, and it should be simple enough to make its correctness evident.</p>\n\n<p>I could call the sorting solution \"clever\", but not \"elegant\".</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1298298386, 
      "creation_date": 1298298386, 
      "score": 1, 
      "owner": {
        "user_id": 626750, 
        "profile_image": "https://www.gravatar.com/avatar/949624bc60c3ea050c22250345780276?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 21, 
        "link": "http://stackoverflow.com/users/626750/florian-f", 
        "display_name": "Florian F"
      }, 
      "is_accepted": false, 
      "answer_id": 5067134
    }, 
    {
      "body": "<p>A javascript version based on <a href=\"http://stackoverflow.com/questions/1916218/find-the-longest-common-starting-substring-in-a-set-of-strings/1916492#1916492\">@Svante's algorithm</a>:</p>\n\n<pre><code>function commonSubstring(words){\n    var iChar, iWord,\n        refWord = words[0],\n        lRefWord = refWord.length,\n        lWords = words.length;\n    for (iChar = 0; iChar &lt; lRefWord; iChar += 1) {\n        for (iWord = 1; iWord &lt; lWords; iWord += 1) {\n            if (refWord[iChar] !== words[iWord][iChar]) {\n                return refWord.substring(0, iChar);\n            }\n        }\n    }\n    return refWord;\n}\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1284479487, 
      "creation_date": 1284479487, 
      "score": 2, 
      "owner": {
        "user_id": 146513, 
        "profile_image": "https://www.gravatar.com/avatar/a4eb248844eb0800f1ba2bc27074529d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4208, 
        "link": "http://stackoverflow.com/users/146513/protron", 
        "accept_rate": 100, 
        "display_name": "Protron"
      }, 
      "is_accepted": false, 
      "answer_id": 3710553
    }, 
    {
      "body": "<p>Just for the fun of it, here's a version written in (SWI-)PROLOG:</p>\n\n<pre><code>common_pre([[C|Cs]|Ss], [C|Res]) :-\n  maplist(head_tail(C), [[C|Cs]|Ss], RemSs), !,\n  common_pre(RemSs, Res).\ncommon_pre(_, []).\n\nhead_tail(H, [H|T], T).\n</code></pre>\n\n<p>Running: </p>\n\n<pre><code>?- S=[\"interspecies\", \"interstelar\", \"interstate\"], common_pre(S, CP), string_to_list(CPString, CP).\n</code></pre>\n\n<p>Gives:</p>\n\n<pre><code>CP = [105, 110, 116, 101, 114, 115],\nCPString = \"inters\".\n</code></pre>\n\n<p>Explanation: </p>\n\n<p>(SWI-)PROLOG treats strings as lists of character codes (numbers). All the predicate <code>common_pre/2</code> does is recursively pattern-match to select the first code (<code>C</code>) from the head of the first list (string, <code>[C|Cs]</code>) in the list of all lists (all strings, <code>[[C|Cs]|Ss]</code>), and appends the matching code <code>C</code> to the result <em>iff</em> it is common to all (remaining) heads of all lists (strings), else it terminates.</p>\n\n<p>Nice, clean, simple and efficient... :)</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1261088867, 
      "creation_date": 1261030393, 
      "score": 3, 
      "owner": {
        "user_id": 206428, 
        "profile_image": "https://www.gravatar.com/avatar/1cae757bfe79999ea2c6d9242e02d5c5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3333, 
        "link": "http://stackoverflow.com/users/206428/sharky", 
        "accept_rate": 75, 
        "display_name": "sharky"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1261088867, 
      "answer_id": 1919800
    }, 
    {
      "body": "<p>My Haskell one-liner:</p>\n\n<pre><code>import Data.List\n\ncommonPre :: [String] -&gt; String\ncommonPre = map head . takeWhile (\\(x:xs)-&gt; all (==x) xs) . transpose\n</code></pre>\n\n<p>EDIT: barkmadley gave a good explanation of the code below. I'd also add that haskell uses lazy evaluation, so we can be lazy about our use of <code>transpose</code>; it will only transpose our lists as far as necessary to find the end of the common prefix.</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1261069754, 
      "creation_date": 1261004606, 
      "score": 8, 
      "owner": {
        "user_id": 176841, 
        "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 7150, 
        "link": "http://stackoverflow.com/users/176841/jberryman", 
        "accept_rate": 75, 
        "display_name": "jberryman"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1261069754, 
      "answer_id": 1918438
    }, 
    {
      "body": "<p>This one is very similar to Roberto Bonvallet's solution, except in ruby.</p>\n\n<pre><code>chars = %w[interspecies interstelar interstate].map {|w| w.split('') }\nchars[0].zip(*chars[1..-1]).map { |c| c.uniq }.take_while { |c| c.size == 1 }.join\n</code></pre>\n\n<p>The first line replaces each word with an array of chars. Next, I use <code>zip</code> to create this data structure:</p>\n\n<p><code>[[\"i\", \"i\", \"i\"], [\"n\", \"n\", \"n\"], [\"t\", \"t\", \"t\"], ...</code></p>\n\n<p><code>map</code> and <code>uniq</code> reduce this to <code>[[\"i\"],[\"n\"],[\"t\"], ...</code></p>\n\n<p><code>take_while</code> pulls the chars off the array until it finds one where the size isn't one (meaning not all chars were the same). Finally, I <code>join</code> them back together.</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1261024646, 
      "creation_date": 1261024646, 
      "score": 2, 
      "owner": {
        "user_id": 209962, 
        "profile_image": "https://www.gravatar.com/avatar/d85d44a0eca045f40e5a31449277c26c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1728, 
        "link": "http://stackoverflow.com/users/209962/ben-marini", 
        "display_name": "Ben Marini"
      }, 
      "is_accepted": false, 
      "answer_id": 1919497
    }, 
    {
      "body": "<p>A ruby version based on @Svante's algorithm.   Runs ~3x as fast as my first one.</p>\n\n<pre><code> def common_prefix set \n   i=0\n   rest=set[1..-1]\n   set[0].each_byte{|c|\n     rest.each{|e|return set[0][0...i] if e[i]!=c}\n     i+=1\n   }\n   set\n end\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1261023565, 
      "creation_date": 1261023565, 
      "score": 0, 
      "owner": {
        "user_id": 10396, 
        "profile_image": "https://www.gravatar.com/avatar/ddbfebb47432f6599da361df6a135c7c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 18308, 
        "link": "http://stackoverflow.com/users/10396/ashelly", 
        "accept_rate": 79, 
        "display_name": "AShelly"
      }, 
      "is_accepted": false, 
      "answer_id": 1919431
    }, 
    {
      "body": "<p>In Python I wouldn't use anything but <a href=\"#1916632\" rel=\"nofollow\">the existing <code>commonprefix</code> function I showed in another answer</a>, but I couldn't help to reinvent the wheel <code>:P</code>. This is my iterator-based approach:</p>\n\n<pre><code>&gt;&gt;&gt; a = 'interspecies interstelar interstate'.split()\n&gt;&gt;&gt;\n&gt;&gt;&gt; from itertools import takewhile, chain, izip as zip, imap as map\n&gt;&gt;&gt; ''.join(chain(*takewhile(lambda s: len(s) == 1, map(set, zip(*a)))))\n'inters'\n</code></pre>\n\n<p><strong>Edit:</strong> Explanation of how this works.</p>\n\n<p><code>zip</code> generates tuples of elements taking one of each item of <code>a</code> at a time:</p>\n\n<pre><code>In [6]: list(zip(*a))  # here I use list() to expand the iterator\nOut[6]:\n[('i', 'i', 'i'),\n ('n', 'n', 'n'),\n ('t', 't', 't'),\n ('e', 'e', 'e'),\n ('r', 'r', 'r'),\n ('s', 's', 's'),\n ('p', 't', 't'),\n ('e', 'e', 'a'),\n ('c', 'l', 't'),\n ('i', 'a', 'e')]\n</code></pre>\n\n<p>By mapping <code>set</code> over these items, I get a series of unique letters:</p>\n\n<pre><code>In [7]: list(map(set, _))  # _ means the result of the last statement above\nOut[7]:\n[set(['i']),\n set(['n']),\n set(['t']),\n set(['e']),\n set(['r']),\n set(['s']),\n set(['p', 't']),\n set(['a', 'e']),\n set(['c', 'l', 't']),\n set(['a', 'e', 'i'])]\n</code></pre>\n\n<p><code>takewhile(predicate, items)</code> takes elements from this while the predicate is True; in this particular case, when the <code>set</code>s have one element, i.e. all the words have the same letter at that position:</p>\n\n<pre><code>In [8]: list(takewhile(lambda s: len(s) == 1, _))\nOut[8]:\n[set(['i']),\n set(['n']), \n set(['t']), \n set(['e']), \n set(['r']), \n set(['s'])]\n</code></pre>\n\n<p>At this point we have an iterable of sets, each containing one letter of the prefix we were looking for. To construct the string, we <code>chain</code> them into a single iterable, from which we get the letters to <code>join</code> into the final string.</p>\n\n<p>The magic of using iterators is that all items are generated on demand, so when <code>takewhile</code> stops asking for items, the zipping stops at that point and no unnecessary work is done. Each function call in my one-liner has a implicit <code>for</code> and an implicit <code>break</code>.</p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1261009727, 
      "creation_date": 1260990135, 
      "score": 4, 
      "owner": {
        "user_id": 13169, 
        "profile_image": "https://www.gravatar.com/avatar/5986747b5b748191ff78064865e3a062?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 7171, 
        "link": "http://stackoverflow.com/users/13169/roberto-bonvallet", 
        "accept_rate": 80, 
        "display_name": "Roberto Bonvallet"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1261009727, 
      "answer_id": 1916894
    }, 
    {
      "body": "<p>You just need to traverse all strings until they differ, then take the substring up to this point.</p>\n\n<p>Pseudocode:</p>\n\n<pre><code>loop for i upfrom 0\n     while all strings[i] are equal\n     finally return substring[0..i]\n</code></pre>\n\n<p>Common Lisp:</p>\n\n<pre><code>(defun longest-common-starting-substring (&amp;rest strings)\n  (loop for i from 0 below (apply #'min (mapcar #'length strings))\n     while (apply #'char=\n                  (mapcar (lambda (string) (aref string i))\n                          strings))\n     finally (return (subseq (first strings) 0 i))))\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260996588, 
      "creation_date": 1260986540, 
      "score": 8, 
      "owner": {
        "user_id": 31615, 
        "profile_image": "https://www.gravatar.com/avatar/1127d0098e693682f382758abd9f6c76?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 26663, 
        "link": "http://stackoverflow.com/users/31615/svante", 
        "display_name": "Svante"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1260996588, 
      "answer_id": 1916492
    }, 
    {
      "body": "<p>It's not code golf, but you asked for somewhat elegant, and I tend to think recursion is fun.  Java.</p>\n\n<pre><code>/** Recursively find the common prefix. */\npublic String findCommonPrefix(String[] strings) {\n\n    int minLength = findMinLength(strings);\n\n    if (isFirstCharacterSame(strings)) {\n    \treturn strings[0].charAt(0) + findCommonPrefix(removeFirstCharacter(strings));\n    } else {\n    \treturn \"\";\n    }\n}\n\n/** Get the minimum length of a string in strings[]. */\nprivate int findMinLength(final String[] strings) {\n    int length = strings[0].size();\n    for (String string : strings) {\n    \tif (string.size() &lt; length) {\n    \t\tlength = string.size();\n    \t}\n    }\n    return length;\n}\n\n/** Compare the first character of all strings. */\nprivate boolean isFirstCharacterSame(String[] strings) {\n    char c = string[0].charAt(0);\n    for (String string : strings) {\n    \tif (c != string.charAt(0)) return false;\n    }\n\n    return true;\n}\n\n/** Remove the first character of each string in the array, \n    and return a new array with the results. */\nprivate String[] removeFirstCharacter(String[] source) {\n    String[] result = new String[source.length];\n    for (int i=0; i&lt;result.length; i++) {\n    \tresult[i] = source[i].substring(1);\t\n    }\n    return result;\n}\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260991860, 
      "creation_date": 1260991860, 
      "score": 0, 
      "owner": {
        "user_id": 182690, 
        "profile_image": "https://www.gravatar.com/avatar/de893f8241f722520a6fd3a967733ef7?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 11855, 
        "link": "http://stackoverflow.com/users/182690/dean-j", 
        "accept_rate": 88, 
        "display_name": "Dean J"
      }, 
      "is_accepted": false, 
      "answer_id": 1917076
    }, 
    {
      "body": "<p>This is by no means elegant, but if you want concise:</p>\n\n<h2>Ruby, 71 chars</h2>\n\n<pre><code>def f(a)b=a[0];b[0,(0..b.size).find{|n|a.any?{|i|i[0,n]!=b[0,n]}}-1]end\n</code></pre>\n\n<p>If you want that unrolled it looks like this:</p>\n\n<pre><code>def f(words)\n  first_word = words[0];\n  first_word[0, (0..(first_word.size)).find { |num_chars|\n    words.any? { |word| word[0, num_chars] != first_word[0, num_chars] }\n  } - 1]\nend\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260991500, 
      "creation_date": 1260986368, 
      "score": 0, 
      "owner": {
        "user_id": 179125, 
        "profile_image": "https://www.gravatar.com/avatar/5594142dcc49a24b1902ec8059181f8d?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 31145, 
        "link": "http://stackoverflow.com/users/179125/jordan", 
        "display_name": "Jordan"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1260991500, 
      "answer_id": 1916475
    }, 
    {
      "body": "<p>Javascript clone of <a href=\"http://stackoverflow.com/questions/1916218/find-the-longest-common-starting-substring-in-a-set-of-strings/1916480#1916480\">AShelly</a>'s excellent answer. </p>\n\n<p>Requires <code>Array#reduce</code> which is supported only in firefox.</p>\n\n<pre><code>var strings = [\"interspecies\", \"intermediate\", \"interrogation\"]\nvar sub = strings.reduce(function(l,r) { \n    while(l!=r.slice(0,l.length)) {  \n        l = l.slice(0, -1);\n    }\n    return l;\n});\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260990570, 
      "creation_date": 1260990570, 
      "score": 0, 
      "owner": {
        "user_id": 31284, 
        "profile_image": "https://www.gravatar.com/avatar/6b9cbeb13ef278e991f9e1893ba83f56?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 15444, 
        "link": "http://stackoverflow.com/users/31284/chetan-sastry", 
        "display_name": "Chetan Sastry"
      }, 
      "is_accepted": false, 
      "answer_id": 1916926
    }, 
    {
      "body": "<p>I would do the following:</p>\n\n<ol>\n<li>Take the first string of the array as the initial <em>starting substring</em>.</li>\n<li>Take the next string of the array and compare the characters until the end of one of the strings is reached or a mismatch is found. If a mismatch is found, reduce <em>starting substring</em> to the length where the mismatch was found.</li>\n<li>Repeat step 2 until all strings have been tested.</li>\n</ol>\n\n<p>Here\u2019s a JavaScript implementation:</p>\n\n<pre><code>var array = [\"interspecies\", \"interstelar\", \"interstate\"],\n    prefix = array[0],\n    len = prefix.length;\nfor (i=1; i&lt;array.length; i++) {\n    for (j=0, len=Math.min(len,array[j].length); j&lt;len; j++) {\n        if (prefix[j] != array[i][j]) {\n            len = j;\n            prefix = prefix.substr(0, len);\n            break;\n        }\n    }\n}\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260989347, 
      "creation_date": 1260987488, 
      "score": 1, 
      "owner": {
        "user_id": 53114, 
        "profile_image": "https://www.gravatar.com/avatar/229a1cdc3aab580b63feca9a4bdcc54d?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 300556, 
        "link": "http://stackoverflow.com/users/53114/gumbo", 
        "accept_rate": 45, 
        "display_name": "Gumbo"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1260989347, 
      "answer_id": 1916601
    }, 
    {
      "body": "<p>Doesn't seem that complicated if you're not too concerned about ultimate performance:</p>\n\n<pre><code>def common_substring(data)\n  data.inject { |m, s| s[0,(0..m.length).find { |i| m[i] != s[i] }.to_i] }\nend\n</code></pre>\n\n<p>One of the useful features of inject is the ability to pre-seed with the first element of the array being interated over. This avoids the nil memo check.</p>\n\n<pre><code>puts common_substring(%w[ interspecies interstelar interstate ]).inspect\n# =&gt; \"inters\"\nputs common_substring(%w[ feet feel feeble ]).inspect\n# =&gt; \"fee\"\nputs common_substring(%w[ fine firkin fail ]).inspect\n# =&gt; \"f\"\nputs common_substring(%w[ alpha bravo charlie ]).inspect\n# =&gt; \"\"\nputs common_substring(%w[ fork ]).inspect\n# =&gt; \"fork\"\nputs common_substring(%w[ fork forks ]).inspect\n# =&gt; \"fork\"\n</code></pre>\n\n<p><em>Update:</em> If golf is the game here, then 67 characters:</p>\n\n<pre><code>def f(d)d.inject{|m,s|s[0,(0..m.size).find{|i|m[i]!=s[i]}.to_i]}end\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260989091, 
      "creation_date": 1260986302, 
      "score": 2, 
      "owner": {
        "user_id": 87189, 
        "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 77685, 
        "link": "http://stackoverflow.com/users/87189/tadman", 
        "accept_rate": 100, 
        "display_name": "tadman"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1260989091, 
      "answer_id": 1916471
    }, 
    {
      "body": "<p>In Python:</p>\n\n<pre><code>&gt;&gt;&gt; from os.path import commonprefix\n&gt;&gt;&gt; commonprefix('interspecies interstelar interstate'.split())\n'inters'\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260987768, 
      "creation_date": 1260987768, 
      "score": 34, 
      "owner": {
        "user_id": 13169, 
        "profile_image": "https://www.gravatar.com/avatar/5986747b5b748191ff78064865e3a062?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 7171, 
        "link": "http://stackoverflow.com/users/13169/roberto-bonvallet", 
        "accept_rate": 80, 
        "display_name": "Roberto Bonvallet"
      }, 
      "is_accepted": false, 
      "answer_id": 1916632
    }, 
    {
      "body": "<p>Here's a solution using regular expressions in Ruby:</p>\n\n<pre><code>def build_regex(string)\n  arr = []\n  arr &lt;&lt; string.dup while string.chop!\n  Regexp.new(\"^(#{arr.join(\"|\")})\")\nend\n\ndef substring(first, *strings)\n  strings.inject(first) do |accum, string|\n    build_regex(accum).match(string)[0]\n  end\nend\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260987418, 
      "creation_date": 1260985659, 
      "score": 1, 
      "owner": {
        "user_id": 122162, 
        "profile_image": "https://www.gravatar.com/avatar/428167a3ec72235ba971162924492609?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 19471, 
        "link": "http://stackoverflow.com/users/122162/yehuda-katz", 
        "accept_rate": 80, 
        "display_name": "Yehuda Katz"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1260987418, 
      "answer_id": 1916398
    }, 
    {
      "body": "<pre><code>Python 2.6 (r26:66714, Oct  4 2008, 02:48:43) \n\n&gt;&gt;&gt; a = ['interspecies', 'interstelar', 'interstate']\n\n&gt;&gt;&gt; print a[0][:max(\n        [i for i in range(min(map(len, a))) \n            if len(set(map(lambda e: e[i], a))) == 1]\n        ) + 1]\n\ninters\n</code></pre>\n\n<ul>\n<li><p><code>i for i in range(min(map(len, a)))</code>, number of maximum lookups can't be greater than the length of the shortest string; in this example this would evaluate to <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></p></li>\n<li><p><code>len(set(map(lambda e: e[i], a)))</code>, 1) create an array of the <code>i-th</code>character for each string in the list; 2) make a set out of it; 3) determine the size of the set</p></li>\n<li><p><code>[i for i in range(min(map(len, a))) if len(set(map(lambda e: e[i], a))) == 1]</code>, include just the characters, for which the size of the set is 1 (all characters at that position were the same ..); here it would evaluate to <code>[0, 1, 2, 3, 4, 5]</code></p></li>\n<li><p>finally take the <code>max</code>, add one, and get the substring ...</p></li>\n</ul>\n\n<p>Note: the above does not work for <code>a = ['intersyate', 'intersxate', 'interstate', 'intersrate']</code>, but this would:</p>\n\n<pre><code> &gt;&gt;&gt; index = len(\n         filter(lambda l: l[0] == l[1], \n             [ x for x in enumerate(\n                 [i for i in range(min(map(len, a))) \n                     if len(set(map(lambda e: e[i], a))) == 1]\n         )]))\n &gt;&gt;&gt; a[0][:index]\n inters\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260987060, 
      "creation_date": 1260985398, 
      "score": 2, 
      "owner": {
        "user_id": 89391, 
        "profile_image": "https://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 68884, 
        "link": "http://stackoverflow.com/users/89391/miku", 
        "accept_rate": 77, 
        "display_name": "miku"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1260987060, 
      "answer_id": 1916373
    }, 
    {
      "body": "<p>Ruby one-liner:</p>\n\n<pre><code>l=strings.inject{|l,s| l=l.chop while l!=s[0...l.length];l}\n</code></pre>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260986444, 
      "creation_date": 1260986444, 
      "score": 8, 
      "owner": {
        "user_id": 10396, 
        "profile_image": "https://www.gravatar.com/avatar/ddbfebb47432f6599da361df6a135c7c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 18308, 
        "link": "http://stackoverflow.com/users/10396/ashelly", 
        "accept_rate": 79, 
        "display_name": "AShelly"
      }, 
      "is_accepted": false, 
      "answer_id": 1916480
    }, 
    {
      "body": "<p>This is probably not the most concise solution (depends if you already have a library for this), but one elegant method is to use a trie. I use tries for implementing tab completion in my Scheme interpreter:</p>\n\n<p><a href=\"http://github.com/jcoglan/heist/blob/master/lib/trie.rb\" rel=\"nofollow\">http://github.com/jcoglan/heist/blob/master/lib/trie.rb</a></p>\n\n<p>For example:</p>\n\n<pre><code>tree = Trie.new\n%w[interspecies interstelar interstate].each { |s| tree[s] = true }\ntree.longest_prefix('')\n#=&gt; \"inters\"\n</code></pre>\n\n<p>I also use them for matching channel names with wildcards for the Bayeux protocol; see these:</p>\n\n<p><a href=\"http://github.com/jcoglan/faye/blob/master/client/channel.js\" rel=\"nofollow\">http://github.com/jcoglan/faye/blob/master/client/channel.js</a></p>\n\n<p><a href=\"http://github.com/jcoglan/faye/blob/master/lib/faye/channel.rb\" rel=\"nofollow\">http://github.com/jcoglan/faye/blob/master/lib/faye/channel.rb</a></p>\n", 
      "question_id": 1916218, 
      "last_activity_date": 1260985922, 
      "creation_date": 1260985922, 
      "score": 3, 
      "owner": {
        "user_id": 3424, 
        "profile_image": "https://www.gravatar.com/avatar/81eec7f220df03d5b8cadf106a2c14c5?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1643, 
        "link": "http://stackoverflow.com/users/3424/jcoglan", 
        "display_name": "jcoglan"
      }, 
      "is_accepted": false, 
      "answer_id": 1916416
    }
  ], 
  "287871": [
    {
      "body": "<p>This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some python code from the <a href=\"https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py\">blender build scripts</a>:</p>\n\n<pre><code>class bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n</code></pre>\n\n<p>To use code like this, you can do something like </p>\n\n<pre><code>print bcolors.WARNING + \"Warning: No active frommets remain. Continue?\" \n      + bcolors.ENDC\n</code></pre>\n\n<p>This will work on unixes including OS X, linux and windows (provided you <a href=\"http://support.microsoft.com/kb/101875\">enable ansi.sys</a>). There are ansi codes for setting the color, moving the cursor, and more.</p>\n\n<p>If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the \"curses\" module, which handles a lot of the complicated parts of this for you. The <a href=\"http://docs.python.org/howto/curses.html\">Python Curses HowTO</a> is a good introduction.</p>\n\n<p>If you are not using extended ASCII (i.e. not on a PC), you are stuck with the ascii characters below 127, and '#' or '@' is probably your best bet for a block. If you can ensure your terminal is using a IBM <a href=\"http://telecom.tbi.net/asc-ibm.html\">extended ascii character set</a>, you have many more options. Characters 176, 177, 178 and 219 are the \"block characters\".</p>\n\n<p>Some modern text-based programs, such as \"Dwarf Fortress\", emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the <a href=\"http://dwarffortresswiki.org/DF2014:Tilesets\">Dwarf Fortress Wiki</a> see (<a href=\"http://dwarffortresswiki.org/Tileset_repository\">user-made tilesets</a>).</p>\n\n<p>The <a href=\"http://en.wikipedia.org/wiki/TMDC\">Text Mode Demo Contest</a> has more resources for doing graphics in text mode.</p>\n\n<p>Hmm.. I think got a little carried away on this answer. I am in the midst of planning an epic text-based adventure game, though. Good luck with your colored text!</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1420468735, 
      "creation_date": 1226604307, 
      "score": 494, 
      "owner": {
        "user_id": 19104, 
        "profile_image": "https://www.gravatar.com/avatar/8720289444c77047c986102192da5edc?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 6567, 
        "link": "http://stackoverflow.com/users/19104/joeld", 
        "display_name": "joeld"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1420468735, 
      "answer_id": 287944
    }, 
    {
      "body": "<p>I use the colorama module for coloured terminal printing in Python. A link is here <a href=\"http://pypi.python.org/pypi/colorama\" rel=\"nofollow\">http://pypi.python.org/pypi/colorama</a></p>\n\n<p>Some example code of printing red and green text:</p>\n\n<pre><code>from colorama import *\n\nprint(Fore.GREEN + 'Green text')\nprint(Fore.RED + 'Red text')\n</code></pre>\n\n<p>I used colorama to write a basic Matrix program</p>\n\n<p>Installation on Ubuntu (your distribution install command may be different)</p>\n\n<pre><code>sudo apt-get install python-pip\nsudo pip install colorama\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1418915031, 
      "creation_date": 1379075090, 
      "score": 7, 
      "owner": {
        "user_id": 2776359, 
        "profile_image": "https://www.gravatar.com/avatar/a3db2792b34407148e4dc7b456e49509?s=128&d=identicon&r=PG&f=1", 
        "user_type": "registered", 
        "reputation": 83, 
        "link": "http://stackoverflow.com/users/2776359/johnny", 
        "display_name": "Johnny"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1418915031, 
      "answer_id": 18786263
    }, 
    {
      "body": "<p>You can use shell escape characters, that are available from any language.\nThese escape characters start with the ESC character followed by a number of arguments.</p>\n\n<p>For example to output a red <code>Hello world</code> string in your terminal:</p>\n\n<p><code>\necho \"\\e[31m Hello world \\e[0m\"\n</code></p>\n\n<p>Or from a python script:</p>\n\n<p><code>\nprint \"\\e[31m Hello world \\e[0m\"\n</code></p>\n\n<p>Also, I wrote an article about <a href=\"http://shiroyasha.github.io/escape-sequences-a-quick-guide.html\" rel=\"nofollow\">Escape sequences</a> that can probably help you get a better grasp of this mechanism. I hope it will help you.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1417455307, 
      "creation_date": 1417455307, 
      "score": 0, 
      "owner": {
        "user_id": 364938, 
        "profile_image": "https://www.gravatar.com/avatar/558ea1f66cb437936d74c8e447bc3f43?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 456, 
        "link": "http://stackoverflow.com/users/364938/igor-%c5%a0ar%c4%8devi%c4%87", 
        "accept_rate": 20, 
        "display_name": "Igor \u0160ar\u010devi\u0107"
      }, 
      "is_accepted": false, 
      "answer_id": 27233961
    }, 
    {
      "body": "<p>I wrote a module that handles colors in Linux/OSX/Windows. It supports all 16 colors on all platforms, you can set foreground and background colors at different times, and the string objects give sane results for things like len() and .capitalize().</p>\n\n<p><a href=\"https://github.com/Robpol86/colorclass\" rel=\"nofollow\">https://github.com/Robpol86/colorclass</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/j7EjM.png\" alt=\"example on Windows cmd.exe\"></p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1414892674, 
      "creation_date": 1414892674, 
      "score": 1, 
      "owner": {
        "user_id": 1198943, 
        "profile_image": "https://www.gravatar.com/avatar/5acddd4950fc0a928a39562c62b5da16?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 161, 
        "link": "http://stackoverflow.com/users/1198943/robpol86", 
        "display_name": "Robpol86"
      }, 
      "is_accepted": false, 
      "answer_id": 26695185
    }, 
    {
      "body": "<p>generated a class with all the colors using a for loop to iterate every combination of color up to 100, then wrote a class with python colors. Copy and paste as you will, GPLv2 by me:</p>\n\n<pre><code>class colors:\n'''Colors class:\n    reset all colors with colors.reset\n    two subclasses fg for foreground and bg for background.\n    use as colors.subclass.colorname.\n    i.e. colors.fg.red or colors.bg.green\n    also, the generic bold, disable, underline, reverse, strikethrough,\n    and invisible work with the main class\n    i.e. colors.bold\n'''\n    reset='\\033[0m'\n    bold='\\033[01m'\n    disable='\\033[02m'\n    underline='\\033[04m'\n    reverse='\\033[07m'\n    strikethrough='\\033[09m'\n    invisible='\\033[08m'\n    class fg:\n        black='\\033[30m'\n        red='\\033[31m'\n        green='\\033[32m'\n        orange='\\033[33m'\n        blue='\\033[34m'\n        purple='\\033[35m'\n        cyan='\\033[36m'\n        lightgrey='\\033[37m'\n        darkgrey='\\033[90m'\n        lightred='\\033[91m'\n        lightgreen='\\033[92m'\n        yellow='\\033[93m'\n        lightblue='\\033[94m'\n        pink='\\033[95m'\n        lightcyan='\\033[96m'\n    class bg:\n        black='\\033[40m'\n        red='\\033[41m'\n        green='\\033[42m'\n        orange='\\033[43m'\n        blue='\\033[44m'\n        purple='\\033[45m'\n        cyan='\\033[46m'\n        lightgrey='\\033[47m'\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1413674765, 
      "creation_date": 1413674765, 
      "score": 2, 
      "owner": {
        "user_id": 4157799, 
        "profile_image": "https://www.gravatar.com/avatar/501f96159f79f61cfac3ed57279d670e?s=128&d=identicon&r=PG", 
        "user_type": "unregistered", 
        "reputation": 31, 
        "link": "http://stackoverflow.com/users/4157799/gi-jack", 
        "display_name": "GI Jack"
      }, 
      "is_accepted": false, 
      "answer_id": 26445590
    }, 
    {
      "body": "<p>Run <code>pip install ipython</code> and add <code>alias python=\"ipython\"</code> to your shell startup script (e.g. <code>~/.bashrc</code> for bash shell).</p>\n\n<p>ipython is a coloured python interpreter!</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1405351476, 
      "creation_date": 1405351476, 
      "score": 0, 
      "owner": {
        "user_id": 2880212, 
        "profile_image": "http://i.stack.imgur.com/v75C9.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 388, 
        "link": "http://stackoverflow.com/users/2880212/alexandre-holden-daly", 
        "accept_rate": 67, 
        "display_name": "Alexandre Holden Daly"
      }, 
      "is_accepted": false, 
      "answer_id": 24740049
    }, 
    {
      "body": "<p>This gives table of format options for shell text:</p>\n\n<pre><code>def print_format_table():\n    \"\"\"\n    prints table of formatted text format options\n    \"\"\"\n    for style in xrange(8):\n        for fg in xrange(30,38):\n            s1 = ''\n            for bg in xrange(40,48):\n                format = ';'.join([str(style), str(fg), str(bg)])\n                s1 += '\\x1b[%sm %s \\x1b[0m' % (format, format)\n            print s1\n        print '\\n'\n\nprint_format_table()\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/lZr23.png\" alt=\"top part of output\"></p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1392400598, 
      "creation_date": 1392400598, 
      "score": 12, 
      "owner": {
        "user_id": 2112485, 
        "profile_image": "https://www.gravatar.com/avatar/d2aced5a111837852dcb2caf1823ba01?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 475, 
        "link": "http://stackoverflow.com/users/2112485/rabin-utam", 
        "accept_rate": 50, 
        "display_name": "rabin utam"
      }, 
      "is_accepted": false, 
      "answer_id": 21786287
    }, 
    {
      "body": "<p>My two cents (<a href=\"https://github.com/dnmellen/pycolorterm\" rel=\"nofollow\">PyColorTerm</a>):</p>\n\n<p>Installation:</p>\n\n<pre><code>sudo apt-get install python-pip\npip install pycolorterm\n</code></pre>\n\n<p>Python script:</p>\n\n<pre><code>from pycolorterm import pycolorterm\n\nwith pycolorterm.pretty_output(pycolorterm.FG_GREEN) as out:\n    out.write('Works OK!')\n</code></pre>\n\n<p>\"works OK!\" shows in green.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1386487057, 
      "creation_date": 1379700372, 
      "score": 1, 
      "owner": {
        "user_id": 933059, 
        "profile_image": "https://www.gravatar.com/avatar/9626f5e50220c1304999f93848d42af3?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3045, 
        "link": "http://stackoverflow.com/users/933059/diego-navarro", 
        "accept_rate": 100, 
        "display_name": "Diego Navarro"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1386487057, 
      "answer_id": 18923126
    }, 
    {
      "body": "<p>I have wrapped @joeld answer into a module with global functions that I can use anywhere in my code.</p>\n\n<p>file: log.py     </p>\n\n<pre><code>HEADER = '\\033[95m'\nOKBLUE = '\\033[94m'\nOKGREEN = '\\033[92m'\nWARNING = '\\033[93m'\nFAIL = '\\033[91m'\nENDC = '\\033[0m'\nBOLD = \"\\033[1m\"\n\ndef disable():\n    HEADER = ''\n    OKBLUE = ''\n    OKGREEN = ''\n    WARNING = ''\n    FAIL = ''\n    ENDC = ''\n\ndef infog( msg):\n    print OKGREEN + msg + ENDC\n\ndef info( msg):\n    print OKBLUE + msg + ENDC\n\ndef warn( msg):\n    print WARNING + msg + ENDC\n\ndef err( msg):\n    print FAIL + msg + ENDC\n</code></pre>\n\n<p>use as follows:</p>\n\n<pre><code> import log\n    log.info(\"Hello World\")\n    log.err(\"System Error\")\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1371037081, 
      "creation_date": 1371037081, 
      "score": 12, 
      "owner": {
        "user_id": 1364048, 
        "profile_image": "http://i.stack.imgur.com/2JUGJ.png?s=128&g=1", 
        "user_type": "registered", 
        "reputation": 196, 
        "link": "http://stackoverflow.com/users/1364048/mohamed-samy", 
        "display_name": "Mohamed Samy"
      }, 
      "is_accepted": false, 
      "answer_id": 17064509
    }, 
    {
      "body": "<p><a href=\"https://raw.github.com/fabric/fabric/master/fabric/colors.py\">https://raw.github.com/fabric/fabric/master/fabric/colors.py</a></p>\n\n<pre><code>\"\"\"\n.. versionadded:: 0.9.2\n\nFunctions for wrapping strings in ANSI color codes.\n\nEach function within this module returns the input string ``text``, wrapped\nwith ANSI color codes for the appropriate color.\n\nFor example, to print some text as green on supporting terminals::\n\n    from fabric.colors import green\n\n    print(green(\"This text is green!\"))\n\nBecause these functions simply return modified strings, you can nest them::\n\n    from fabric.colors import red, green\n\n    print(red(\"This sentence is red, except for \" + \\\n          green(\"these words, which are green\") + \".\"))\n\nIf ``bold`` is set to ``True``, the ANSI flag for bolding will be flipped on\nfor that particular invocation, which usually shows up as a bold or brighter\nversion of the original color on most terminals.\n\"\"\"\n\n\ndef _wrap_with(code):\n\n    def inner(text, bold=False):\n        c = code\n        if bold:\n            c = \"1;%s\" % c\n        return \"\\033[%sm%s\\033[0m\" % (c, text)\n    return inner\n\nred = _wrap_with('31')\ngreen = _wrap_with('32')\nyellow = _wrap_with('33')\nblue = _wrap_with('34')\nmagenta = _wrap_with('35')\ncyan = _wrap_with('36')\nwhite = _wrap_with('37')\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1364332520, 
      "creation_date": 1364332520, 
      "score": 7, 
      "owner": {
        "user_id": 197473, 
        "profile_image": "https://www.gravatar.com/avatar/286ce03873ad44108e4e7af34a9b59dc?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4943, 
        "link": "http://stackoverflow.com/users/197473/vishal", 
        "accept_rate": 61, 
        "display_name": "Vishal"
      }, 
      "is_accepted": false, 
      "answer_id": 15647557
    }, 
    {
      "body": "<p>If you are using Windows, then here you go!</p>\n\n<pre><code># display text on a Windows console\n# Windows XP with Python27 or Python32\nfrom ctypes import windll\n# needed for Python2/Python3 diff\ntry:\n    input = raw_input\nexcept:\n    pass\nSTD_OUTPUT_HANDLE = -11\nstdout_handle = windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\n# look at the output and select the color you want\n# for instance hex E is yellow on black\n# hex 1E is yellow on blue\n# hex 2E is yellow on green and so on\nfor color in range(0, 75):\n     windll.kernel32.SetConsoleTextAttribute(stdout_handle, color)\n     print(\"%X --&gt; %s\" % (color, \"Have a fine day!\"))\n     input(\"Press Enter to go on ... \")\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1364145555, 
      "creation_date": 1340643579, 
      "score": 6, 
      "owner": {
        "user_id": 1422157, 
        "profile_image": "https://www.gravatar.com/avatar/ae513704b2a38dcc818d56e762596a11?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 100, 
        "link": "http://stackoverflow.com/users/1422157/navweb", 
        "display_name": "Navweb"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1364145555, 
      "answer_id": 11193790
    }, 
    {
      "body": "<p>If you are programming a game perhaps you would like to change the background color and use only spaces? For example:</p>\n\n<pre><code>print \" \"+ \"\\033[01;41m\" + \" \" +\"\\033[01;46m\"  + \"  \" + \"\\033[01;42m\"\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1364145118, 
      "creation_date": 1226605137, 
      "score": 8, 
      "owner": {
        "link": "http://stackoverflow.com/users/37437/suhib-alsisan", 
        "display_name": "suhib-alsisan", 
        "reputation": 81, 
        "user_id": 37437, 
        "user_type": "registered"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1364145118, 
      "answer_id": 287987
    }, 
    {
      "body": "<p>You could use <a href=\"http://www.nicosphere.net/clint-command-line-library-for-python/\" rel=\"nofollow\">CLINT</a>:</p>\n\n<pre><code>from clint.textui import colored\nprint colored.red('some warning message')\nprint colored.green('nicely done!')\n</code></pre>\n\n<p><a href=\"https://github.com/kennethreitz/clint\" rel=\"nofollow\">Get it from GitHub</a>.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1364144960, 
      "creation_date": 1325986835, 
      "score": 9, 
      "owner": {
        "user_id": 1129851, 
        "profile_image": "https://www.gravatar.com/avatar/8d6047e2746cf1c12d0fe8042e07372c?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 953, 
        "link": "http://stackoverflow.com/users/1129851/giacomo-lacava", 
        "accept_rate": 80, 
        "display_name": "Giacomo Lacava"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1364144960, 
      "answer_id": 8774709
    }, 
    {
      "body": "<p>note how well the <code>with</code> keyword mixes with modifiers like these that need to be reset (using Python 3 and Colorama):</p>\n\n<pre><code>from colorama import Fore, Style\nimport sys\n\nclass Highlight:\n  def __init__(self, clazz, color):\n    self.color = color\n    self.clazz = clazz\n  def __enter__(self):\n    print(self.color, end=\"\")\n  def __exit__(self, type, value, traceback):\n    if self.clazz == Fore:\n      print(Fore.RESET, end=\"\")\n    else:\n      assert self.clazz == Style\n      print(Style.RESET_ALL, end=\"\")\n    sys.stdout.flush()\n\nwith Highlight(Fore, Fore.GREEN):\n  print(\"this is highlighted\")\nprint(\"this is not\")\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1358628106, 
      "creation_date": 1341103300, 
      "score": 9, 
      "owner": {
        "user_id": 309483, 
        "profile_image": "https://www.gravatar.com/avatar/d797538504a367f277d19bd8369e9a19?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5809, 
        "link": "http://stackoverflow.com/users/309483/janus-troelsen", 
        "accept_rate": 91, 
        "display_name": "Janus Troelsen"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1358628106, 
      "answer_id": 11278750
    }, 
    {
      "body": "<p>You can try <a href=\"https://github.com/broadinstitute/xtermcolor\" rel=\"nofollow\">https://github.com/broadinstitute/xtermcolor</a></p>\n\n<p>It can only use xterm based terminals but can use RGB colors.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1354460019, 
      "creation_date": 1354460019, 
      "score": 0, 
      "owner": {
        "user_id": 1827457, 
        "profile_image": "https://www.gravatar.com/avatar/36a4fa28b2cfce2c219592f7880e4008?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 2982, 
        "link": "http://stackoverflow.com/users/1827457/ltworf", 
        "accept_rate": 82, 
        "display_name": "LtWorf"
      }, 
      "is_accepted": false, 
      "answer_id": 13670405
    }, 
    {
      "body": "<p>To address this problem I created a mind-numbingly simple package to print strings with interpolated color codes, called <a href=\"https://github.com/brianmhunt/icolor\" rel=\"nofollow\">icolor</a>.</p>\n\n<p>icolor includes two functions: <code>cformat</code> and <code>cprint</code>, each of which takes a string with substrings that are interpolated to map to ANSI escape sequences e.g.</p>\n\n<pre><code>from icolor import cformat # there is also cprint\n\ncformat(\"This is #RED;a red string, partially with a #xBLUE;blue background\")\n'This is \\x1b[31ma red string, partially with a \\x1b[44mblue background\\x1b[0m'\n</code></pre>\n\n<p>All the ANSI colors are included (e.g. <code>#RED;</code>, <code>#BLUE;</code>, etc.), as well as <code>#RESET;</code>, <code>#BOLD;</code> and others.</p>\n\n<p>Background colors have an <code>x</code> prefix, so a green background would be <code>#xGREEN;</code>.</p>\n\n<p>One can escape <code>#</code> with <code>##</code>.</p>\n\n<p>Given its simplicity, the best documentation is probably <a href=\"https://github.com/brianmhunt/icolor/blob/master/icolor.py\" rel=\"nofollow\">the code itself</a>.</p>\n\n<p>It is <a href=\"http://pypi.python.org/pypi/icolor/1.0\" rel=\"nofollow\">on PYPI</a>, so one can <code>sudo easy_install icolor</code>.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1340584504, 
      "creation_date": 1340550469, 
      "score": 0, 
      "owner": {
        "user_id": 19212, 
        "profile_image": "https://www.gravatar.com/avatar/3aefe160da30caa0d7ea0f922f94c257?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 15196, 
        "link": "http://stackoverflow.com/users/19212/brian-m-hunt", 
        "accept_rate": 85, 
        "display_name": "Brian M. Hunt"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1340584504, 
      "answer_id": 11178541
    }, 
    {
      "body": "<p>My favorite way is with the <a href=\"http://pypi.python.org/pypi/blessings/\">Blessings</a> library (full disclosure: I wrote it). For example:</p>\n\n<pre><code>from blessings import Terminal\n\nt = Terminal()\nprint t.red('This is red.')\nprint t.bold_bright_red_on_black('Bright red on black')\n</code></pre>\n\n<p>To print colored bricks, the most reliable way is to print spaces with background colors. I use this technique to draw the progress bar in <a href=\"http://pypi.python.org/pypi/nose-progressive/\">nose-progressive</a>:</p>\n\n<pre><code>print t.on_green(' ')\n</code></pre>\n\n<p>You can print in specific locations as well:</p>\n\n<pre><code>with t.location(0, 5):\n    print t.on_yellow(' ')\n</code></pre>\n\n<p>If you have to muck with other terminal capabilities in the course of your game, you can do that as well. You can use Python's standard string formatting to keep it readable:</p>\n\n<pre><code>print '{t.clear_eol}You just cleared a {t.bold}whole{t.normal} line!'.format(t=t)\n</code></pre>\n\n<p>The nice thing about Blessings is that it does its best to work on all sorts of terminals, not just the (overwhelmingly common) ANSI-color ones. It also keeps unreadable escape sequences out of your code while remaining concise to use. Have fun!</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1324168369, 
      "creation_date": 1324168369, 
      "score": 33, 
      "owner": {
        "user_id": 171721, 
        "profile_image": "https://www.gravatar.com/avatar/a49213ed4eaa8d773659cc507e439d6b?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 331, 
        "link": "http://stackoverflow.com/users/171721/erik-rose", 
        "display_name": "Erik Rose"
      }, 
      "is_accepted": false, 
      "answer_id": 8548994
    }, 
    {
      "body": "<h2>For the characters</h2>\n\n<p>Your terminal most probably uses Unicode (typically UTF-8 encoded) characters, so it's only a matter of the appropriate font selection to see your favorite character. Unicode char U+2588, \"Full block\" is the one I would suggest you use.</p>\n\n<p>Try the following:</p>\n\n<pre><code>import unicodedata\nfp= open(\"character_list\", \"w\")\nfor index in xrange(65536):\n    char= unichr(index)\n    try: its_name= unicodedata.name(char)\n    except ValueError: its_name= \"N/A\"\n    fp.write(\"%05d %04x %s %s\\n\" % (index, index, char.encode(\"UTF-8\"), its_name)\nfp.close()\n</code></pre>\n\n<p>Examine the file later with your favourite viewer.</p>\n\n<h2>For the colors</h2>\n\n<p><a href=\"http://www.python.org/doc/2.5.2/lib/module-curses.html\" rel=\"nofollow\">curses</a> is the module you want to use. Check this <a href=\"http://docs.python.org/howto/curses.html\" rel=\"nofollow\">tutorial</a>.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1322070817, 
      "creation_date": 1226605983, 
      "score": 1, 
      "owner": {
        "user_id": 6899, 
        "profile_image": "https://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 34885, 
        "link": "http://stackoverflow.com/users/6899/tzot", 
        "accept_rate": 90, 
        "display_name": "tzot"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1322070817, 
      "answer_id": 288030
    }, 
    {
      "body": "<p>I wrote a simple module, available at:\n<a href=\"http://pypi.python.org/pypi/colorconsole\" rel=\"nofollow\">http://pypi.python.org/pypi/colorconsole</a></p>\n\n<p>It works with Windows, Mac OS X and Linux.\nIt uses ANSI for Linux and Mac, but native calls to console functions on Windows.\nYou have colors, cursor positioning and keyboard input. It is not a replacement for curses, but can be very useful if you need to use in simple scripts or ASCII games.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1319128477, 
      "creation_date": 1319128477, 
      "score": 2, 
      "owner": {
        "user_id": 608126, 
        "profile_image": "https://www.gravatar.com/avatar/40fa6431238df7db2ba245186beb9d64?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 684, 
        "link": "http://stackoverflow.com/users/608126/nmenezes", 
        "display_name": "nmenezes"
      }, 
      "is_accepted": false, 
      "answer_id": 7839185
    }, 
    {
      "body": "<p>the answer is <a href=\"http://pypi.python.org/pypi/colorama\">http://pypi.python.org/pypi/colorama</a> for all cross-platform coloring in python</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1280128034, 
      "creation_date": 1280128034, 
      "score": 176, 
      "owner": {
        "user_id": 118495, 
        "profile_image": "https://www.gravatar.com/avatar/5aeec37586af7d8a14cbd567f61fc734?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 5511, 
        "link": "http://stackoverflow.com/users/118495/priestc", 
        "accept_rate": 69, 
        "display_name": "priestc"
      }, 
      "is_accepted": false, 
      "answer_id": 3332860
    }, 
    {
      "body": "<p>Here's a curses example:</p>\n\n<pre><code>import curses\n\ndef main(stdscr):\n    stdscr.clear()\n    if curses.has_colors():\n        for i in xrange(1, curses.COLORS):\n            curses.init_pair(i, i, curses.COLOR_BLACK)\n            stdscr.addstr(\"COLOR %d! \" % i, curses.color_pair(i))\n            stdscr.addstr(\"BOLD! \", curses.color_pair(i) | curses.A_BOLD)\n            stdscr.addstr(\"STANDOUT! \", curses.color_pair(i) | curses.A_STANDOUT)\n            stdscr.addstr(\"UNDERLINE! \", curses.color_pair(i) | curses.A_UNDERLINE)\n            stdscr.addstr(\"BLINK! \", curses.color_pair(i) | curses.A_BLINK)\n            stdscr.addstr(\"DIM! \", curses.color_pair(i) | curses.A_DIM)\n            stdscr.addstr(\"REVERSE! \", curses.color_pair(i) | curses.A_REVERSE)\n    stdscr.refresh()\n    stdscr.getch()\n\nif __name__ == '__main__':\n    print \"init...\"\n    curses.wrapper(main)\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1250165141, 
      "creation_date": 1246535957, 
      "score": 7, 
      "owner": {
        "user_id": 17160, 
        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 81645, 
        "link": "http://stackoverflow.com/users/17160/nosklo", 
        "accept_rate": 78, 
        "display_name": "nosklo"
      }, 
      "is_accepted": false, 
      "last_edit_date": 1250165141, 
      "answer_id": 1073959
    }, 
    {
      "body": "<p>I'm surprised no one has mentioned the <a href=\"http://pypi.python.org/pypi/termcolor\">Python termcolor module</a>. Usage is pretty simple:</p>\n\n<pre><code>from termcolor import colored\n\nprint colored('hello', 'red'), colored('world', 'green')\n</code></pre>\n\n<p>It may not be sophisticated enough, however, for game programming and the \"colored blocks\" that you want to do...</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1226820699, 
      "creation_date": 1226820699, 
      "score": 284, 
      "owner": {
        "user_id": 14878, 
        "profile_image": "https://www.gravatar.com/avatar/ea5b465c21aded0b76e319f5ceeeec1e?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 4249, 
        "link": "http://stackoverflow.com/users/14878/samat-jain", 
        "display_name": "Samat Jain"
      }, 
      "is_accepted": false, 
      "answer_id": 293633
    }, 
    {
      "body": "<p>There's also a module called WConIO that does much the same thing.  Unfortunately the author will probably not be able to build a Python 2.6 version any time soon.</p>\n", 
      "question_id": 287871, 
      "last_activity_date": 1226696873, 
      "creation_date": 1226696873, 
      "score": 0, 
      "owner": {
        "user_id": 31801, 
        "profile_image": "https://www.gravatar.com/avatar/2824b3ef49677bdade1868f37b172f4a?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 275, 
        "link": "http://stackoverflow.com/users/31801/tofystedeth", 
        "display_name": "Tofystedeth"
      }, 
      "is_accepted": false, 
      "answer_id": 291431
    }, 
    {
      "body": "<p>On Windows you can use module 'win32console' (available in some Python distributions) or module 'ctypes' (Python 2.5 and up) to access the Win32 API.</p>\n\n<p>To see complete code that supports both ways, see the <a href=\"http://code.google.com/p/testoob/source/browse/trunk/src/testoob/reporting/colored.py\">color console reporting code</a> from <a href=\"http://www.testoob.org\">Testoob</a>.</p>\n\n<p>ctypes example:</p>\n\n<pre><code>import ctypes\n\n# Constants from the Windows API\nSTD_OUTPUT_HANDLE = -11\nFOREGROUND_RED    = 0x0004 # text color contains red.\n\ndef get_csbi_attributes(handle):\n    # Based on IPython's winconsole.py, written by Alexander Belchenko\n    import struct\n    csbi = ctypes.create_string_buffer(22)\n    res = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(handle, csbi)\n    assert res\n\n    (bufx, bufy, curx, cury, wattr,\n    left, top, right, bottom, maxx, maxy) = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n    return wattr\n\n\nhandle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\nreset = get_csbi_attributes(handle)\n\nctypes.windll.kernel32.SetConsoleTextAttribute(handle, FOREGROUND_RED)\nprint \"Cherry on top\"\nctypes.windll.kernel32.SetConsoleTextAttribute(handle, reset)\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1226614950, 
      "creation_date": 1226614950, 
      "score": 14, 
      "owner": {
        "user_id": 37020, 
        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 30217, 
        "link": "http://stackoverflow.com/users/37020/orip", 
        "accept_rate": 87, 
        "display_name": "orip"
      }, 
      "is_accepted": false, 
      "answer_id": 288556
    }, 
    {
      "body": "<p>You want to learn about ANSI escape sequences. Here's a brief example:</p>\n\n<pre><code>CSI=\"\\x1B[\"\nreset=CSI+\"m\"\nprint CSI+\"31;40m\" + \"Colored Text\" + CSI + \"0m\"\n</code></pre>\n\n<p>For more info see <a href=\"http://en.wikipedia.org/wiki/ANSI_escape_code\">http://en.wikipedia.org/wiki/ANSI_escape_code</a></p>\n\n<p>For a block character, try a unicode character like \\u2588:</p>\n\n<pre><code>print u\"\\u2588\"\n</code></pre>\n\n<p>Putting it all together:</p>\n\n<pre><code>print CSI+\"31;40m\" + u\"\\u2588\" + CSI + \"0m\"\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1226604174, 
      "creation_date": 1226604174, 
      "score": 27, 
      "owner": {
        "user_id": 7432, 
        "profile_image": "https://www.gravatar.com/avatar/3e3921ee8a7792e4b5da0244933395e8?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 75966, 
        "link": "http://stackoverflow.com/users/7432/bryan-oakley", 
        "accept_rate": 94, 
        "display_name": "Bryan Oakley"
      }, 
      "is_accepted": false, 
      "answer_id": 287934
    }, 
    {
      "body": "<p>You can use the Python implementation of the curses library:\n<a href=\"http://docs.python.org/library/curses.html\">http://docs.python.org/library/curses.html</a></p>\n\n<p>Also, run this and you'll find your box:</p>\n\n<pre><code>for i in range(255):\n    print i, chr(i)\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1226603639, 
      "creation_date": 1226603639, 
      "score": 10, 
      "owner": {
        "user_id": 23597, 
        "profile_image": "https://www.gravatar.com/avatar/6a3655f68210b4f065de0e2741ae62f2?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 1405, 
        "link": "http://stackoverflow.com/users/23597/daharon", 
        "accept_rate": 50, 
        "display_name": "daharon"
      }, 
      "is_accepted": false, 
      "answer_id": 287919
    }, 
    {
      "body": "<p>For windows you cannot print to console with colors unless your using the win32api.</p>\n\n<p>For linux its as simple as using print, with the escape sequences outlined here:</p>\n\n<p><a href=\"http://www.linuxhowtos.org/Tips%20and%20Tricks/ansi_escape_sequences.htm\">Colors</a></p>\n\n<p>For the characther to print like a box, it really depends on what font you are using for the console window. The pound symbol works well, but it depends on the font:</p>\n\n<pre><code>#\n</code></pre>\n", 
      "question_id": 287871, 
      "last_activity_date": 1226603183, 
      "creation_date": 1226603183, 
      "score": 9, 
      "owner": {
        "user_id": 34395, 
        "profile_image": "https://www.gravatar.com/avatar/8c772096d4a459a6524bb7a4de563691?s=128&d=identicon&r=PG", 
        "user_type": "registered", 
        "reputation": 3505, 
        "link": "http://stackoverflow.com/users/34395/uberjumper", 
        "accept_rate": 87, 
        "display_name": "UberJumper"
      }, 
      "is_accepted": false, 
      "answer_id": 287896
    }
  ]
}