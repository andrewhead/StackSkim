diff --git a/proto/p9/regex_examples.py b/proto/p9/regex_examples.py
index 8e8eb98..d05a4e8 100755
--- a/proto/p9/regex_examples.py
+++ b/proto/p9/regex_examples.py
@@ -51,12 +51,22 @@ class UrtextVisitor(object):
 
     def visit_repeat(self, node):
         # As far as I can tell, repeat only ever has exactly 1 child
+        l = None if node.min_repeat > 1000 else node.min_repeat
+        if node.children[0].text == 'any None':
+            chars = string.ascii_letters
+            return self.word_builder.build_word(chars, messy=self.messy_words, length=l)
         if isinstance(node.children[0], InNode):
             in_node = node.children[0]
             chars = get_valid_characters(in_node)
-            return self.word_builder.build_word(chars, messy=self.messy_words)
+            return self.word_builder.build_word(chars, messy=self.messy_words, length=l)
         else:
-            return self.visit(node.children[0]) * node.repetitions
+            mystr = ''
+            if node.min_repeat < 1000:
+                for i in range(0, node.min_repeat):
+                    mystr += self.visit(node.children[0])
+                return mystr
+            else:
+                return self.visit(node.children[0]) * node.repetitions
  
     def visit_branch(self, node):
         return self.visit(node.children[node.choice])
@@ -76,7 +86,7 @@ class WordBuilder(object):
     
     def build_word(self, chars, length=None, messy=True):
         if length:
-            return ''.join(random.choice(chars))
+            return ''.join([random.choice(chars) for _ in range(0,length)])
         else:
             word = self._get_dict_term(chars)
             if messy:
