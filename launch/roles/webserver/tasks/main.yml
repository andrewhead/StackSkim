---
- name: Install server software
  apt: name={{ item }} update_cache=yes
  with_items:
  - git
  - python-pip
  - nginx
  - python-boto
  - python-dev
  - supervisor
  sudo: true

- name: Install application dependencies
  apt: name={{ item }} update_cache=yes
  with_items: systempkgs
  sudo: true
  when: systempkgs is defined

- name: Create project directory
  file: state=directory path={{ projectdir }} owner=ubuntu
  sudo: true

- name: Create static directory
  file: state=directory path={{ scriptdir }} owner=ubuntu

- name: Create static files directory
  file: state=directory path={{ staticdir }} owner=ubuntu

- name: Create log file
  file: state=touch path={{ logfile }} owner=ubuntu
  sudo: true
  when: logfile is defined

- name: Install virtualenv
  pip: name=virtualenv
  sudo: true

- name: Transfer Python dependencies list
  copy: src={{ appname }}-reqs.txt dest={{ projectdir }}

- name: Install server Python dependencies
  pip: requirements={{ projectdir }}/{{ appname }}-reqs.txt virtualenv="{{ venv }}"

- name: Make Java project dependencies directory
  file: state=directory path={{ src }}/deps owner=ubuntu

- name: Remove previous versions of project dependencies
  file: state=absent path={{ src }}/deps/{{ item }}
  with_items: javadeps
  when: javadeps is defined

- name: Install Java dependencies for project
  s3: bucket={{ awsbucket }} object={{ item }} dest={{ src }}/deps/{{ item }} mode=get overwrite=false
  with_items: javadeps
  when: javadeps is defined

- name: Install gunicorn
  pip: name=gunicorn virtualenv="{{ venv }}"

- name: Configure nginx sites
  template: src=nginx-site.j2 dest=/etc/nginx/sites-enabled/{{ appname }}
  sudo: true

- name: Remove default nginx user
  lineinfile: dest=/etc/nginx/nginx.conf line="user www-data;" state=absent
  sudo: true

- name: Add nginx user
  lineinfile: dest=/etc/nginx/nginx.conf line="user ubuntu ubuntu;"
  sudo: true

- name: Checkout source code
  git: repo={{ repo }} dest={{ src }}

- name: Create directory for Django secret keys
  file: state=directory path=/etc/django
  sudo: true

- name: Fetch Django app secret key
  s3: bucket={{ awsbucket }} object={{ djkey }} dest=/etc/django/{{ djkey }} mode=get
  sudo: true

- name: Sync DB with Django models
  django_manage: >
    command={{ item }}
    app_path={{ djdir }}
    virtualenv={{ venv }}
    settings={{ djsettings }}
  with_items:
  - syncdb
  - migrate

- name: Sync DB with Django models
  django_manage: >
    command=collectstatic
    app_path={{ djdir }}
    virtualenv={{ venv }}
    settings={{ djsettings }}
  when: staticfiles is defined

- name: Transfer setup scripts
  template: src={{ item }}.j2 dest={{ scriptdir }}/{{ item }}.sh
  with_items: scripts
  when: scripts is defined
  tags: scripts

- name: Run setup scripts
  command: /bin/bash {{ item }}.sh chdir={{ scriptdir }}
  with_items: scripts
  when: scripts is defined
  tags: scripts

- name: Add auxiliary processes to supervisor
  template: src={{ item }}.j2 dest=/etc/supervisor/conf.d/{{ item }}.conf
  with_items: processes
  when: processes is defined
  sudo: true

- name: Load auxiliary processes
  supervisorctl: name={{ item }} state=present
  with_items: processes
  when: processes is defined
  sudo: true

- name: Restart auxiliary processes (stop)
  supervisorctl: name={{ item }} state=stopped
  with_items: processes
  when: processes is defined
  sudo: true

- name: Restart auxiliary processes (start)
  supervisorctl: name={{ item }} state=started
  with_items: processes
  when: processes is defined
  sudo: true

- name: Copy app to supervisor
  template: src=supervisor.j2 dest=/etc/supervisor/conf.d/{{ appname }}.conf
  sudo: true

- name: Stop application
  supervisorctl: name={{ appname }} state={{ item }}
  with_items:
  - present
  - stopped
  sudo: true

- name: Cleanup after last application run
  file: dest=/tmp/{{ appname }}.pid state=absent
  sudo: true

- name: Start application
  supervisorctl: name={{ appname }} state=started
  sudo: true

- name: Restart nginx
  service: name=nginx state=restarted
